version: 5.0.27
collection:
  -
    class_name: Test
    id: 1
    name: _saveData
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      getSessionId = function() {
        id = 0
        if(!is.null(session) && is.list(session)) {
          id = session$id
        } else {
          id = paste0("i",concerto$session$id)
        }
        return(id)
      }
      
      getMergedData = function() {
        mergedData = data
        if(!is.list(mergedData)) { 
          mergedData = list()
        }
      
        for(.name in .dynamicInputs) {
          mergedData[[.name]] = get(.name)
        }
        return(mergedData)
      }
      
      getDataId = function(name, sessionId, decodedTable) {
        sql = "SELECT id FROM {{table}} WHERE {{sessionIdColumn}}='{{sessionId}}' AND {{nameColumn}}='{{name}}'"
        result = concerto.table.query(sql, params=list(
          table=decodedTable$table,
          sessionIdColumn=decodedTable$columns$session_id,
          sessionId=sessionId,
          nameColumn=decodedTable$columns$name,
          name=name
        ))
        if(dim(result)[1] == 0) { return(NULL) }
        return(result[1,1])
      }
      
      saveData = function(name, value, sessionId, decodedTable) {
        id = getDataId(name, sessionId, decodedTable)
        params=list(
          table=decodedTable$table,
          sessionIdColumn=decodedTable$columns$session_id,
          sessionId=sessionId,
          nameColumn=decodedTable$columns$name,
          name=name,
          valueColumn=decodedTable$columns$value,
          value=value,
          id=id
        )
      
        if(is.null(id)) {
          concerto.table.query("INSERT INTO {{table}} ({{sessionIdColumn}}, {{nameColumn}}, {{valueColumn}}) VALUES ('{{sessionId}}', '{{name}}', '{{value}}')", params=params)
        } else {
          concerto.table.query("UPDATE {{table}} SET {{sessionIdColumn}}='{{sessionId}}', {{nameColumn}}='{{name}}', {{valueColumn}}='{{value}}' WHERE id={{id}}", params=params)
        }
      }
      
      sessionId = getSessionId()
      decodedTable = fromJSON(table)
      mergedData = getMergedData()
      for(name in ls(mergedData)) {
        saveData(name, mergedData[[name]], sessionId, decodedTable)
      }
      
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 1
        name: data
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 1
        parentVariable: null
      -
        class_name: TestVariable
        id: 2
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 1
        parentVariable: null
      -
        class_name: TestVariable
        id: 3
        name: session
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 1
        parentVariable: null
      -
        class_name: TestVariable
        id: 4
        name: table
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 1
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: true
    hash: 474d3194b6b8bfc7ef9bdbd6c194600a656eaca4
  -
    class_name: TestWizard
    id: 1
    name: saveData
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 1
        title: Data
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 1
        params:
          -
            class_name: TestWizardParam
            id: 1
            label: 'Data Table'
            description: ''
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '{"table":"data","columns":{"session_id":"session_id","name":"name","value":"value"}}'
            testVariable: 4
            name: table
            wizardStep: 1
            stepTitle: Data
            order: 0
            wizard: 1
            definition:
              cols:
                -
                  name: session_id
                  label: 'Session ID'
                  tooltip: ''
                -
                  name: name
                  label: Name
                  tooltip: ''
                -
                  name: value
                  label: Value
                  tooltip: ''
              placeholder: 0
    test: 1
    groups: ''
    starterContent: true
    hash: 61afa3ba4266ee1faf6d223d5cb6531ce1d1c376
  -
    class_name: Test
    id: 2
    name: saveData
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 1
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 5
        name: data
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 2
        parentVariable: 1
      -
        class_name: TestVariable
        id: 6
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 2
        parentVariable: 2
      -
        class_name: TestVariable
        id: 7
        name: session
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 2
        parentVariable: 3
      -
        class_name: TestVariable
        id: 8
        name: table
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '{"table":"data","columns":{"session_id":"session_id","name":"name","value":"value"}}'
        test: 2
        parentVariable: 4
    sourceWizard: 1
    sourceWizardTest: 32
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: true
    hash: 4658c2d970bb04e95a144041a1b4600dd86f10d5
  -
    class_name: DataTable
    id: 1
    name: data
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: name
        type: string
        nullable: true
        length: 1024
      -
        name: value
        type: text
        nullable: false
        length: ''
      -
        name: session_id
        type: string
        nullable: true
        length: 1024
    groups: ''
    starterContent: true
    hash: 142bd70d86090d5c765774eeeda421d12312c22d
  -
    class_name: Test
    id: 3
    name: _authorizeUser
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      library(digest)
      
      resultCode = 0
      getUserByLogin = function(login) {
        if(userBankType == "direct") {
          userList = fromJSON(userBankList)
          if(length(userList) == 0) {
            resultCode <<- 1
            return(NULL)
          }
      
          for(i in 1:length(userList)) {
            user = userList[[i]]
            if(user$login == login && user$enabled == 1) {
              return(user)
            }
          }
          resultCode <<- 1
          return(NULL)
        } else {
          tableMap = fromJSON(userBankTable)
          sql = "
      SELECT * 
      FROM {{table}} 
      WHERE 
      {{loginColumn}}='{{login}}'
      AND {{enabledColumn}}=1
      "
          user = concerto.table.query(sql, params=list(
            table=tableMap$table,
            loginColumn=tableMap$columns$login,
            enabledColumn=tableMap$columns$enabled,
            login=login
          ))
          if(dim(user)[1] == 0) {
            resultCode <<- 1
            return(NULL)
          }
          return(user[1,])
        }
      }
      
      checkPassword = function(rawPassword, encryptedPassword, encryption) {
        if(is.na(encryptedPassword) || encryptedPassword == "") { return(T) }
        if(is.na(rawPassword)) { return(F) }
        if(encryption=="plain") {
          return(rawPassword == encryptedPassword)
        }
        return(digest(rawPassword, encryption, serialize=F) == encryptedPassword)
      }
      
      authorizeUser = function(login, password) {
        user = getUserByLogin(login)
        concerto.log(login, "login checked")
        concerto.log(password, "password checked")
        concerto.log(user, "user checked for password")
        
        if(!is.null(user) && checkPassword(password, user$password, userBankEncryption)) {
          return(user)
        }
        resultCode <<- 1
        return(NULL)
      }
      
      user = authorizeUser(login, password)
      if(is.null(user)) {
        concerto.log(paste0("user ",login," unauthorized"), title="authorization result")
        .branch = "unauthorized"
      } else {
        concerto.log(paste0("user ",login," authorized"), title="authorization result")
        .branch = "authorized"
      }
      
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 9
        name: .branch
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 10
        name: authorized
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 11
        name: login
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 12
        name: password
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 13
        name: resultCode
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 14
        name: unauthorized
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 15
        name: user
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 16
        name: userBankEncryption
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 17
        name: userBankList
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 18
        name: userBankTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
      -
        class_name: TestVariable
        id: 19
        name: userBankType
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 3
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: true
    hash: 24a5c46eb134259162b5250b8fee9a0d679dde61
  -
    class_name: TestWizard
    id: 2
    name: authorizeUser
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 2
        title: 'User Bank'
        description: 'User bank settings'
        orderNum: 0
        colsNum: 0
        wizard: 2
        params:
          -
            class_name: TestWizardParam
            id: 2
            label: 'Password encryption'
            description: |
              <p>Choose which hashing algorithm to apply&nbsp;to user&nbsp;passwords:</p>
              
              <ul>
              	<li><strong>md5</strong></li>
              	<li><strong>sha1</strong></li>
              	<li><strong>crc32</strong></li>
              	<li><strong>sha256</strong></li>
              	<li><strong>sha512</strong></li>
              	<li><strong>xxhash32</strong></li>
              	<li><strong>xxhash64</strong></li>
              	<li><strong>murmur32</strong></li>
              	<li><strong>plain</strong></li>
              </ul>
              
            hideCondition: ''
            type: 3
            passableThroughUrl: '0'
            value: plain
            testVariable: 16
            name: userBankEncryption
            wizardStep: 2
            stepTitle: 'User Bank'
            order: 0
            wizard: 2
            definition:
              options:
                -
                  label: md5
                  order: 1
                  value: md5
                -
                  label: sha1
                  order: 2
                  value: sha1
                -
                  label: crc32
                  order: 3
                  value: crc32
                -
                  label: sha256
                  order: 4
                  value: sha256
                -
                  label: sha512
                  order: 5
                  value: sha512
                -
                  label: xxhash32
                  order: 6
                  value: xxhash32
                -
                  label: xxhash64
                  order: 7
                  value: xxhash64
                -
                  label: murmur32
                  order: 8
                  value: murmur32
                -
                  label: plain
                  order: 0
                  value: plain
              defvalue: plain
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 3
            label: Type
            description: |
              Select where to get user information from:
              <ul>
              	<li><b>Direct</b>&nbsp;- user bank is declared at node level</li>
              	<li><strong>Table</strong> - user bank is taken from data table</li>
              </ul>
              
            hideCondition: ''
            type: 3
            passableThroughUrl: '0'
            value: direct
            testVariable: 19
            name: userBankType
            wizardStep: 2
            stepTitle: 'User Bank'
            order: 0
            wizard: 2
            definition:
              options:
                -
                  label: Direct
                  value: direct
                -
                  label: Table
                  value: table
              defvalue: direct
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 4
            label: 'User list'
            description: 'Directly input a list of users for authorisation'
            hideCondition: 'values.userBankType != "direct"'
            type: 10
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 17
            name: userBankList
            wizardStep: 2
            stepTitle: 'User Bank'
            order: 1
            wizard: 2
            definition:
              element:
                type: 9
                definition:
                  fields:
                    -
                      name: id
                      type: 0
                      label: Id
                      definition:
                        placeholder: 0
                    -
                      name: login
                      type: 0
                      label: Login
                      definition:
                        placeholder: 0
                    -
                      name: password
                      type: 0
                      label: Password
                      definition:
                        placeholder: 0
                    -
                      name: enabled
                      type: 4
                      label: Enabled
                      definition:
                        defvalue: '1'
                        placeholder: 0
                  placeholder: 0
          -
            class_name: TestWizardParam
            id: 5
            label: 'User table'
            description: 'Map columns in data table to user bank'
            hideCondition: 'values.userBankType != "table"'
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 18
            name: userBankTable
            wizardStep: 2
            stepTitle: 'User Bank'
            order: 1
            wizard: 2
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: login
                  label: Login
                  tooltip: ''
                -
                  name: password
                  label: Password
                  tooltip: ''
                -
                  name: enabled
                  label: Enabled
                  tooltip: ''
              placeholder: 0
    test: 3
    groups: ''
    starterContent: true
    hash: 355d00eb6b84178f6724ecf5e5880f66a5b422d2
  -
    class_name: Test
    id: 4
    name: authorizeUser
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 1
    code: null
    description: 'User authorization.'
    variables:
      -
        class_name: TestVariable
        id: 20
        name: .branch
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 4
        parentVariable: 9
      -
        class_name: TestVariable
        id: 21
        name: authorized
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 4
        parentVariable: 10
      -
        class_name: TestVariable
        id: 22
        name: login
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 4
        parentVariable: 11
      -
        class_name: TestVariable
        id: 23
        name: password
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 4
        parentVariable: 12
      -
        class_name: TestVariable
        id: 24
        name: resultCode
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 4
        parentVariable: 13
      -
        class_name: TestVariable
        id: 25
        name: unauthorized
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 4
        parentVariable: 14
      -
        class_name: TestVariable
        id: 26
        name: user
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 4
        parentVariable: 15
      -
        class_name: TestVariable
        id: 27
        name: userBankEncryption
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: plain
        test: 4
        parentVariable: 16
      -
        class_name: TestVariable
        id: 28
        name: userBankList
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 4
        parentVariable: 17
      -
        class_name: TestVariable
        id: 29
        name: userBankTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '{"table":"users","columns":{"id":"id","login":"login","password":"password","enabled":"enabled"}}'
        test: 4
        parentVariable: 18
      -
        class_name: TestVariable
        id: 30
        name: userBankType
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: direct
        test: 4
        parentVariable: 19
    sourceWizard: 2
    sourceWizardTest: 1
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: true
    hash: aa462b167bc39bf132a9cb626584b2b1739056c4
  -
    class_name: DataTable
    id: 2
    name: users
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: login
        type: string
        nullable: false
        length: 1024
      -
        name: password
        type: string
        nullable: false
        length: 1024
      -
        name: enabled
        type: boolean
        nullable: false
        length: ''
    groups: ''
    starterContent: true
    hash: bd8e500ed0d631b6946bf5cb7be718b5091cbb96
  -
    class_name: Test
    id: 5
    name: _form
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      getTemplateParams = function() {
        if(!is.list(templateParams)) {
          templateParams = list()
        }
        templateParams$fields = fields
        templateParams$initialValues = initialValues
        templateParams$title = title
        templateParams$logo = logo
        templateParams$instructions = instructions
        templateParams$buttonLabel = buttonLabel
        templateParams$footer = footer
      
        for(name in .dynamicInputs) {
          templateParams[[name]] = get(name)
        }
        return(templateParams)
      }
      
      response = concerto5:::concerto.template.show(
        templateId=template,
        html=templateHtml,
        params=getTemplateParams()
      )
      
      for(.name in .dynamicReturns) {
        if(!is.null(response[[.name]])) {
          assign(.name, response[[.name]])
        }
      }
      if(".branch" %in% .dynamicReturns) {
        .branch = response$buttonPressed
        if(!(.branch %in% .dynamicBranches)) { .branch = "out" }
      }
      
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 31
        name: buttonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Next
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 32
        name: fields
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 33
        name: footer
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 34
        name: initialValues
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '{}'
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 35
        name: instructions
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 36
        name: logo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 37
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 38
        name: response
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 39
        name: template
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 40
        name: templateHtml
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 41
        name: templateParams
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 5
        parentVariable: null
      -
        class_name: TestVariable
        id: 42
        name: title
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 5
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: true
    hash: d817f4c46ee35f655d7daaf6344fe743f1905f06
  -
    class_name: TestWizard
    id: 3
    name: form
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 3
        title: Form
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 3
        params:
          -
            class_name: TestWizardParam
            id: 6
            label: 'Button Label'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: Next
            testVariable: 31
            name: buttonLabel
            wizardStep: 3
            stepTitle: Form
            order: 13
            wizard: 3
            definition:
              defvalue: Next
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 7
            label: Fields
            description: 'List of fields to be used by the form'
            hideCondition: ''
            type: 10
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 32
            name: fields
            wizardStep: 3
            stepTitle: Form
            order: 0
            wizard: 3
            definition:
              element:
                type: 9
                definition:
                  fields:
                    -
                      name: name
                      type: 0
                      label: Name
                      definition:
                        placeholder: 0
                    -
                      name: label
                      type: 0
                      label: Label
                      definition:
                        placeholder: 0
                    -
                      name: type
                      type: 3
                      label: Type
                      definition:
                        options:
                          -
                            label: 'Single line text'
                            order: 6
                            value: singleLine
                          -
                            label: 'Multi line text'
                            order: 2
                            value: multiLine
                          -
                            label: Checkbox
                            order: 0
                            value: checkbox
                          -
                            label: Password
                            order: 4
                            value: password
                          -
                            label: Select
                            order: 5
                            value: select
                          -
                            label: Number
                            order: 3
                            value: number
                          -
                            label: Date
                            order: 1
                            value: date
                        defvalue: singleLine
                        placeholder: 0
                    -
                      name: validation
                      type: 10
                      label: Validation
                      definition:
                        element:
                          type: 9
                          definition:
                            fields:
                              -
                                name: type
                                type: 3
                                label: Type
                                definition:
                                  options:
                                    -
                                      label: Required
                                      value: required
                                    -
                                      label: 'Min length'
                                      value: minlength
                                    -
                                      label: 'Max length'
                                      value: maxlength
                                    -
                                      label: Min
                                      value: min
                                    -
                                      label: Max
                                      value: max
                                    -
                                      label: Pattern
                                      value: pattern
                                  defvalue: required
                                  placeholder: 0
                                hideCondition: ''
                              -
                                name: value
                                type: 0
                                label: Value
                                definition:
                                  placeholder: 0
                                hideCondition: 'parent.type != "minlength" && parent.type != "maxlength" && parent.type != "min" && parent.type != "max" && parent.type != "pattern"'
                              -
                                name: alert
                                type: 0
                                label: Alert
                                definition:
                                  defvalue: 'Invalid value!'
                                  placeholder: 0
                            placeholder: 0
                        placeholder: 0
                    -
                      name: definition
                      type: 9
                      label: Definition
                      definition:
                        fields:
                          -
                            name: options
                            type: 10
                            label: Options
                            definition:
                              element:
                                type: 9
                                definition:
                                  fields:
                                    -
                                      name: value
                                      type: 0
                                      label: Value
                                      definition:
                                        placeholder: 0
                                    -
                                      name: label
                                      type: 0
                                      label: label
                                      definition:
                                        placeholder: 0
                                  placeholder: 0
                              placeholder: 0
                        placeholder: 0
                      hideCondition: 'parent.type != "select"'
                  placeholder: 0
          -
            class_name: TestWizardParam
            id: 8
            label: Footer
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: 'Created with <a href="http://www.concertoplatform.com" target="_blank">Concerto Platform</a>'
            testVariable: 33
            name: footer
            wizardStep: 3
            stepTitle: Form
            order: 14
            wizard: 3
            definition:
              defvalue: 'Created with <a href="http://www.concertoplatform.com" target="_blank">Concerto Platform</a>'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 9
            label: Instructions
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: ''
            testVariable: 35
            name: instructions
            wizardStep: 3
            stepTitle: Form
            order: 12
            wizard: 3
            definition:
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 10
            label: 'Logo URL'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 36
            name: logo
            wizardStep: 3
            stepTitle: Form
            order: 11
            wizard: 3
            definition:
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 11
            label: Template
            description: 'Select which template to use for form design. This field will be ignored if Template HTML is set (and not empty).'
            hideCondition: ''
            type: 5
            passableThroughUrl: '0'
            value: form
            testVariable: 39
            name: template
            wizardStep: 3
            stepTitle: Form
            order: 2
            wizard: 3
            definition:
              defvalue: form
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 12
            label: 'Template HTML'
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: ''
            testVariable: 40
            name: templateHtml
            wizardStep: 3
            stepTitle: Form
            order: 1
            wizard: 3
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 13
            label: Title
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 42
            name: title
            wizardStep: 3
            stepTitle: Form
            order: 10
            wizard: 3
            definition:
              placeholder: 0
    test: 5
    groups: ''
    starterContent: true
    hash: 8e651f6591df2386afd9a9fa6b8dd3e823d98c2e
  -
    class_name: Test
    id: 6
    name: form
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 1
    code: null
    description: 'Form page.'
    variables:
      -
        class_name: TestVariable
        id: 43
        name: buttonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Next
        test: 6
        parentVariable: 31
      -
        class_name: TestVariable
        id: 44
        name: fields
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[{"name":"name","label":"What''s your name?","type":"singleLine","validation":[{"type":"required","value":"","alert":"Answer required!"}],"definition":{"options":null}}]'
        test: 6
        parentVariable: 32
      -
        class_name: TestVariable
        id: 45
        name: footer
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 6
        parentVariable: 33
      -
        class_name: TestVariable
        id: 46
        name: initialValues
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 6
        parentVariable: 34
      -
        class_name: TestVariable
        id: 47
        name: instructions
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 6
        parentVariable: 35
      -
        class_name: TestVariable
        id: 48
        name: logo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 6
        parentVariable: 36
      -
        class_name: TestVariable
        id: 49
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 6
        parentVariable: 37
      -
        class_name: TestVariable
        id: 50
        name: response
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 6
        parentVariable: 38
      -
        class_name: TestVariable
        id: 51
        name: template
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: form
        test: 6
        parentVariable: 39
      -
        class_name: TestVariable
        id: 52
        name: templateHtml
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 6
        parentVariable: 40
      -
        class_name: TestVariable
        id: 53
        name: templateParams
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 6
        parentVariable: 41
      -
        class_name: TestVariable
        id: 54
        name: title
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 6
        parentVariable: 42
    sourceWizard: 3
    sourceWizardTest: 10
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: true
    hash: ba8d127ff85920dc61515c5421d0894d3fba1a16
  -
    class_name: ViewTemplate
    id: 1
    name: form
    description: ''
    accessibility: 2
    archived: '0'
    head: ''
    css: |
      :root {
        --option-bg: #f3f3f3;
        --option-hover-bg: #efefef;
        --option-color: #000000;
        --option-unselected-bg: #ffffd5;
        --error-color: #f32828;
        --accent-light-color: #45b87e;
        --accent-dark-color: #35a26b;
        --font-color-for-accent-bg: #ffffff;
        --main-font-style: 'Open Sans', sans-serif;
        --main-font-color: #000000;
        --main-font-size: 16px;
        --header-bg: #4581b5;
        --header-color: #ffffff;
      }
      
      .body {
        min-height: 100vh;
        position: relative;
        font-size: var(--main-font-size);
        font-family: var(--main-font-style);
        color: var(--main-font-color);
        display: flex;
        flex-direction: column;
      }
      
      .container {
        max-width: 1000px;
        margin: auto;
        padding: 20px;
      }
      
      .main-btn {
        background-color: var(--accent-light-color);
        border: none;
        padding: 10px 20px;
        font-size: var(--main-font-size);
        color: var(--font-color-for-accent-bg);
        display: block;
        min-width: 100px;
        cursor: pointer;
        -webkit-transform: perspective(1px) translateZ(0);
        transform: perspective(1px) translateZ(0);
        -webkit-transition-duration: 0.3s;
        transition-duration: 0.3s;
        -webkit-transition-property: background-color;
        transition-property: background-color;
        outline: none;
      }
      
      .main-btn:hover {
        background-color: var(--accent-dark-color);
      }
      
      .main-btn:disabled {
        background-color: var(--option-hover-bg);
        color: #ccc;
        cursor: default;
      }
      
      .left-btn {
        margin: 0 auto 0 0;
      }
      
      .right-btn {
        margin: 0 0 0 auto;
      }
      
      .question-footer {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin-top: 30px;
      }
      
      .form-error {
        color: var(--error-color);
        font-size: 14px;
      }
      
      .form-field {
        margin-bottom: 20px;
      }
      
      @media screen and (max-width: 500px) {
        .main-btn {
          min-width: 0;
        }
      }
      
      .instructions {
        margin-bottom: 20px;
      }
      
    js: |
      testRunner.controllerProvider.register("form", function ($scope) {
        $scope.instructions = testRunner.R.instructions;
        $scope.fields = angular.fromJson(testRunner.R.fields);
        $scope.values = angular.fromJson(testRunner.R.initialValues);
        if (typeof $scope.values === 'undefined' || $scope.values === null) $scope.values = {};
        $scope.buttonLabel = testRunner.R.buttonLabel ? testRunner.R.buttonLabel : "Next";
      
        function initializeValues() {
          for (var i = 0; i < $scope.fields.length; i++) {
            var field = $scope.fields[i];
      
            if (typeof $scope.values[field.name] === 'undefined') {
              $scope.values[field.name] = "";
            }
          }
        }
      
        initializeValues();
      });
      
    html: |
      <src>
      	{{template:inputSingleLine,css=FALSE,html=FALSE}}
      	{{template:inputMultiLine,css=FALSE,html=FALSE}}
      	{{template:inputNumber,css=FALSE,html=FALSE}}
      	{{template:inputCheckbox,css=FALSE,html=FALSE}}
      	{{template:inputSelect,css=FALSE,html=FALSE}}
      	{{template:inputPassword,css=FALSE,html=FALSE}}
      	{{template:inputDate,css=FALSE,html=FALSE}}
      </src>
      <div class="body" ng-controller="form">
      	{{template:header}}
      	<div class="questions">
      		<div class="container">
      			<div class="instructions" ng-if="instructions">
      				{{instructions}}
      			</div>
      
      			<form name="form">
      				<div ng-repeat="field in fields track by $index">
      					<div class="form-field">
      						<div ng-switch="field.type">
      							<src>
      								<input-single-line field="field" ng-switch-when="singleLine" values="values"></input-single-line>
      								<input-multi-line field="field" ng-switch-when="multiLine" values="values"></input-multi-line>
      								<input-number field="field" ng-switch-when="number" values="values"></input-number>
      								<input-checkbox field="field" ng-switch-when="checkbox" values="values"></input-checkbox>
      								<input-select field="field" ng-switch-when="select" values="values"></input-select>
      								<input-password field="field" ng-switch-when="password" values="values"></input-password>
      								<input-date field="field" ng-switch-when="date" values="values"></input-date>
      							</src>
      						</div>
      
      						<div class="form-error" ng-repeat="error in field.validation" ng-show="form[field.name].$error[error.type] && form[field.name].$dirty">
      							[[error.alert]]
      						</div>
      					</div>
      				</div>
      
      				<div class="question-footer">
      					<button class="main-btn right-btn" id="submitButton" name="submit" ng-disabled="form.$invalid">
      						{{buttonLabel}}
      					</button>
      				</div>
      			</form>
      		</div>
      	</div>
      	{{template:footer}}
      </div>
      
    groups: ''
    starterContent: true
    hash: b9da57f7e2d866390b6226bd38f25cb5135a5485
  -
    class_name: Test
    id: 7
    name: _startSession
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      concerto.log(user, "user")
      
      formatFields = function(user, extraFields) {
        userId = 0
        if(!is.null(user) && !is.na(user)) { userId=user$id }
        fields = list(
          user_id=userId,
          internal_id=concerto$session$id, 
          test_id=concerto$mainTest$id,
          startedTime=Sys.time(),
          updateTime=Sys.time(),
          finished=0
        )
        if(is.list(extraFields)) {
          for(name in ls(extraFields)) {
            fields[[name]] = extraFields[[name]]
          }
        }
        return(fields)
      }
      
      getMappedColumns = function(fieldNames, tableMap) {
        cols = c()
        for(i in 1:length(fieldNames)) {
          col = tableMap$columns[[fieldNames[i]]]
          if(!is.null(col)) {
            cols=c(cols,col)
            next
          }
          cols=c(cols,fieldNames[i])
        }
        return(cols)
      }
      
      insertSession = function(fields, tableMap) {
        sqlColumns = paste(getMappedColumns(ls(fields), tableMap), collapse=",")
        sqlValues = paste0("'{{",ls(fields),"}}'", collapse=",")
        sql = paste0("INSERT INTO {{table}} (",sqlColumns,") VALUES (",sqlValues,")")
        concerto.table.query(sql, params=append(fields, list(
          table=tableMap$table
        )))
        id = concerto.table.lastInsertId()
      
        sql = "SELECT * FROM {{table}} WHERE {{idColumn}}={{id}}"
        session = concerto.table.query(sql, params=list(
          table=tableMap$table,
          idColumn=tableMap$columns$id,
          id=id
        ))
        if(dim(session)[1] > 0) {
          return(session[1,])
        }
        return(NULL)
      }
      
      resumeSession = function(user, tableMap) {
        if(is.null(user)) { return(NULL) }
      
        session = concerto.table.query("
      SELECT * FROM {{table}} 
      WHERE 
      {{testIdColumn}} = {{testId}} AND 
      {{userIdColumn}} = '{{userId}}' AND 
      {{finishedColumn}} = 0 
      ORDER BY id DESC", params=list(
        table=tableMap$table, 
        testIdColumn=tableMap$columns$test_id, 
        testId=concerto$mainTest$id, 
        userIdColumn=tableMap$columns$user_id, 
        userId=user$id,
        finishedColumn=tableMap$columns$finished
      ), n=1)
        if(dim(session)[1] == 0) {
          return(NULL)
        }
      
        session = as.list(session)
        session$previousInternal_id = session$internal_id
        session$internal_id = concerto$session$id
      
        timeLimit = as.numeric(resumableExpiration)
        if(timeLimit > 0) {
          timeDiff = as.numeric(Sys.time()) - as.numeric(strptime(session$updateTime, "%Y-%m-%d %H:%M:%S"))
          if(timeDiff > timeLimit) {
            concerto.log("session resume time limit exceeded")
            return(NULL)
          }
        }
      
        concerto.table.query("
      UPDATE {{table}} 
      SET 
      {{internalIdColumn}}='{{internal_id}}', 
      {{updateTimeColumn}}=CURRENT_TIMESTAMP 
      WHERE id={{id}}", params=list(
        table=tableMap$table,
        internalIdColumn=tableMap$columns$internal_id,
        internal_id=concerto$session$id,
        id=session$id,
        updateTimeColumn=tableMap$columns$updateTime
      ))
      
        return(session)
      }
      
      fields = formatFields(user, extraFields)
      concerto.log(fields, "fields")
      tableMap = fromJSON(sessionBankTable)
      
      session = NULL
      if(resumable == 1) {
        session = resumeSession(user, tableMap)
        if(restoreState == 1 && !is.null(session)) {
          hash = concerto.table.query("SELECT hash FROM TestSession WHERE id={{id}}", list(id=session$previousInternal_id))
          concerto.log(hash, "resuming session...")
          if(!concerto.session.unserialize(hash=hash)) {
            session = NULL
          }
        }
      }
      if(is.null(session)) {
        session = insertSession(fields, tableMap)
      }
      
      if(preventParallelSessionUsage == 1) {
        concerto.event.add("onTemplateSubmit", function(response) {
          sql = "
      SELECT {{internalIdCol}}
      FROM {{table}} 
      WHERE id={{id}}"
          internalId = concerto.table.query(sql, params=list(
            table=tableMap$table,
            internalIdCol=tableMap$columns$internal_id,
            id=session$id
          ))[1,1]
          
          if(internalId != concerto$session$id) {
            concerto.log("detected parallel session usage")
            concerto.session.stop(response=RESPONSE_SESSION_LOST)
          }
        })
      }
      
      concerto.log(session, "session")
      
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 55
        name: extraFields
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 7
        parentVariable: null
      -
        class_name: TestVariable
        id: 56
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 7
        parentVariable: null
      -
        class_name: TestVariable
        id: 57
        name: preventParallelSessionUsage
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 7
        parentVariable: null
      -
        class_name: TestVariable
        id: 58
        name: restoreState
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 7
        parentVariable: null
      -
        class_name: TestVariable
        id: 59
        name: resumable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 7
        parentVariable: null
      -
        class_name: TestVariable
        id: 60
        name: resumableExpiration
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 7
        parentVariable: null
      -
        class_name: TestVariable
        id: 61
        name: session
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 7
        parentVariable: null
      -
        class_name: TestVariable
        id: 62
        name: sessionBankTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 7
        parentVariable: null
      -
        class_name: TestVariable
        id: 63
        name: user
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 7
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: true
    hash: c5d274096c975d18db9e99d3518ae97dba6771b5
  -
    class_name: TestWizard
    id: 4
    name: startSession
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 4
        title: Session
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 4
        params:
          -
            class_name: TestWizardParam
            id: 14
            label: 'Prevent Parallel Session Usage'
            description: ''
            hideCondition: 'values.resumable == 0'
            type: 4
            passableThroughUrl: '0'
            value: '1'
            testVariable: 57
            name: preventParallelSessionUsage
            wizardStep: 4
            stepTitle: Session
            order: 4
            wizard: 4
            definition:
              defvalue: '1'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 15
            label: 'Restore State?'
            description: ''
            hideCondition: 'values.resumable == 0'
            type: 4
            passableThroughUrl: '0'
            value: '1'
            testVariable: 58
            name: restoreState
            wizardStep: 4
            stepTitle: Session
            order: 3
            wizard: 4
            definition:
              defvalue: '1'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 16
            label: 'Resumable expiration'
            description: 'Specify the length of time (in seconds) for which the session should be resumable. <strong>0</strong>&nbsp;= session does not expire.'
            hideCondition: 'values.resumable == 0'
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 60
            name: resumableExpiration
            wizardStep: 4
            stepTitle: Session
            order: 2
            wizard: 4
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 17
            label: 'Resumable?'
            description: 'Check box to make the session resumable'
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 59
            name: resumable
            wizardStep: 4
            stepTitle: Session
            order: 1
            wizard: 4
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 18
            label: Table
            description: 'Specify where to save session information'
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 62
            name: sessionBankTable
            wizardStep: 4
            stepTitle: Session
            order: 0
            wizard: 4
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: internal_id
                  label: 'Internal id'
                  tooltip: ''
                -
                  name: user_id
                  label: 'User id'
                  tooltip: ''
                -
                  name: test_id
                  label: 'Test id'
                  tooltip: ''
                -
                  name: startedTime
                  label: 'Started time'
                  tooltip: ''
                -
                  name: updateTime
                  label: 'Update time'
                  tooltip: ''
                -
                  name: finished
                  label: Finished
                  tooltip: ''
              placeholder: 0
    test: 7
    groups: ''
    starterContent: true
    hash: 0865791afb2642e33fc63d4344298fc3745d028d
  -
    class_name: Test
    id: 8
    name: startSession
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 1
    code: null
    description: 'Start session.'
    variables:
      -
        class_name: TestVariable
        id: 64
        name: extraFields
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 8
        parentVariable: 55
      -
        class_name: TestVariable
        id: 65
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 8
        parentVariable: 56
      -
        class_name: TestVariable
        id: 66
        name: preventParallelSessionUsage
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 8
        parentVariable: 57
      -
        class_name: TestVariable
        id: 67
        name: restoreState
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 8
        parentVariable: 58
      -
        class_name: TestVariable
        id: 68
        name: resumable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 8
        parentVariable: 59
      -
        class_name: TestVariable
        id: 69
        name: resumableExpiration
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 8
        parentVariable: 60
      -
        class_name: TestVariable
        id: 70
        name: session
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 8
        parentVariable: 61
      -
        class_name: TestVariable
        id: 71
        name: sessionBankTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '{"table":"sessions","columns":{"id":"id","internal_id":"internal_id","user_id":"user_id","test_id":"test_id","updateTime":"updateTime","finished":"finished","startedTime":"startedTime"}}'
        test: 8
        parentVariable: 62
      -
        class_name: TestVariable
        id: 72
        name: user
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 8
        parentVariable: 63
    sourceWizard: 4
    sourceWizardTest: 14
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: true
    hash: 741bb8e94f1ee952022f7803bee08538b0c1cd38
  -
    class_name: DataTable
    id: 3
    name: sessions
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: internal_id
        type: bigint
        nullable: false
        length: ''
      -
        name: test_id
        type: bigint
        nullable: false
        length: ''
      -
        name: user_id
        type: bigint
        nullable: false
        length: ''
      -
        name: startedTime
        type: datetime
        nullable: false
        length: ''
      -
        name: updateTime
        type: datetime
        nullable: false
        length: ''
      -
        name: finished
        type: boolean
        nullable: false
        length: ''
      -
        name: state
        type: text
        nullable: true
        length: ''
    groups: ''
    starterContent: true
    hash: 274532a8a65aeb9679577960376ed54026b25841
  -
    class_name: Test
    id: 9
    name: _showPage
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      getTemplateParams = function() {
        if(!is.list(templateParams)) {
          templateParams = list()
        }
      
        templateParams$logo = logo
        templateParams$title = title
        templateParams$content = content
        templateParams$buttonLabel = buttonLabel
        templateParams$footer = footer
      
        for(.name in .dynamicInputs) {
          templateParams[[.name]] = get(.name)
        }
        return(templateParams)
      }
      
      numericTimeLimit = as.numeric(timeLimit)
      if(is.null(cookies) || is.na(cookies) || cookies == "") {
        cookies = list()
      }
      response = concerto5:::concerto.template.show(
        template=template, 
        html=if(!is.null(html) && !is.na(html) && html != "") {html} else {""},
        params=getTemplateParams(), 
        timeLimit=if(!is.na(numericTimeLimit)) { numericTimeLimit } else { 0 },
        cookies=cookies
      )
      
      cookies = concerto$lastResponse$cookies
      
      for(.name in .dynamicReturns) {
        if(!is.null(response[[.name]])) {
          assign(.name, response[[.name]])
        }
      }
      if(length(.dynamicBranches) > 0) {
        .branch = response$buttonPressed
      }
      
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 73
        name: .branch
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 74
        name: bgWorkers
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 75
        name: buttonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Next
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 76
        name: content
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 77
        name: cookies
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 78
        name: cookies
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 79
        name: footer
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 80
        name: html
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 81
        name: logo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 82
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 83
        name: protectedFilesAccess
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 84
        name: response
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 85
        name: sessionFilesAccess
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 86
        name: template
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 87
        name: templateParams
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 88
        name: timeLimit
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 9
        parentVariable: null
      -
        class_name: TestVariable
        id: 89
        name: title
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 9
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: true
    hash: d277201efd6a200fa21234857f98d99ba31b0338
  -
    class_name: TestWizard
    id: 5
    name: showPage
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 5
        title: Template
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 5
        params:
          -
            class_name: TestWizardParam
            id: 19
            label: 'Button Label'
            description: 'Leave blank to disable button.'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: Next
            testVariable: 75
            name: buttonLabel
            wizardStep: 5
            stepTitle: Template
            order: 13
            wizard: 5
            definition:
              defvalue: Next
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 20
            label: Content
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: ''
            testVariable: 76
            name: content
            wizardStep: 5
            stepTitle: Template
            order: 12
            wizard: 5
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 21
            label: Footer
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            testVariable: 79
            name: footer
            wizardStep: 5
            stepTitle: Template
            order: 14
            wizard: 5
            definition:
              defvalue: |
                Created with 
                <a href="http://www.concertoplatform.com" target="_blank">
                	Concerto Platform
                </a>
                
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 22
            label: HTML
            description: 'Directly input HTML to be shown by this node.'
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: ''
            testVariable: 80
            name: html
            wizardStep: 5
            stepTitle: Template
            order: 0
            wizard: 5
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 23
            label: 'Logo URL'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 81
            name: logo
            wizardStep: 5
            stepTitle: Template
            order: 11
            wizard: 5
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 24
            label: 'Protected Files Access'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 83
            name: protectedFilesAccess
            wizardStep: 5
            stepTitle: Template
            order: 20
            wizard: 5
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 25
            label: 'Session Files Access'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 85
            name: sessionFilesAccess
            wizardStep: 5
            stepTitle: Template
            order: 30
            wizard: 5
            definition:
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 26
            label: 'Time limit'
            description: 'Specify how long the selected Page or HTML should be shown for, in seconds. 0&nbsp;= page does not expire.'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 88
            name: timeLimit
            wizardStep: 5
            stepTitle: Template
            order: 2
            wizard: 5
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 27
            label: Title
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 89
            name: title
            wizardStep: 5
            stepTitle: Template
            order: 10
            wizard: 5
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 28
            label: 'View Template'
            description: 'Select which template should be shown by this node.&nbsp;This field will be ignored if HTML has been entered above.'
            hideCondition: ''
            type: 5
            passableThroughUrl: '0'
            value: page
            testVariable: 86
            name: template
            wizardStep: 5
            stepTitle: Template
            order: 1
            wizard: 5
            definition:
              defvalue: page
              placeholder: 0
    test: 9
    groups: ''
    starterContent: true
    hash: 8d68616fb7e76f3404f31a7449e8d58087bf90c1
  -
    class_name: Test
    id: 10
    name: showPage
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 1
    code: null
    description: 'Shows page to user.'
    variables:
      -
        class_name: TestVariable
        id: 90
        name: .branch
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 10
        parentVariable: 73
      -
        class_name: TestVariable
        id: 91
        name: bgWorkers
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 10
        parentVariable: 74
      -
        class_name: TestVariable
        id: 92
        name: buttonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Next
        test: 10
        parentVariable: 75
      -
        class_name: TestVariable
        id: 93
        name: content
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 10
        parentVariable: 76
      -
        class_name: TestVariable
        id: 94
        name: cookies
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 10
        parentVariable: 77
      -
        class_name: TestVariable
        id: 95
        name: cookies
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 10
        parentVariable: 78
      -
        class_name: TestVariable
        id: 96
        name: footer
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: |
          Created with 
          <a href="http://www.concertoplatform.com" target="_blank">
          	Concerto Platform
          </a>
          
        test: 10
        parentVariable: 79
      -
        class_name: TestVariable
        id: 97
        name: html
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 10
        parentVariable: 80
      -
        class_name: TestVariable
        id: 98
        name: logo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 10
        parentVariable: 81
      -
        class_name: TestVariable
        id: 99
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 10
        parentVariable: 82
      -
        class_name: TestVariable
        id: 100
        name: protectedFilesAccess
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 10
        parentVariable: 83
      -
        class_name: TestVariable
        id: 101
        name: response
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 10
        parentVariable: 84
      -
        class_name: TestVariable
        id: 102
        name: sessionFilesAccess
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 10
        parentVariable: 85
      -
        class_name: TestVariable
        id: 103
        name: template
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 10
        parentVariable: 86
      -
        class_name: TestVariable
        id: 104
        name: templateParams
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 10
        parentVariable: 87
      -
        class_name: TestVariable
        id: 105
        name: timeLimit
        type: 0
        description: 'Time limit in seconds.'
        passableThroughUrl: '0'
        value: '0'
        test: 10
        parentVariable: 88
      -
        class_name: TestVariable
        id: 106
        name: title
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 10
        parentVariable: 89
    sourceWizard: 5
    sourceWizardTest: 13
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: true
    hash: 1aa435feeeee13bed17e0812a988a27d027e7af6
  -
    class_name: ViewTemplate
    id: 2
    name: page
    description: ''
    accessibility: 2
    archived: '0'
    head: ''
    css: |
      :root {
        --option-bg: #f3f3f3;
        --option-hover-bg: #efefef;
        --option-color: #000000;
        --option-unselected-bg: #ffffd5;
        --error-color: #f32828;
        --accent-light-color: #45b87e;
        --accent-dark-color: #35a26b;
        --font-color-for-accent-bg: #ffffff;
        --main-font-style: 'Open Sans', sans-serif;
        --main-font-color: #000000;
        --main-font-size: 16px;
        --header-bg: #4581b5;
        --header-color: #ffffff;
      }
      
      .body {
        min-height: 100vh;
        position: relative;
        font-size: var(--main-font-size);
        font-family: var(--main-font-style);
        color: var(--main-font-color);
        display: flex;
        flex-direction: column;
      }
      
      .container {
        max-width: 1000px;
        margin: auto;
        padding: 20px;
      }
      
      .main-btn {
        background-color: var(--accent-light-color);
        border: none;
        padding: 10px 20px;
        font-size: var(--main-font-size);
        color: var(--font-color-for-accent-bg);
        display: block;
        min-width: 100px;
        cursor: pointer;
        -webkit-transform: perspective(1px) translateZ(0);
        transform: perspective(1px) translateZ(0);
        -webkit-transition-duration: 0.3s;
        transition-duration: 0.3s;
        -webkit-transition-property: background-color;
        transition-property: background-color;
        outline: none;
      }
      
      .main-btn:hover {
        background-color: var(--accent-dark-color);
      }
      
      .main-btn:disabled {
        background-color: var(--option-hover-bg);
        color: #ccc;
        cursor: default;
      }
      
      .left-btn {
        margin: 0 auto 0 0;
      }
      
      .right-btn {
        margin: 0 0 0 auto;
      }
      
      .question-footer {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin-top: 20px;
      }
      
      @media screen and (max-width: 500px) {
        .main-btn {
          min-width: 0;
        }
      }
      
    js: |
      testRunner.controllerProvider.register("page", function($scope) {
        $scope.buttonLabel = testRunner.R.buttonLabel;
      });
      
    html: |
      <div class="body" ng-controller="page">
      	{{template:header}}
      	<div class="questions">
      		<div class="container">
      			{{content}}
      			<div class="question-footer">
      				<button class="main-btn right-btn" id="submitButton" name="next" ng-show="buttonLabel">
      					{{buttonLabel}}
      				</button>
      			</div>
      		</div>
      	</div>
      	{{template:footer}}
      </div>
      
    groups: ''
    starterContent: true
    hash: 821c091b8a66db4390555597d9ee1b226d08482e
  -
    class_name: Test
    id: 11
    name: createList
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      result = list()
      if(is.list(sourceList)) {
        result = sourceList
      }
      for(.name in .dynamicInputs) {
          result[.name] = list(get(.name))
      }
      
    description: 'List creation. Dynamic inputs will be used as list elements (input name as list key, input value as list value).'
    variables:
      -
        class_name: TestVariable
        id: 107
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 11
        parentVariable: null
      -
        class_name: TestVariable
        id: 108
        name: result
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 11
        parentVariable: null
      -
        class_name: TestVariable
        id: 109
        name: sourceList
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 11
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: true
    hash: 6262897fa1a55c6969eafe8843c53f383e23658b
  -
    class_name: Test
    id: 12
    name: _eval
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      sanitizedCode = concerto.test.sanitizeSource(code)
      result = eval(parse(text=sanitizedCode))
      
    description: 'Evaluate R code.'
    variables:
      -
        class_name: TestVariable
        id: 110
        name: code
        type: 0
        description: 'Code value is expected to be text.'
        passableThroughUrl: '0'
        value: null
        test: 12
        parentVariable: null
      -
        class_name: TestVariable
        id: 111
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 12
        parentVariable: null
      -
        class_name: TestVariable
        id: 112
        name: result
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 12
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: true
    hash: 79b7cb208ad587fc58328edd0500b21e110c84ee
  -
    class_name: Test
    id: 13
    name: _groupedAssessment2
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 2
    code: null
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 113
        name: askAllSubGroup
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 114
        name: backButtonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Back
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 115
        name: calculateSem
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 116
        name: calculateTheta
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 117
        name: canGoBack
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 118
        name: canSkipItems
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 119
        name: contentBalancing
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 120
        name: d
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 121
        name: exposureLimit
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0.7'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 122
        name: exposureMaxItems
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 123
        name: exposureMinSessions
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '20'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 124
        name: footer
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: 'Created with <a href="http://www.concertoplatform.com" target="_blank">Concerto Platform</a>'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 125
        name: instructions
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 126
        name: itemBankFilterModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 127
        name: itemBankFlatTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 128
        name: itemBankItems
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 129
        name: itemBankTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 130
        name: itemBankTableExtraFields
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 131
        name: itemBankType
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: direct
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 132
        name: itemNumLimit
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 133
        name: itemTemplate
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 134
        name: itemTemplateHtml
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 135
        name: itemTemplateParamsModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 136
        name: itemTimeFullRequired
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 137
        name: itemTimeLimit
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 138
        name: items
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 139
        name: itemsAdministered
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 140
        name: itemsPerPage
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 141
        name: logo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 142
        name: minAccuracy
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 143
        name: minAccuracyMinItems
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 144
        name: model
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 145
        name: nextButtonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Next
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 146
        name: nextItemCriterion
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: MFI
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 147
        name: nextItemModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 148
        name: nextItemRandomesque
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 149
        name: order
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: manual
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 150
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 151
        name: responseBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 152
        name: responseRequired
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 153
        name: responseRequiredAlert
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 154
        name: responseSavedModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 155
        name: responseScoreModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 156
        name: responseScores
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 157
        name: responses
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 158
        name: scoringMethod
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: BM
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 159
        name: sem
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 160
        name: session
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 161
        name: sessionResuming
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 162
        name: sessionTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 163
        name: showPageInfo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 164
        name: startingTheta
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 165
        name: stopCheckModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 166
        name: stopReason
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 167
        name: subGroupItemThreshold
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '100'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 168
        name: templateResponseModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 169
        name: testTimeLeft
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 170
        name: testTimeLimit
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 171
        name: testTimeLimitOffset
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 172
        name: testTimeLimitType
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: startedAgo
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 173
        name: theta
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 174
        name: title
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 175
        name: totalScore
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 176
        name: traitScores
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 177
        name: traitSem
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
      -
        class_name: TestVariable
        id: 178
        name: traitTheta
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 13
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes:
      -
        class_name: TestNode
        id: 1
        title: ''
        type: 1
        posX: 14368
        posY: 14741
        flowTest: 13
        sourceTest: 13
        sourceTestName: _groupedAssessment2
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 1
            value: direct
            node: 1
            variable: 131
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: itemBankType
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 2
            value: '[]'
            node: 1
            variable: 128
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: itemBankItems
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 3
            value: null
            node: 1
            variable: 129
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: itemBankTable
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 4
            value: '0'
            node: 1
            variable: 170
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: testTimeLimit
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 5
            value: '0'
            node: 1
            variable: 137
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: itemTimeLimit
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 6
            value: '0'
            node: 1
            variable: 136
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: itemTimeFullRequired
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 7
            value: '0'
            node: 1
            variable: 171
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: testTimeLimitOffset
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 8
            value: '[]'
            node: 1
            variable: 119
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: contentBalancing
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 9
            value: '0'
            node: 1
            variable: 164
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: startingTheta
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 10
            value: MFI
            node: 1
            variable: 146
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: nextItemCriterion
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 11
            value: '1'
            node: 1
            variable: 148
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: nextItemRandomesque
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 12
            value: BM
            node: 1
            variable: 158
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: scoringMethod
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 13
            value: null
            node: 1
            variable: 151
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: responseBank
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 14
            value: null
            node: 1
            variable: 133
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: itemTemplate
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 15
            value: null
            node: 1
            variable: 160
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: session
            pointer: '1'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 16
            value: '0'
            node: 1
            variable: 132
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: itemNumLimit
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 17
            value: '1'
            node: 1
            variable: 142
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: minAccuracy
            pointer: '0'
            pointerVariable: ''
          -
            class_name: TestNodePort
            id: 18
            value: null
            node: 1
            variable: 152
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: responseRequired
            pointer: '0'
            pointerVariable: responseRequired
          -
            class_name: TestNodePort
            id: 19
            value: null
            node: 1
            variable: 153
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: responseRequiredAlert
            pointer: '0'
            pointerVariable: responseRequiredAlert
          -
            class_name: TestNodePort
            id: 20
            value: null
            node: 1
            variable: 135
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: itemTemplateParamsModule
            pointer: '0'
            pointerVariable: itemTemplateParamsModule
          -
            class_name: TestNodePort
            id: 21
            value: null
            node: 1
            variable: 144
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: model
            pointer: '0'
            pointerVariable: model
          -
            class_name: TestNodePort
            id: 22
            value: null
            node: 1
            variable: 155
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: responseScoreModule
            pointer: '0'
            pointerVariable: responseCatValueModule
          -
            class_name: TestNodePort
            id: 23
            value: null
            node: 1
            variable: 147
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: nextItemModule
            pointer: '0'
            pointerVariable: nextItemModule
          -
            class_name: TestNodePort
            id: 24
            value: null
            node: 1
            variable: 130
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: itemBankTableExtraFields
            pointer: '0'
            pointerVariable: itemBankExtraFields
          -
            class_name: TestNodePort
            id: 25
            value: null
            node: 1
            variable: 126
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: itemBankFilterModule
            pointer: '0'
            pointerVariable: itemBankFilterModule
          -
            class_name: TestNodePort
            id: 26
            value: startedAgo
            node: 1
            variable: 172
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: testTimeLimitType
            pointer: '0'
            pointerVariable: testTimeLimitType
          -
            class_name: TestNodePort
            id: 27
            value: '0'
            node: 1
            variable: 161
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: sessionResuming
            pointer: '0'
            pointerVariable: sessionResuming
          -
            class_name: TestNodePort
            id: 28
            value: null
            node: 1
            variable: 162
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: sessionTable
            pointer: '0'
            pointerVariable: sessionTable
          -
            class_name: TestNodePort
            id: 29
            value: '0'
            node: 1
            variable: 143
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: minAccuracyMinItems
            pointer: '0'
            pointerVariable: minAccuracyMinItems
          -
            class_name: TestNodePort
            id: 30
            value: null
            node: 1
            variable: 127
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: itemBankFlatTable
            pointer: '0'
            pointerVariable: itemBankFlatTable
          -
            class_name: TestNodePort
            id: 31
            value: null
            node: 1
            variable: 134
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: itemTemplateHtml
            pointer: '0'
            pointerVariable: itemTemplateHtml
          -
            class_name: TestNodePort
            id: 32
            value: null
            node: 1
            variable: 125
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: instructions
            pointer: '0'
            pointerVariable: templateInstructions
          -
            class_name: TestNodePort
            id: 33
            value: Next
            node: 1
            variable: 145
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: nextButtonLabel
            pointer: '0'
            pointerVariable: templateNextButtonLabel
          -
            class_name: TestNodePort
            id: 34
            value: null
            node: 1
            variable: 174
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: title
            pointer: '0'
            pointerVariable: templateTitle
          -
            class_name: TestNodePort
            id: 35
            value: null
            node: 1
            variable: 141
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: logo
            pointer: '0'
            pointerVariable: templateLogo
          -
            class_name: TestNodePort
            id: 36
            value: 'Created with <a href="http://www.concertoplatform.com" target="_blank">Concerto Platform</a>'
            node: 1
            variable: 124
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: footer
            pointer: '0'
            pointerVariable: templateFooter
          -
            class_name: TestNodePort
            id: 37
            value: manual
            node: 1
            variable: 149
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: order
            pointer: '0'
            pointerVariable: order
          -
            class_name: TestNodePort
            id: 38
            value: '0'
            node: 1
            variable: 117
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: canGoBack
            pointer: '0'
            pointerVariable: canGoBack
          -
            class_name: TestNodePort
            id: 39
            value: '1'
            node: 1
            variable: 140
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: itemsPerPage
            pointer: '0'
            pointerVariable: itemsPerPage
          -
            class_name: TestNodePort
            id: 40
            value: '0'
            node: 1
            variable: 116
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: calculateTheta
            pointer: '0'
            pointerVariable: calculateTheta
          -
            class_name: TestNodePort
            id: 41
            value: '0'
            node: 1
            variable: 115
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: calculateSem
            pointer: '0'
            pointerVariable: calculateSem
          -
            class_name: TestNodePort
            id: 42
            value: Back
            node: 1
            variable: 114
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: backButtonLabel
            pointer: '0'
            pointerVariable: backButtonLabel
          -
            class_name: TestNodePort
            id: 43
            value: '1'
            node: 1
            variable: 163
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: showPageInfo
            pointer: '0'
            pointerVariable: showPageInfo
          -
            class_name: TestNodePort
            id: 44
            value: '0'
            node: 1
            variable: 122
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: exposureMaxItems
            pointer: '0'
            pointerVariable: exposureMaxItems
          -
            class_name: TestNodePort
            id: 45
            value: '0.7'
            node: 1
            variable: 121
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: exposureLimit
            pointer: '0'
            pointerVariable: exposureLimit
          -
            class_name: TestNodePort
            id: 46
            value: '20'
            node: 1
            variable: 123
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: exposureMinSessions
            pointer: '0'
            pointerVariable: exposureMinSessions
          -
            class_name: TestNodePort
            id: 47
            value: '0'
            node: 1
            variable: 118
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: canSkipItems
            pointer: '0'
            pointerVariable: canSkipItems
          -
            class_name: TestNodePort
            id: 48
            value: null
            node: 1
            variable: 165
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: stopCheckModule
            pointer: '0'
            pointerVariable: stopCheckModule
          -
            class_name: TestNodePort
            id: 49
            value: '1'
            node: 1
            variable: 120
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: d
            pointer: '0'
            pointerVariable: d
          -
            class_name: TestNodePort
            id: 50
            value: null
            node: 1
            variable: 154
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: responseSavedModule
            pointer: '0'
            pointerVariable: responseSavedModule
          -
            class_name: TestNodePort
            id: 51
            value: null
            node: 1
            variable: 168
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: templateResponseModule
            pointer: '0'
            pointerVariable: templateResponseModule
          -
            class_name: TestNodePort
            id: 52
            value: null
            node: 1
            variable: 113
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: askAllSubGroup
            pointer: '0'
            pointerVariable: askSubGroupInOrder
          -
            class_name: TestNodePort
            id: 53
            value: '100'
            node: 1
            variable: 167
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: subGroupItemThreshold
            pointer: '0'
            pointerVariable: subGroupItemThreshold
      -
        class_name: TestNode
        id: 2
        title: ''
        type: 2
        posX: 16869
        posY: 15751
        flowTest: 13
        sourceTest: 13
        sourceTestName: _groupedAssessment2
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 54
            value: '1'
            node: 2
            variable: 159
            string: '0'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sem
            pointer: '1'
            pointerVariable: sem
          -
            class_name: TestNodePort
            id: 55
            value: '0'
            node: 2
            variable: 173
            string: '0'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: theta
            pointer: '1'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 56
            value: null
            node: 2
            variable: 169
            string: '0'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: testTimeLeft
            pointer: '1'
            pointerVariable: testTimeLeft
          -
            class_name: TestNodePort
            id: 57
            value: null
            node: 2
            variable: 156
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: responseScores
            pointer: '1'
            pointerVariable: scores
          -
            class_name: TestNodePort
            id: 58
            value: 'sum(c.get("scores"))'
            node: 2
            variable: 175
            string: '0'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: totalScore
            pointer: '0'
            pointerVariable: totalScore
          -
            class_name: TestNodePort
            id: 59
            value: list()
            node: 2
            variable: 176
            string: '0'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: traitScores
            pointer: '1'
            pointerVariable: traitScores
          -
            class_name: TestNodePort
            id: 60
            value: null
            node: 2
            variable: 166
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: stopReason
            pointer: '1'
            pointerVariable: stopReason
          -
            class_name: TestNodePort
            id: 61
            value: 'NULL'
            node: 2
            variable: 139
            string: '0'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemsAdministered
            pointer: '1'
            pointerVariable: itemsAdministered
          -
            class_name: TestNodePort
            id: 62
            value: 'NULL'
            node: 2
            variable: 157
            string: '0'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: responses
            pointer: '1'
            pointerVariable: responses
          -
            class_name: TestNodePort
            id: 63
            value: null
            node: 2
            variable: 138
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: items
            pointer: '1'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 64
            value: list()
            node: 2
            variable: 178
            string: '0'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: traitTheta
            pointer: '1'
            pointerVariable: traitTheta
          -
            class_name: TestNodePort
            id: 65
            value: list()
            node: 2
            variable: 177
            string: '0'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: traitSem
            pointer: '1'
            pointerVariable: traitSem
      -
        class_name: TestNode
        id: 3
        title: 'create settings'
        type: 0
        posX: 14885
        posY: 14747
        flowTest: 13
        sourceTest: 11
        sourceTestName: createList
        sourceTestDescription: 'List creation. Dynamic inputs will be used as list elements (input name as list key, input value as list value).'
        ports:
          -
            class_name: TestNodePort
            id: 66
            value: null
            node: 3
            variable: 109
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sourceList
            pointer: '0'
            pointerVariable: sourceList
          -
            class_name: TestNodePort
            id: 67
            value: null
            node: 3
            variable: 108
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: result
            pointer: '1'
            pointerVariable: settings
          -
            class_name: TestNodePort
            id: 68
            value: '0'
            node: 3
            variable: 107
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 69
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: contentBalancing
            pointer: '0'
            pointerVariable: contentBalancing
          -
            class_name: TestNodePort
            id: 70
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemBankItems
            pointer: '0'
            pointerVariable: itemBankItems
          -
            class_name: TestNodePort
            id: 71
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemBankTable
            pointer: '0'
            pointerVariable: itemBankTable
          -
            class_name: TestNodePort
            id: 72
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemBankType
            pointer: '0'
            pointerVariable: itemBankType
          -
            class_name: TestNodePort
            id: 73
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemNumLimit
            pointer: '0'
            pointerVariable: itemNumLimit
          -
            class_name: TestNodePort
            id: 74
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemTemplate
            pointer: '0'
            pointerVariable: itemTemplate
          -
            class_name: TestNodePort
            id: 75
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemTimeFullRequired
            pointer: '0'
            pointerVariable: itemTimeFullRequired
          -
            class_name: TestNodePort
            id: 76
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemTimeLimit
            pointer: '0'
            pointerVariable: itemTimeLimit
          -
            class_name: TestNodePort
            id: 77
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: minAccuracy
            pointer: '0'
            pointerVariable: minAccuracy
          -
            class_name: TestNodePort
            id: 78
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: nextItemCriterion
            pointer: '0'
            pointerVariable: nextItemCriterion
          -
            class_name: TestNodePort
            id: 79
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: nextItemRandomesque
            pointer: '0'
            pointerVariable: nextItemRandomesque
          -
            class_name: TestNodePort
            id: 80
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responseBank
            pointer: '0'
            pointerVariable: responseBank
          -
            class_name: TestNodePort
            id: 81
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: scoringMethod
            pointer: '0'
            pointerVariable: scoringMethod
          -
            class_name: TestNodePort
            id: 82
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: startingTheta
            pointer: '0'
            pointerVariable: startingTheta
          -
            class_name: TestNodePort
            id: 83
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: testTimeLimit
            pointer: '0'
            pointerVariable: testTimeLimit
          -
            class_name: TestNodePort
            id: 84
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: testTimeLimitOffset
            pointer: '0'
            pointerVariable: testTimeLimitOffset
          -
            class_name: TestNodePort
            id: 85
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responseRequired
            pointer: '0'
            pointerVariable: responseRequired
          -
            class_name: TestNodePort
            id: 86
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responseRequiredAlert
            pointer: '0'
            pointerVariable: responseRequiredAlert
          -
            class_name: TestNodePort
            id: 87
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemTemplateParamsModule
            pointer: '0'
            pointerVariable: itemTemplateParamsModule
          -
            class_name: TestNodePort
            id: 88
            value: 'NULL'
            node: 3
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: model
            pointer: '0'
            pointerVariable: model
          -
            class_name: TestNodePort
            id: 89
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responseScoreModule
            pointer: '0'
            pointerVariable: responseCatValueModule
          -
            class_name: TestNodePort
            id: 90
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: nextItemModule
            pointer: '0'
            pointerVariable: nextItemModule
          -
            class_name: TestNodePort
            id: 91
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemBankTableExtraFields
            pointer: '0'
            pointerVariable: itemBankTableExtraFields
          -
            class_name: TestNodePort
            id: 92
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemBankFilterModule
            pointer: '0'
            pointerVariable: itemBankFilterModule
          -
            class_name: TestNodePort
            id: 93
            value: c.getDynamicInputs()
            node: 3
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: dynamicInputs
            pointer: '0'
            pointerVariable: dynamicInputs
          -
            class_name: TestNodePort
            id: 94
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: testTimeLimitType
            pointer: '0'
            pointerVariable: testTimeLimitType
          -
            class_name: TestNodePort
            id: 95
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sessionResuming
            pointer: '0'
            pointerVariable: sessionResuming
          -
            class_name: TestNodePort
            id: 96
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sessionTable
            pointer: '0'
            pointerVariable: sessionTable
          -
            class_name: TestNodePort
            id: 97
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: minAccuracyMinItems
            pointer: '0'
            pointerVariable: minAccuracyMinItems
          -
            class_name: TestNodePort
            id: 98
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemBankFlatTable
            pointer: '0'
            pointerVariable: itemBankFlatTable
          -
            class_name: TestNodePort
            id: 99
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemTemplateHtml
            pointer: '0'
            pointerVariable: itemTemplateHtml
          -
            class_name: TestNodePort
            id: 100
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: instructions
            pointer: '0'
            pointerVariable: templateInstructions
          -
            class_name: TestNodePort
            id: 101
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: logo
            pointer: '0'
            pointerVariable: templateLogo
          -
            class_name: TestNodePort
            id: 102
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: nextButtonLabel
            pointer: '0'
            pointerVariable: templateNextButtonLabel
          -
            class_name: TestNodePort
            id: 103
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: title
            pointer: '0'
            pointerVariable: templateTitle
          -
            class_name: TestNodePort
            id: 104
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: footer
            pointer: '0'
            pointerVariable: templateFooter
          -
            class_name: TestNodePort
            id: 105
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: calculateSem
            pointer: '0'
            pointerVariable: calculateSem
          -
            class_name: TestNodePort
            id: 106
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: calculateTheta
            pointer: '0'
            pointerVariable: calculateTheta
          -
            class_name: TestNodePort
            id: 107
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: canGoBack
            pointer: '0'
            pointerVariable: canGoBack
          -
            class_name: TestNodePort
            id: 108
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsPerPage
            pointer: '0'
            pointerVariable: itemsPerPage
          -
            class_name: TestNodePort
            id: 109
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: order
            pointer: '0'
            pointerVariable: order
          -
            class_name: TestNodePort
            id: 110
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: backButtonLabel
            pointer: '0'
            pointerVariable: backButtonLabel
          -
            class_name: TestNodePort
            id: 111
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: showPageInfo
            pointer: '0'
            pointerVariable: showPageInfo
          -
            class_name: TestNodePort
            id: 112
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: exposureLimit
            pointer: '0'
            pointerVariable: exposureLimit
          -
            class_name: TestNodePort
            id: 113
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: exposureMaxItems
            pointer: '0'
            pointerVariable: exposureMaxItems
          -
            class_name: TestNodePort
            id: 114
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: exposureMinSessions
            pointer: '0'
            pointerVariable: exposureMinSessions
          -
            class_name: TestNodePort
            id: 115
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: canSkipItems
            pointer: '0'
            pointerVariable: canSkipItems
          -
            class_name: TestNodePort
            id: 116
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: stopCheckModule
            pointer: '0'
            pointerVariable: stopCheckModule
          -
            class_name: TestNodePort
            id: 117
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: d
            pointer: '0'
            pointerVariable: d
          -
            class_name: TestNodePort
            id: 118
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responseSavedModule
            pointer: '0'
            pointerVariable: responseSavedModule
          -
            class_name: TestNodePort
            id: 119
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: templateResponseModule
            pointer: '0'
            pointerVariable: templateResponseModule
          -
            class_name: TestNodePort
            id: 120
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: askAllSubGroup
            pointer: '0'
            pointerVariable: askSubGroupInOrder
          -
            class_name: TestNodePort
            id: 121
            value: ''
            node: 3
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: subGroupItemThreshold
            pointer: '0'
            pointerVariable: subGroupItemThreshold
      -
        class_name: TestNode
        id: 4
        title: initialization
        type: 0
        posX: 15253
        posY: 15090
        flowTest: 13
        sourceTest: 12
        sourceTestName: _eval
        sourceTestDescription: 'Evaluate R code.'
        ports:
          -
            class_name: TestNodePort
            id: 122
            value: |
              getIndicedColumnsNum = function(tableName, firstColumnName) {
                columnPrefix = substring(firstColumnName, 1, nchar(firstColumnName) - 1)
              
                columns = concerto.table.query("SHOW COLUMNS FROM {{tableName}} LIKE '{{columnPrefix}}%'", params=list(
                  tableName=tableName,
                  columnPrefix=columnPrefix
                ))[,"Field"]
              
                i=1;
                while(paste0(columnPrefix,i) %in% columns) {
                  i=i+1
                }
                return(i-1)
              }
              
              getExtraFieldsSql = function(table, extraFields) {
                columns = concerto.table.query("SHOW COLUMNS FROM {{table}}", params=list(
                  table=table
                ))[,"Field"]
                extraFields = fromJSON(extraFields)
                if(length(extraFields) > 0) {
                  for(i in length(extraFields):1) {
                    if(!(extraFields[[i]]$name %in% columns)) {
                      extraFields[[i]] = NULL
                    }
                  }
                }
                extraFieldsNames = lapply(extraFields, function(extraField) { return(extraField$name) })
                extraFieldsSql = paste(extraFieldsNames, collapse=", ")
                if(extraFieldsSql != "") { extraFieldsSql = paste0(", ", extraFieldsSql) }
                return(extraFieldsSql)
              }
              
              getIndicedColumnsSql = function(firstColumnName, num, aliasPrefix) {
                columnNamePrefix = substring(firstColumnName, 1, nchar(firstColumnName) - 1)
                columns = c()
                for(i in 1:num) {
                  columnName = paste0(columnNamePrefix, i)
                  alias = paste0(aliasPrefix, i)
                  columns = c(columns, paste0(columnName, " AS ", alias))
                }
                return(paste(columns, collapse=", "))
              }
              
              convertFromFlat = function(items, responseColumnsNum) {
                itemsNum = dim(items)[1]
                if(itemsNum == 0) { return(items) }
              
                defaultScore = 0
                defaultPainMannequinGender = "male"
                defaultPainMannequinAreaMultiMarks = 1
                defaultGracelyScaleShow = "both"
                defaultOptionsRandomOrder = 0
              
                for(i in 1:itemsNum) {
                  item = items[i,]
              
                  options = list()
                  for(j in 1:responseColumnsNum) {
                    label = item[[paste0("responseLabel",j)]]
                    value = item[[paste0("responseValue",j)]]
              
                    if(is.na(label) || is.na(value)) { next }
                    options[[j]] = list(
                      label=label,
                      value=value
                    )
                  }
              
                  scoreMap = list()
                  for(j in 1:responseColumnsNum) {
                    score = item[[paste0("responseScore",j)]]
                    value = item[[paste0("responseValue",j)]]
                    trait = item[[paste0("responseTrait",j)]]
              
                    if(is.na(score) || is.na(value)) { next }
                    scoreMap[[j]] = list(
                      score=score,
                      value=value,
                      trait=trait
                    )
                  }
              
                  responseOptions = list(
                    type=item$type,
                    optionsRandomOrder=item$optionsRandomOrder,
                    painMannequinGender=item$painMannequinGender,
                    painMannequinAreaMultiMarks=item$painMannequinAreaMultiMarks,
                    gracelyScaleShow=item$gracelyScaleShow,
                    options=options,
                    scoreMap=scoreMap,
                    defaultScore=defaultScore
                  )
              
                  if(is.null(responseOptions$painMannequinGender) || is.na(responseOptions$painMannequinGender)) { 
                    responseOptions$painMannequinGender = defaultPainMannequinGender
                  }
                  if(is.null(responseOptions$painMannequinAreaMultiMarks) || is.na(responseOptions$painMannequinAreaMultiMarks)) { 
                    responseOptions$painMannequinAreaMultiMarks = defaultPainMannequinAreaMultiMarks
                  }
                  if(is.null(responseOptions$gracelyScaleShow) || is.na(responseOptions$gracelyScaleShow)) { 
                    responseOptions$gracelyScaleShow = defaultGracelyScaleShow
                  }
                  if(is.null(responseOptions$optionsRandomOrder) || is.na(responseOptions$optionsRandomOrder)) { 
                    responseOptions$optionsRandomOrder = defaultOptionsRandomOrder
                  }
              
                  items[i, "responseOptions"] = toJSON(responseOptions)
                }
              
                return(items)
              }
              
              getItems = function(itemBankType, itemBankItems, itemBankTable, itemBankFlatTable, extraFields, paramsNum){
                items = NULL
              
                if(itemBankType == "table") {
                  tableMap = fromJSON(itemBankTable)
              
                  table = tableMap$table
                  questionColumn = tableMap$columns$question
                  responseOptionsColumn = tableMap$columns$responseOptions
                  p1Column = tableMap$columns$p1
                  traitColumn = tableMap$columns$trait
                  fixedIndexColumn = tableMap$columns$fixedIndex
              
                  instructionsColumn = tableMap$columns$instructions
                  if(is.null(instructionsColumn) || is.na(instructionsColumn) || instructionsColumn == "") {
                    instructionsColumn = "NULL"
                  }
              
                  skippableColumn = tableMap$columns$skippable
                  if(is.null(skippableColumn) || is.na(skippableColumn) || skippableColumn == "") {
                    skippableColumn = "NULL"
                  }
              
                  extraFieldsSql = getExtraFieldsSql(table, extraFields)
                  parametersSql = getIndicedColumnsSql(p1Column, paramsNum, "p")
              
                  items = concerto.table.query(
                    "
              SELECT 
              id, 
              {{questionColumn}} AS question, 
              {{responseOptionsColumn}} AS responseOptions,
              {{parametersSql}},
              {{traitColumn}} AS trait,
              {{fixedIndexColumn}} AS fixedIndex,
              {{instructionsColumn}} AS instructions,
              {{skippableColumn}} AS skippable
              {{extraFieldsSql}}
              FROM {{table}}
              ", 
                    list(
                      questionColumn=questionColumn,
                      responseOptionsColumn=responseOptionsColumn,
                      parametersSql=parametersSql,
                      traitColumn=traitColumn,
                      fixedIndexColumn=fixedIndexColumn,
                      skippableColumn=skippableColumn,
                      instructionsColumn=instructionsColumn,
                      extraFieldsSql=extraFieldsSql,
                      table=table
                    ))
                }
              
                if(itemBankType == "flatTable") {
                  tableMap = fromJSON(itemBankFlatTable)
              
                  table = tableMap$table
                  questionColumn = tableMap$columns$question
                  p1Column = tableMap$columns$p1
                  traitColumn = tableMap$columns$trait
                  fixedIndexColumn = tableMap$columns$fixedIndex
              
                  instructionsColumn = tableMap$columns$instructions
                  if(is.null(instructionsColumn) || is.na(instructionsColumn) || instructionsColumn == "") {
                    instructionsColumn = "NULL"
                  }
              
                  skippableColumn = tableMap$columns$skippable
                  if(is.null(skippableColumn) || is.na(skippableColumn) || skippableColumn == "") {
                    skippableColumn = "NULL"
                  }
              
                  responseLabel1Column = tableMap$columns$responseLabel1
                  responseValue1Column = tableMap$columns$responseValue1
                  responseScore1Column = tableMap$columns$responseScore1
                  typeColumn = tableMap$columns$type
              
                  gracelyScaleShowColumn = tableMap$columns$gracelyScaleShow
                  if(is.null(gracelyScaleShowColumn) || is.na(gracelyScaleShowColumn) || gracelyScaleShowColumn == "") {
                    gracelyScaleShowColumn = "NULL"
                  }
              
                  painMannequinGenderColumn = tableMap$columns$painMannequinGender
                  if(is.null(painMannequinGenderColumn) || is.na(painMannequinGenderColumn) || painMannequinGenderColumn == "") {
                    painMannequinGenderColumn = "NULL"
                  }
              
                  painMannequinAreaMultiMarksColumn = tableMap$columns$painMannequinAreaMultiMarks
                  if(is.null(painMannequinAreaMultiMarksColumn) || is.na(painMannequinAreaMultiMarksColumn) || painMannequinAreaMultiMarksColumn == "") {
                    painMannequinAreaMultiMarksColumn = "NULL"
                  }
              
                  optionsRandomOrderColumn = tableMap$columns$optionsRandomOrder
                  if(is.null(optionsRandomOrderColumn) || is.na(optionsRandomOrderColumn) || optionsRandomOrderColumn == "") {
                    optionsRandomOrderColumn = "NULL"
                  }
              
                  extraFieldsSql = getExtraFieldsSql(table, extraFields)
                  parametersSql = getIndicedColumnsSql(p1Column, paramsNum, "p")
                  responseColumnsNum = getIndicedColumnsNum(table, responseValue1Column)
                  responseLabelSql = getIndicedColumnsSql(responseLabel1Column, responseColumnsNum, "responseLabel")
                  responseValueSql = getIndicedColumnsSql(responseValue1Column, responseColumnsNum, "responseValue")
                  responseScoreSql = getIndicedColumnsSql(responseScore1Column, responseColumnsNum, "responseScore")
              
                  items = concerto.table.query(
                    "
              SELECT 
              id, 
              {{questionColumn}} AS question,
              {{parametersSql}},
              {{traitColumn}} AS trait,
              {{fixedIndexColumn}} AS fixedIndex,
              {{instructionsColumn}} AS instructions,
              {{skippableColumn}} AS skippable,
              {{responseLabelSql}},
              {{responseValueSql}},
              {{responseScoreSql}},
              {{gracelyScaleShowColumn}} AS gracelyScaleShow,
              {{painMannequinGenderColumn}} AS painMannequinGender,
              {{painMannequinAreaMultiMarksColumn}} AS painMannequinAreaMultiMarks,
              {{optionsRandomOrderColumn}} AS optionsRandomOrder,
              {{typeColumn}} AS type
              {{extraFieldsSql}}
              FROM {{table}}
              ", 
                    list(
                      questionColumn=questionColumn,
                      parametersSql=parametersSql,
                      traitColumn=traitColumn,
                      fixedIndexColumn=fixedIndexColumn,
                      skippableColumn=skippableColumn,
                      instructionsColumn=instructionsColumn,
                      extraFieldsSql=extraFieldsSql,
                      responseLabelSql=responseLabelSql,
                      responseValueSql=responseValueSql,
                      responseScoreSql=responseScoreSql,
                      typeColumn=typeColumn,
                      gracelyScaleShowColumn=gracelyScaleShowColumn,
                      painMannequinGenderColumn=painMannequinGenderColumn,
                      painMannequinAreaMultiMarksColumn=painMannequinAreaMultiMarksColumn,
                      optionsRandomOrderColumn=optionsRandomOrderColumn,
                      table=table
                    ))
                  items = convertFromFlat(items, responseColumnsNum)
                }
              
                if(itemBankType == "direct") {
                  itemBankItems = fromJSON(itemBankItems)
                  if(length(itemBankItems) > 0) {
                    for(i in 1:length(itemBankItems)) {
                      itemBankItems[[i]]$responseOptions = as.character(toJSON(itemBankItems[[i]]$responseOptions)) #response options don't fit into flat table, so turn them back to JSON.
                      itemBankItems[[i]][sapply(itemBankItems[[i]], is.null)] <- NA
                      items = rbind(items, data.frame(itemBankItems[[i]], stringsAsFactors=F))
                    }
                  }
                }
              
                if(!is.na(settings$itemBankFilterModule) && settings$itemBankFilterModule != "") {
                  items = concerto.test.run(settings$itemBankFilterModule, params=list(
                    settings = settings,
                    session=session,
                    items=items
                  ))$items
                }
              
                if(dim(items)[1] == 0) { stop("Item bank must not be empty!") }
              
                if(settings$order == "manual") {
                  items = items[order(items$fixedIndex),]
                }
                if(settings$order == "random") {
                  items = items[sample(1:dim(items)[1]),]
                }
                concerto.log('new items order')
                concerto.log(items)
                if("skippable" %in% colnames(items)) {
                  items[is.null(items$skippable) | is.na(items$skippable), "skippable"] = settings$canSkipItems
                } else {
                  items$skippable = settings$canSkipItems
                }
                if("instructions" %in% colnames(items)) {
                  items[is.null(items$instructions) | is.na(items$instructions) | items$instructions == "", "instructions"] = settings$instructions
                } else {
                  items$instructions = settings$instructions
                }
              
                return(items)
              }
              
              getParamsNum = function(itemBankType, itemBankTable, itemBankFlatTable) {
                paramsNum = 9
              
                if(itemBankType == "table") {
                  tableMap = fromJSON(itemBankTable)
                  paramsNum = getIndicedColumnsNum(tableMap$table, tableMap$columns$p1)
                }
              
                if(itemBankType == "flatTable") {
                  tableMap = fromJSON(itemBankFlatTable)
                  paramsNum = getIndicedColumnsNum(tableMap$table, tableMap$columns$p1)
                }
              
                return(paramsNum)
              }
              
              theta = as.numeric(settings$startingTheta)
              itemsAdministered = NULL
              groupsAsked <- list()
              testTimeStarted = as.numeric(Sys.time())
              totalTimeTaken = 0
              resumedItemsIds = NULL
              direction = 1
              page = 0
              scores = NULL
              responses = NULL
              
              state = list(
                testTimeStarted = testTimeStarted,
                nextItemsIds = NULL,
                page = 0
              )
              
              paramsNum = getParamsNum(settings$itemBankType, settings$itemBankTable, settings$itemBankFlatTable)
              items = getItems(settings$itemBankType, settings$itemBankItems, settings$itemBankTable, settings$itemBankFlatTable, settings$itemBankTableExtraFields, paramsNum)
              itemsNum = dim(items)[1]
              
              if(settings$sessionResuming == 1) {
                #get response data
                sessionTable = fromJSON(settings$sessionTable)
                resumedState = session[[sessionTable$columns$state]]
                if(!is.na(resumedState)) {
                  state = fromJSON(resumedState)
              
                  direction = 0
                  page = state$page
              
                  sessionTestTimeStarted = as.numeric(state$testTimeStarted)
                  if(sessionTestTimeStarted != 0) {
                    testTimeStarted = sessionTestTimeStarted
                  }
              
                  responseTable = fromJSON(settings$responseBank)
                  responsesRecords = concerto.table.query("
              SELECT id, 
              {{scoreCol}} AS score, 
              {{timeTakenCol}} AS timeTaken,
              {{itemIdCol}} AS item_id,
              {{responseCol}} AS response,
              {{skippedCol}} AS skipped
              FROM {{table}} 
              WHERE {{sessionIdCol}}={{sessionId}}", params=list(
                scoreCol = responseTable$columns$score,
                timeTakenCol = responseTable$columns$timeTaken,
                itemIdCol = responseTable$columns$item_id,
                responseCol = responseTable$columns$response,
                skippedCol = responseTable$columns$skipped,
                table = responseTable$table,
                sessionIdCol = responseTable$columns$session_id,
                sessionId = session$id
              ))
              
                  itemsAnswered = items[items[,"id"] %in% responsesRecords[,"item_id"],]
                  if(dim(itemsAnswered)[1] > 0) {
                    itemsLeft = items[-as.numeric(rownames(itemsAnswered)),]
                    items = rbind(itemsAnswered, itemsLeft)
                  }
              
                  resumedItemsIds = state$nextItemsIds
                  if(length(resumedItemsIds) == 0) { 
                    resumedItemsIds = NULL
                  }
              
                  totalTimeTaken = sum(responsesRecords[,"timeTaken"])
                  itemsAdministered = which(items[,"id"] %in% responsesRecords[,"item_id"])
                  if(length(itemsAdministered) == 0) {
                    itemsAdministered = NULL
                  }
                  scores = responsesRecords[,"score"]
                  responses = responsesRecords[,"response"]
                }
              }
              
              paramBank = items[, paste0("p", 1:paramsNum), drop=F]
              paramBank = apply(paramBank, 2, as.numeric)
              if(is.vector(paramBank)) { 
                paramBank = rbind(paramBank)
              }
              
            node: 4
            variable: 110
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 123
            value: null
            node: 4
            variable: 112
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 124
            value: '0'
            node: 4
            variable: 111
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 125
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: settings
            pointer: '1'
            pointerVariable: settings
          -
            class_name: TestNodePort
            id: 126
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: items
            pointer: '1'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 127
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: itemsAdministered
            pointer: '1'
            pointerVariable: itemsAdministered
          -
            class_name: TestNodePort
            id: 128
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: paramBank
            pointer: '1'
            pointerVariable: paramBank
          -
            class_name: TestNodePort
            id: 129
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: testTimeStarted
            pointer: '1'
            pointerVariable: testTimeStarted
          -
            class_name: TestNodePort
            id: 130
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: theta
            pointer: '1'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 131
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: session
            pointer: '1'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 132
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: scores
            pointer: '1'
            pointerVariable: scores
          -
            class_name: TestNodePort
            id: 133
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: totalTimeTaken
            pointer: '1'
            pointerVariable: totalTimeTaken
          -
            class_name: TestNodePort
            id: 134
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: resumedItemsIds
            pointer: '1'
            pointerVariable: resumedItemsIds
          -
            class_name: TestNodePort
            id: 135
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: state
            pointer: '1'
            pointerVariable: state
          -
            class_name: TestNodePort
            id: 136
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: page
            pointer: '1'
            pointerVariable: page
          -
            class_name: TestNodePort
            id: 137
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: direction
            pointer: '1'
            pointerVariable: direction
          -
            class_name: TestNodePort
            id: 138
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: responses
            pointer: '1'
            pointerVariable: responses
          -
            class_name: TestNodePort
            id: 139
            value: ''
            node: 4
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: groupsAsked
            pointer: '1'
            pointerVariable: groupsAsked
      -
        class_name: TestNode
        id: 5
        title: 'next item selector'
        type: 0
        posX: 15826
        posY: 15092
        flowTest: 13
        sourceTest: 12
        sourceTestName: _eval
        sourceTestDescription: 'Evaluate R code.'
        ports:
          -
            class_name: TestNodePort
            id: 140
            value: |
              library(catR)
              
              getSessionId = function(session) {
                id = 0
                if(!is.null(session) && is.list(session)) {
                  id = session$id
                } else {
                  id = paste0("i",concerto$session$id)
                }
                return(id)
              }
              
              getSafeItems = function(items, extraFields) {
                safeItems = NULL
                extraFields = fromJSON(extraFields)
                for(i in 1:dim(items)[1]) {
                  item = as.list(items[i,])
              
                  concerto.log(item, "ITEM")
              
                  scoreColName = "responseScore1"
                  scoreColIndex = 1
                  while(scoreColName %in% ls(item)) {
                    item[[scoreColName]] = NULL
                    scoreColIndex = scoreColIndex + 1
                    scoreColName = paste0("responseScore", scoreColIndex)
                  }
              
                  if(!is.null(item$responseOptions) && item$responseOptions != "") {
                    if(is.character(item$responseOptions)) {
                      item$responseOptions = tryCatch({
                        fromJSON(item$responseOptions)
                      }, error = function(message) {
                        concerto.log(message)
                        stop(paste0("item #", item$id, " contains invalid JSON in responseOptions field"))
                      })
                    }
                    responseOptionsRandomOrder = 0
                    if(!is.null(item$responseOptions$optionsRandomOrder)) {
                      responseOptionsRandomOrder = item$responseOptions$optionsRandomOrder == 1
                    }
                    orderedOptions = c()
              
                    if(length(item$responseOptions$options) > 0) {
                      if(responseOptionsRandomOrder) {
                        orderedOptions = item$responseOptions$options[sample(1:length(item$responseOptions$options))]
                      } else {
                        orderedOptions = item$responseOptions$options
                      }
                    }
                    item$responseOptions$options = orderedOptions
                    item$responseOptions$defaultScore = NULL
                    item$responseOptions$scoreMap = NULL
                    item$responseOptions = toJSON(item$responseOptions)
                  }
              
                  for(extraField in extraFields) {
                    if(extraField$sensitive == 1) {
                      item[[extraField$name]] = NULL
                    }
                  }
              
                  safeItems = rbind(safeItems, item)
                }
              
                return(safeItems)
              }
              
              getSafePastResponses = function(nextItems, nextItemsIndices) {
                responseBank = fromJSON(settings$responseBank)
                if(is.null(responseBank$table) || responseBank$table == "") {
                  concerto.log("no response bank defined")
              
                  pastResponses = NULL
                  for(nextItemIndex in nextItemsIndices) {
                    responseIndex = which(nextItemIndex == itemsAdministered)
                    if(length(responseIndex) > 0) {
                      pastResponses = rbind(pastResponses, data.frame(
                        item_id = items[nextItemIndex, "id"],
                        response = responses[responseIndex],
                        skipped = 0
                      ))
                    }
                  }
                  return(pastResponses)
                }
              
                sql = "
              SELECT 
              {{itemIdColumn}} AS item_id,
              {{responseColumn}} AS response,
              {{skippedColumn}} AS skipped
              FROM {{table}}
              WHERE 
              {{sessionIdColumn}}='{{sessionId}}' AND
              {{itemIdColumn}} IN ({{itemIds}})
              "
                pastResponses = concerto.table.query(sql, list(
                  table=responseBank$table,
                  responseColumn=responseBank$columns$response,
                  skippedColumn=responseBank$columns$skipped,
                  sessionIdColumn=responseBank$columns$session_id,
                  sessionId=getSessionId(session),
                  itemIdColumn=responseBank$columns$item_id,
                  itemIds=paste(nextItems[,"id"], collapse=",")
                ))
                if(dim(pastResponses)[1] > 0) {
                  return(pastResponses)
                }
                return(NULL)
              }
              
              checkSubGroupAll = function(nextItemsIndices, extraFields){
                foundItem = 0
                nextItemsIndicesTemp = nextItemsIndices
                if(!is.null(extraFields) && extraFields != ''){
              
                  nextItem = items[nextItemsIndices,]
              
                  nextItemGrouped = 1
                  if(is.na(nextItem$SubGroupId) || nextItem$SubGroupId == '' || is.na(nextItem$SubGroupSortOrder) || nextItem$SubGroupSortOrder == ''){
                    nextItemGrouped = 0
                  }
              
                  nextItemToFind = 1
                  lastQuestionGrouped = 1
                  #If there have been questions asked already, determine if we're going next in group or first question
                  if(!is.null(itemsAdministered)){
                    itemLocation = itemsAdministered[length(itemsAdministered)]
              
                    #tempItem contains the last asked question
                    tempItem = items[itemLocation,]
                    #if last question asked doesn't have a group, then nextItemToFind stays as 1. If it does, it increments by 1
                    if(!is.na(tempItem$SubGroupId) && tempItem$SubGroupId != '' && !is.na(tempItem$SubGroupSortOrder) && tempItem$SubGroupSortOrder != ''){
                      nextItemToFind = tempItem$SubGroupSortOrder + 1
                    }else{
                      lastQuestionGrouped = 0
                    }
                  }
              
                  if(lastQuestionGrouped == 1 && !is.null(itemsAdministered)){
                    for(i in 1:dim(items)[1]) {
                      item = as.list(items[i,])
                      #check if current item has a subgroup and sort order
                      if(!is.na(item$SubGroupId) && item$SubGroupId != '' && !is.na(item$SubGroupSortOrder) && item$SubGroupSortOrder != ''){
                        if(item$SubGroupId == tempItem$SubGroupId && item$SubGroupSortOrder == nextItemToFind){
                          concerto.log('FOUND NEXT ITEM in lastQuestionGrouped')
                          if(!(i %in% itemsAdministered)){
                            nextItemsIndicesTemp = i
                            foundItem = 1
                          }else{
                            concerto.log('item is in itemsAdministered')
                          }
                        }
                      }
                    }
                  }
                  #If couldn't find next item in last question group, set nextItemToFind to 1
                  if(foundItem == 0){
                    nextItemToFind = 1
                  }
                  if(nextItemGrouped == 1 && foundItem == 0){
                    for(i in 1:dim(items)[1]) {
                      item = as.list(items[i,])
                      #check if current item has a subgroup and sort order
                      if(!is.na(item$SubGroupId) && item$SubGroupId != '' && !is.na(item$SubGroupSortOrder) && item$SubGroupSortOrder != ''){
                        if(item$SubGroupId == nextItem$SubGroupId && item$SubGroupSortOrder == nextItemToFind){
                          if(!(i %in% itemsAdministered)){
                            nextItemsIndicesTemp = i
                            foundItem = 1
                          }else{
                            concerto.log('item is in itemsAdministered')
                          }
                        }
                      }
                    }
                  }
                }
                nextItemsCheck = items[nextItemsIndicesTemp,]
                nextItemsIndices = nextItemsIndicesTemp
              
                my_return <- list("nextItems" = nextItemsCheck, "nextItemsIndices" = nextItemsIndices)
                return(my_return)
              
              }
              checkSubGroupThreshold = function(nextItemsIndices, extraFields){
                foundItemInFunction = 0
                foundItem = 0
                nextItemsIndicesTemp = nextItemsIndices
                usingNextItem = 0
                if(!is.null(extraFields) && extraFields != ''){
              
                  nextItem = items[nextItemsIndices,]
              	
                  #Don't think this is used
                  nextItemGrouped = 1
                  if(is.na(nextItem$SubGroupId) || nextItem$SubGroupId == '' || is.na(nextItem$SubGroupSortOrder) || nextItem$SubGroupSortOrder == ''){
                    nextItemGrouped = 0
                  }
              
                  #nextItemToFind = 1
                  lastDifficulty = 0
                  lastQuestionGrouped = 1
                  #If there have been questions asked already, determine if we're going next in group or first question
                  
                  if(is.null(itemsAdministered) && nextItemGrouped == 1){
                    for(i in 1:dim(items)[1]) {
                      itemList = as.list(items[i,])
                      #check if current item has a subgroup and sort order
                      if(is.na(itemList$SubGroupId) || itemList$SubGroupId == ''){
                        nextItemsIndicesTemp = i
                        nextItemsCheck = items[nextItemsIndicesTemp,]    
                      }
                    }
                  }
                  if(!is.null(itemsAdministered)){
                    
                    index = length(itemsAdministered)
                    #need to account going to from one group to next group
                    foundLastUnGroupedQuestion = 0
                    lastQuestionSubGroupId = NULL
                    lastUnGroupedQuestionDifficulty = NULL
                    tempItem = NULL
                    #asking Grouped 4 too early, need to check with Grouped 4 is grabbed twice
                    while(foundLastUnGroupedQuestion == 0 && index > 0){
                      currLocation = itemsAdministered[index]
                    	tempItem = items[currLocation,]
                      if(is.na(tempItem$SubGroupId) || tempItem$SubGroupId == ''){
                      	foundLastUnGroupedQuestion = 1
                          lastQuestionSubGroupId = tempItem$SubGroupId
                          lastUnGroupedQuestionDifficulty = tempItem$p2
                      }
                      index = index - 1
                    }
              
                    if(foundLastUnGroupedQuestion == 0){
                      itemLocation = itemsAdministered[length(itemsAdministered)]
              
                    	#tempItem contains the last asked question
                    	tempItem = items[itemLocation,]
                    }
              
                    #if last question asked was grouped, use that for temp item if not in completed groups
                    #if is in completed groups, use nextItem
                    #if next item is not in a subgroup, get out of this and return initial data
                    itemLocation = itemsAdministered[length(itemsAdministered)]
              	  newTempItemUngrouped = 0
                    lastQuestionAsked = items[itemLocation,]
              
                    if(!is.na(lastQuestionAsked$SubGroupId) && lastQuestionAsked$SubGroupId != ''){
                      if(lastQuestionAsked$SubGroupId %in% groupsAsked){
                        tempItem = items[nextItemsIndices,]
                        if(is.na(tempItem$SubGroupId) || tempItem$SubGroupId == ''){
                          nextItemsCheck = items[nextItemsIndices,]
                          my_return <- list("nextItems" = nextItemsCheck, "nextItemsIndices" = nextItemsIndices, "groupsAskedReturn" = groupsAsked)
                          return(my_return)
                        }else{
                          for(i in 1:dim(items)[1]) {
                            item = as.list(items[i,])
                            if(((is.na(item$SubGroupId)) || !(item$SubGroupId %in% groupsAsked)) && !(i %in% itemsAdministered)){
                              usingNextItem = 1
                              tempItem = item
               
                               foundItemInFunction = 1
                              nextItemsIndicesTemp = i
                              if(is.na(item$SubGroupId)){
                                nextItemGrouped = 0
                                newTempItemUngrouped = 1
                              }else{
                                nextItemGrouped = 1
                              }
                              break
              
                            }
                          }
                        }
                      }else{
              
                        tempItem = items[itemLocation,]
                      }
                    }else{
              
                      lastQuestionGrouped = 0
                      
                      tempItem = nextItem
                      usingNextItem = 1
                      if(!is.na(nextItem$SubGroupId)){
                        nextItemGrouped = 1
                      }else{
                        nextItemGrouped = 0
                      }
                    }
                    
                    #create list of questions in subgroup that are closest to difficulty of last asked question
                    #remove last items that are out of threshold
                    #resort list in order
                    questionsSubGroup <- list()
                    #need to add if to make sure subgroup isn't completed
                  
                    if((lastQuestionGrouped == 1 || nextItemGrouped == 1) && !is.null(itemsAdministered)){
                      if(lastQuestionGrouped == 0 && nextItemGrouped == 1){
                   		tempItem = items[nextItemsIndices,]
                          
                        	if(!is.na(tempItem$SubGroupId) && tempItem$SubGroupId %in% groupsAsked){
                          	for(i in 1:dim(items)[1]) {
                        			itemList = as.list(items[i,])
                                	 if(!is.na(itemList$SubGroupId) && itemList$SubGroupId != '' && !is.na(itemList$SubGroupSortOrder) && itemList$SubGroupSortOrder != ''){
                                   	if(!(itemList$SubGroupId %in% groupsAsked)){
                                      	tempItem = items[i,]
                                          foundItemInFunction = 1
                                        	break
                                      }
                                   }else if(!(i %in% itemsAdministered)){
                                   	tempItem = items[i,]
                                      nextItemsIndicesTemp = i
                                      newTempItemUngrouped = 1
                                      foundItemInFunction = 1
                                     	break
                                   }
                              }
                        	}
                      }
                    if(newTempItemUngrouped == 0){  
                      for(i in 1:dim(items)[1]) {
                        itemList = as.list(items[i,])
                        #check if current item has a subgroup and sort order
                        if(!is.na(itemList$SubGroupId) && itemList$SubGroupId != '' && !is.na(itemList$SubGroupSortOrder) && itemList$SubGroupSortOrder != ''){
                          if(itemList$SubGroupId == tempItem$SubGroupId){
                            item = items[i,]
                            questionsSubGroup <- append(questionsSubGroup, list(item))
                          }
                        }
                      }
              
                      questionsSortedDifficulty <- questionsSubGroup[order(sapply(questionsSubGroup, function(x) x$p2))]
              
                        
                      differenceInDiff = NULL
                      itemId = NULL
                      spotInList = NULL
                      for(i in 1:length(questionsSortedDifficulty)) {
                      	currentItem = questionsSortedDifficulty[[i]]
                          if(is.null(differenceInDiff)){
                          	differenceInDiff = abs(currentItem$p2 - lastUnGroupedQuestionDifficulty)
                            	itemId = currentItem$id
                              spotInList = i
                          }else if(abs(currentItem$p2 - lastUnGroupedQuestionDifficulty) < differenceInDiff){
                            	differenceInDiff = abs(currentItem$p2 - lastUnGroupedQuestionDifficulty)
                              itemId = currentItem$id
                              spotInList = i
                          }
                            
                      }
              
                      removeBeginingElements = 1
                      if(spotInList > (length(questionsSortedDifficulty) / 2)){
                      	removeBeginingElements = 0
                      }
                      
                      if(strtoi(settings$subGroupItemThreshold) > length(questionsSortedDifficulty)){
                          numberOfQuestionsToAsk =  length(questionsSortedDifficulty)
                      }else{
                          numberOfQuestionsToAsk = strtoi(settings$subGroupItemThreshold)
                      }
              
                      questionsSortedRemoved <- list()
                      startPoint = NULL
                      endPoint = NULL
                        
                      if(removeBeginingElements == 1){
                        startPoint = (length(questionsSortedDifficulty) - numberOfQuestionsToAsk) + 1
                        endPoint = length(questionsSortedDifficulty)
                      }else{
                        startPoint = 1
                        endPoint = numberOfQuestionsToAsk
                      }
              
              
                      for(i in startPoint:endPoint){
                        currentItem = questionsSortedDifficulty[[i]]
                        questionsSortedRemoved <- append(questionsSortedRemoved, list(currentItem))
                      }
              
                      questionsSortedSubGroupOrder <- questionsSortedRemoved[order(sapply(questionsSortedRemoved, function(x) x$SubGroupSortOrder))]
              
              		
                       itemsAdministeredId <- list()
                        
                      for(i in 1:dim(items)[1]) {
                      	item = as.list(items[i,])
                          if(i %in% itemsAdministered){
                            itemsAdministeredId <- append(itemsAdministeredId, item$id)
                          }
                       }
              
                    	#tempItem contains the last asked question
                      itemIds <- list()
              
                      nextItemId = NULL
              
                      for(i in 1:length(questionsSortedSubGroupOrder)){
                        currentItem = questionsSortedSubGroupOrder[[i]]
              
                        #itemIds <- append(itemIds, currentItem$id)
                        if(!(currentItem$id %in% itemsAdministeredId)){
                        	nextItemId = currentItem$id
                          
                          if(i+1 > length(questionsSortedSubGroupOrder)){
                            groupsAsked <- append(groupsAsked, currentItem$SubGroupId)
                          }
                          
                          #break out of loop
                          break
                        }
                      }
              
                       if(!is.null(nextItemId)){
                         
                         for(i in 1:dim(items)[1]) {
                           item = as.list(items[i,])
                           if(item$id == nextItemId){
                             nextItemsIndicesTemp = i
                             foundItemInFunction = 1
                           }
                         }
                       }else{
                         #append
                         if(!is.null(lastQuestionSubGroupId)){
                           groupsAsked <- append(groupsAsked, lastQuestionSubGroupId)
                         }
                         
                       }
                    }
                  }
                }
               }
                if(usingNextItem == 0){
                  if(lastQuestionGrouped == 0 && nextItemGrouped == 0){
                    for(i in 1:dim(items)[1]) {
                      item = as.list(items[i,])
                      #check if current item has a subgroup and sort order
                      if(!(i %in% itemsAdministered)){
                        if(!is.na(item$SubGroupId) && item$SubGroupId != '' && !is.na(item$SubGroupSortOrder) && item$SubGroupSortOrder != ''){
                          if(!(item$SubGroupId %in% groupsAsked)){
                            nextItemsIndicesTemp = i
                          }else{
                            concerto.log('item is in itemsAdministered')
                          }
                        }else{
                          nextItemsIndicesTemp = i
                        }
                      }
                    }
                	}
                }else{
                  if(foundItemInFunction == 0){
                  	nextItemsIndicesTemp = nextItemsIndices
                 	}
                }
                nextItemsCheck = items[nextItemsIndicesTemp,]
                nextItemsIndices = nextItemsIndicesTemp
                                                                               
                my_return <- list("nextItems" = nextItemsCheck, "nextItemsIndices" = nextItemsIndices, "groupsAskedReturn" = groupsAsked)
                return(my_return)
                                                                               
              }
              itemsNum = dim(items)[1]
              
              nextItemsIndices = which(items$id %in% resumedItemsIds)
              
              itemsPerPage = as.numeric(settings$itemsPerPage)
              nextPage = as.numeric(prevPage) + as.numeric(direction)
              
              if(length(nextItemsIndices) == 0) {
                itemsExcluded = NULL
              
                cbGroup = NULL
                cbControl = NULL
              
                if(settings$order == "cat") {
                  itemsExcluded = unique(c(itemsExcluded, which(items$fixedIndex > 0)))
              
                  #content balancing
                  cbProps = fromJSON(settings$contentBalancing)
                  concerto.log(cbProps, "cbProps")
                  if(length(cbProps) > 0) {
                    cbGroup = as.character(items[,"trait"])
                    cbControl = list(
                      names=NULL,
                      props=NULL
                    )
                    for(i in 1:length(cbProps)) {
                      cbControl$names = c(cbControl$names, cbProps[[i]]$name)
                      cbControl$props = c(cbControl$props, as.numeric(cbProps[[i]]$proportion))
                    }
                    concerto.log(cbControl, "cbControl")
                  }
              
                  for(onPageIndex in 1:itemsPerPage) {
                    #fixed indices
                    inTestIndex = length(itemsAdministered) + onPageIndex
                    fixedItemIndex = which(items$fixedIndex == inTestIndex)[1]
                    if(!is.na(fixedItemIndex)) {
                      nextItemsIndices = c(nextItemsIndices, fixedItemIndex)
                      next
                    }
              
                    isAnyItemLeft = itemsNum > length(itemsAdministered)
                    if(isAnyItemLeft) {
                      nAvailable = NULL
                      for(i in 1:dim(items)[1]) {
                        item = items[i,]
                        available = if(!is.null(item$fixedIndex) && !is.na(item$fixedIndex) && item$fixedIndex > 0) { 
                          0 
                        } else { 
                          1 
                        }
                        nAvailable = c(nAvailable, available)
                      }
                      randomesque = as.numeric(settings$nextItemRandomesque)
                      d = as.numeric(settings$d)
              
                      result = tryCatch({
                        nextItem(paramBank, model=settings$model, theta=theta, out=itemsAdministered, x=scores, nAvailable=nAvailable, criterion=settings$nextItemCriterion, method=settings$scoringMethod, randomesque=randomesque, D=d, cbGroup=cbGroup, cbControl=cbControl)
                      }, error=function(ex) {
                        concerto.log(ex, "potentialy not possible to satisfy CB rule")
                        if(!is.null(cbGroup) && !is.null(cbControl)) {
                          return(nextItem(paramBank, model=settings$model, theta=theta, out=itemsAdministered, x=scores, nAvailable=nAvailable, criterion=settings$nextItemCriterion, method=settings$scoringMethod, randomesque=randomesque, D=d, cbGroup=NULL, cbControl=NULL))
                        } else {
                          stop(ex)
                        }
                      })
                      nextItemsIndices = c(nextItemsIndices, result$item)
                      itemsExcluded = c(itemsExcluded, result$item)
                    }
                  }
                } else {
                  #linear
                  pageFirstItemIndex = (nextPage - 1) * as.numeric(settings$itemsPerPage) + 1
                  pageLastItemIndex = min(nextPage * as.numeric(settings$itemsPerPage), dim(items)[1])
                  nextItemsIndices = pageFirstItemIndex:pageLastItemIndex
                }
                #make sure item hasn't been asked already
                if((nextItemsIndices %in% itemsAdministered)){
                  count = 1
                  while(count %in% itemsAdministered){
                    count = count + 1
                  }
                  nextItemsIndices = count
                }
              
                if(!is.na(settings$nextItemModule) && settings$nextItemModule != "") {
                  nextItemsIndices = concerto.test.run(settings$nextItemModule, params=list(
                    nextItemsIndices=nextItemsIndices,
                    settings = settings,
                    theta = theta,
                    traitScores = traitScores,
                    itemsAdministered=itemsAdministered,
                    itemsExcluded=itemsExcluded,
                    cbGroup=cbGroup,
                    cbControl=cbControl,
                    session=session,
                    items=items,
                    nextPage=nextPage,
                    prevPage=prevPage,
                    direction=direction
                  ))$nextItemsIndices
                }
              }
              
              .branch = "continue"
              concerto.log(nextItemsIndices, "")
              
              if(length(nextItemsIndices) > 0) {
                nextItems = items[nextItemsIndices,]
              
                if(settings$askAllSubGroup == '1'){
                  my_return = checkSubGroupAll(nextItemsIndices, settings$itemBankTableExtraFields)
                  nextItems = my_return$nextItems
                  nextItemsIndices = my_return$nextItemsIndices
                }else{
                  checkSubGroupThreshold(nextItemsIndices, settings$itemBankTableExtraFields)
                  my_return = checkSubGroupThreshold(nextItemsIndices, settings$itemBankTableExtraFields)
                  nextItems = my_return$nextItems
                  nextItemsIndices = my_return$nextItemsIndices
                  groupsAsked = my_return$groupsAskedReturn
                }
                nextItemsSafe = getSafeItems(nextItems, settings$itemBankTableExtraFields)
                responsesSafe = getSafePastResponses(nextItems, nextItemsIndices)
                resumedItemsIds = NULL
              } else {
                .branch = "stop"
                concerto.log("empty set of next items - stopping")
              }
              
            node: 5
            variable: 110
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 141
            value: null
            node: 5
            variable: 112
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 142
            value: '0'
            node: 5
            variable: 111
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '0'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 143
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: items
            pointer: '1'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 144
            value: 'NULL'
            node: 5
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsAdministered
            pointer: '1'
            pointerVariable: itemsAdministered
          -
            class_name: TestNodePort
            id: 145
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: paramBank
            pointer: '1'
            pointerVariable: paramBank
          -
            class_name: TestNodePort
            id: 146
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: settings
            pointer: '1'
            pointerVariable: settings
          -
            class_name: TestNodePort
            id: 147
            value: '0'
            node: 5
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: theta
            pointer: '1'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 148
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: nextItemsIndices
            pointer: '1'
            pointerVariable: itemsIndices
          -
            class_name: TestNodePort
            id: 149
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: nextItemsSafe
            pointer: '0'
            pointerVariable: nextItemSafe
          -
            class_name: TestNodePort
            id: 150
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: session
            pointer: '1'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 151
            value: 'NULL'
            node: 5
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: resumedItemsIds
            pointer: '1'
            pointerVariable: resumedItemsIds
          -
            class_name: TestNodePort
            id: 152
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: resumedItemsIds
            pointer: '1'
            pointerVariable: resumedItemsIds
          -
            class_name: TestNodePort
            id: 153
            value: '1'
            node: 5
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: direction
            pointer: '1'
            pointerVariable: direction
          -
            class_name: TestNodePort
            id: 154
            value: '0'
            node: 5
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: prevPage
            pointer: '1'
            pointerVariable: page
          -
            class_name: TestNodePort
            id: 155
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: nextPage
            pointer: '1'
            pointerVariable: page
          -
            class_name: TestNodePort
            id: 156
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: responsesSafe
            pointer: '1'
            pointerVariable: responsesSafe
          -
            class_name: TestNodePort
            id: 157
            value: 'NULL'
            node: 5
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: scores
            pointer: '1'
            pointerVariable: scores
          -
            class_name: TestNodePort
            id: 158
            value: list()
            node: 5
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: traitScores
            pointer: '1'
            pointerVariable: traitScores
          -
            class_name: TestNodePort
            id: 159
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 160
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 2
            exposed: '1'
            name: continue
            pointer: '0'
            pointerVariable: continue
          -
            class_name: TestNodePort
            id: 161
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 2
            exposed: '1'
            name: stop
            pointer: '0'
            pointerVariable: stop
          -
            class_name: TestNodePort
            id: 162
            value: 'NULL'
            node: 5
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responses
            pointer: '1'
            pointerVariable: responses
          -
            class_name: TestNodePort
            id: 163
            value: ''
            node: 5
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: groupsAsked
            pointer: '1'
            pointerVariable: groupsAsked
          -
            class_name: TestNodePort
            id: 164
            value: ''
            node: 5
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: groupsAsked
            pointer: '1'
            pointerVariable: groupsAsked
      -
        class_name: TestNode
        id: 6
        title: 'show item'
        type: 0
        posX: 16286
        posY: 15105
        flowTest: 13
        sourceTest: 12
        sourceTestName: _eval
        sourceTestDescription: 'Evaluate R code.'
        ports:
          -
            class_name: TestNodePort
            id: 165
            value: |
              getTemplateParams = function() {
                canGoBack = if(settings$order != "cat" && settings$canGoBack == "1" && page > 1) { 1 } else { 0 }
                maxItems = dim(items)[1]
                itemNumLimit = as.numeric(settings$itemNumLimit)
                if(itemNumLimit > 0) { maxItems = min(maxItems, itemNumLimit) }
                totalPages = ceiling(maxItems / as.numeric(settings$itemsPerPage))
              
                templateParams$items = data.frame(itemsSafe)
                templateParams$responseRequired = as.numeric(settings$responseRequired)
                templateParams$responseRequiredAlert = settings$responseRequiredAlert
                templateParams$footer = settings$footer
                templateParams$logo = settings$logo
                templateParams$nextButtonLabel = settings$nextButtonLabel
                templateParams$title = settings$title
              
                templateParams$canGoBack = canGoBack
                templateParams$responses = responsesSafe
                templateParams$backButtonLabel = settings$backButtonLabel
                templateParams$showPageInfo = as.numeric(settings$showPageInfo)
                if(settings$order != "cat" || settings$minAccuracy == 0) {
                  templateParams$page = page
                  templateParams$totalPages = totalPages
                }
              
                return(templateParams)
              }
              
              getTestTimeLeft = function(oneSecRound=T) {
                testTimeLimit = as.numeric(settings$testTimeLimit) + as.numeric(settings$testTimeLimitOffset)
                testTimeLimitType = settings$testTimeLimitType
                limit = 0
                if(testTimeLimit > 0) {
                  if(testTimeLimitType == "startedAgo") {
                    startedAgo = as.numeric(Sys.time()) - testTimeStarted
                    limit = testTimeLimit - startedAgo
                  } else {
                    limit = testTimeLimit - totalTimeTaken
                  }
                  if(oneSecRound) {
                    limit = max(limit, 1)
                  }
                }
                return(limit)
              }
              
              getTemplateTimeLimit = function(testTimeLimit) {
                itemTimeLimit = as.numeric(settings$itemTimeLimit)
                limit = testTimeLimit
                if(itemTimeLimit > 0) {
                  if(limit > 0) {
                    limit = min(limit, itemTimeLimit)
                  } else {
                    limit = itemTimeLimit
                  }
                }
                return(limit)
              }
              
              params = getTemplateParams()
              if(!is.na(settings$itemTemplateParamsModule) && settings$itemTemplateParamsModule != "") {
                params = concerto.test.run(settings$itemTemplateParamsModule, params=list(
                  params = params,
                  items = items[itemsIndices,],
                  itemsAdministered = itemsAdministered,
                  settings=settings,
                  theta=theta,
                  sem=sem,
                  scores=scores,
                  traitScores=traitScores
                ))$params
              }
              
              testTimeLeft = getTestTimeLeft(T)
              templateTimeLimit = getTemplateTimeLimit(testTimeLeft)
              
              #save state
              if(settings$sessionResuming == 1) {
                state$nextItemsIds = items[itemsIndices, "id"]
                state$page = page
              
                sessionTable = fromJSON(settings$sessionTable)
                concerto.table.query("
              UPDATE {{table}} 
              SET {{stateCol}}='{{resumeState}}'
              WHERE id={{id}}", params=list(
                table = sessionTable$table,
                stateCol = sessionTable$columns$state,
                resumeState = toJSON(state),
                id = session$id
              ))
              }
              
              templateResponse = concerto.template.show(
                templateId=settings$itemTemplate, 
                html=settings$itemTemplateHtml,
                params=params, 
                timeLimit=templateTimeLimit
              )
              
              if(!is.na(settings$templateResponseModule) && settings$templateResponseModule != "") {
                templateResponse = concerto.test.run(settings$templateResponseModule, params=list(
                  settings = settings,
                  params = params,
                  templateResponse = templateResponse
                ))$templateResponse
              }
              
              timeTaken = as.numeric(templateResponse$timeTaken)
              totalTimeTaken = totalTimeTaken + timeTaken
              
              testTimeLeft = getTestTimeLeft(F)
              
              .branch = "submitted"
              if(templateResponse$isTimeout == 1) { .branch = "outOfTime" }
              
            node: 6
            variable: 110
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 166
            value: null
            node: 6
            variable: 112
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 167
            value: '0'
            node: 6
            variable: 111
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '0'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 168
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 2
            exposed: '1'
            name: outOfTime
            pointer: '0'
            pointerVariable: outOfTime
          -
            class_name: TestNodePort
            id: 169
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 2
            exposed: '1'
            name: submitted
            pointer: '0'
            pointerVariable: submitted
          -
            class_name: TestNodePort
            id: 170
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 171
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: templateResponse
            pointer: '1'
            pointerVariable: templateResponse
          -
            class_name: TestNodePort
            id: 172
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsSafe
            pointer: '0'
            pointerVariable: itemSafe
          -
            class_name: TestNodePort
            id: 173
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: settings
            pointer: '1'
            pointerVariable: settings
          -
            class_name: TestNodePort
            id: 174
            value: c.getDynamicInputs()
            node: 6
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: templateParams
            pointer: '0'
            pointerVariable: templateParams
          -
            class_name: TestNodePort
            id: 175
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: testTimeStarted
            pointer: '1'
            pointerVariable: testTimeStarted
          -
            class_name: TestNodePort
            id: 176
            value: 'NULL'
            node: 6
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsAdministered
            pointer: '1'
            pointerVariable: itemsAdministered
          -
            class_name: TestNodePort
            id: 177
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: testTimeLeft
            pointer: '1'
            pointerVariable: testTimeLeft
          -
            class_name: TestNodePort
            id: 178
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: timeTaken
            pointer: '1'
            pointerVariable: timeTaken
          -
            class_name: TestNodePort
            id: 179
            value: '0'
            node: 6
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: totalTimeTaken
            pointer: '1'
            pointerVariable: totalTimeTaken
          -
            class_name: TestNodePort
            id: 180
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: totalTimeTaken
            pointer: '1'
            pointerVariable: totalTimeTaken
          -
            class_name: TestNodePort
            id: 181
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: state
            pointer: '1'
            pointerVariable: state
          -
            class_name: TestNodePort
            id: 182
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: session
            pointer: '1'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 183
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: items
            pointer: '1'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 184
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsIndices
            pointer: '1'
            pointerVariable: itemsIndices
          -
            class_name: TestNodePort
            id: 185
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: page
            pointer: '1'
            pointerVariable: page
          -
            class_name: TestNodePort
            id: 186
            value: ''
            node: 6
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responsesSafe
            pointer: '1'
            pointerVariable: responsesSafe
          -
            class_name: TestNodePort
            id: 187
            value: '0'
            node: 6
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: theta
            pointer: '1'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 188
            value: '1'
            node: 6
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sem
            pointer: '1'
            pointerVariable: sem
          -
            class_name: TestNodePort
            id: 189
            value: 'NULL'
            node: 6
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: scores
            pointer: '1'
            pointerVariable: scores
          -
            class_name: TestNodePort
            id: 190
            value: list()
            node: 6
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: traitScores
            pointer: '1'
            pointerVariable: traitScores
      -
        class_name: TestNode
        id: 7
        title: scoring
        type: 0
        posX: 16733
        posY: 15144
        flowTest: 13
        sourceTest: 12
        sourceTestName: _eval
        sourceTestDescription: 'Evaluate R code.'
        ports:
          -
            class_name: TestNodePort
            id: 191
            value: |
              library(catR)
              
              isSkipped = function(item) {
                skippedTemplateResponse = templateResponse[[paste0("skip",item$id)]]
                if(item$skippable == 1 && !is.null(skippedTemplateResponse) && skippedTemplateResponse == 1) {
                  return(T)
                }
                return(F)
              }
              
              getScore = function(item, response) {
                defaultScore = if(is.null(response) || is.na(response)) { NA } else { 0 }
              
                if(!is.null(response) && !is.na(response) && !is.null(item$responseOptions) && item$responseOptions != "") {
                  responseOptions = fromJSON(item$responseOptions)
                  defaultScore = responseOptions$defaultScore
                  if(is.null(defaultScore)) { defaultScore = NA }
                  if(length(responseOptions$scoreMap) > 0) {
                    for(i in 1:length(responseOptions$scoreMap)) {
                      sm = responseOptions$scoreMap[[i]]
                      if(sm$value == response) {
                        defaultScore = sm$score
                        break
                      }
                    }
                  }
                }
              
                score = as.numeric(defaultScore)
                if(!is.na(settings$responseScoreModule) && settings$responseScoreModule != "") {
                  score = concerto.test.run(settings$responseScoreModule, params=list(
                    item=item,
                    response=response,
                    score=score,
                    settings=settings
                  ))$score
                }
                return(as.numeric(score))
              }
              
              getTraits = function(item, value) {
                traitList = NULL
              
                #item level traits
                itemTrait = trimws(item$trait)
                if(!is.na(itemTrait) && length(itemTrait) > 0 && itemTrait != "") {
                  traits = strsplit(itemTrait,",")[[1]]
                  if(length(traits) > 0) {
                    for(j in 1:length(traits)) {
                      trait = trimws(traits[j])
                      if(trait == "") { next }
                      traitList = unique(c(traitList, trait))
                    }
                  }
                }
              
                #response level trait
                if(!is.null(value) && !is.na(value) && !is.na(item$responseOptions) && !is.null(item$responseOptions) && item$responseOptions != "") {
                  responseOptions = fromJSON(item$responseOptions)
                  if(length(responseOptions$scoreMap) > 0) {
                    for(j in 1:length(responseOptions$scoreMap)) {
                      sm = responseOptions$scoreMap[[j]]
                      if(sm$value == value) {
                        responseTrait = trimws(sm$trait)
              
                        if(!is.na(responseTrait) && length(responseTrait) > 0 && responseTrait != "") {
                          traits = strsplit(responseTrait,",")[[1]]
                          if(length(traits) > 0) {
                            for(k in 1:length(traits)) {
                              trait = trimws(traits[k])
                              if(trait == "") { next }
                              traitList = unique(c(traitList, trait))
                            }
                          }
                        }
                        break
                      }
                    }
                  }
                }
              
                if(length(traitList) == 0) { return(NULL) }
                return(paste(sort(traitList), collapse=","))
              }
              
              calculateTraitScores = function(itemsAdministered, responses, scores) {
                traitScores = list()
                for(i in 1:length(itemsAdministered)) {
                  itemIndex = itemsAdministered[i]
                  value = responses[i]
                  item = items[itemIndex,]
                  score = scores[i]
                  if(is.na(score)) { score = 0 }
                  traitList = getTraits(item, value)
              
                  #sum scores
                  if(length(traitList) > 0) {
                    for(j in 1:length(traitList)) {
                      trait = traitList[j]
                      if(trait == "") { next }
                      if(is.null(traitScores[[trait]])) { traitScores[[trait]] = 0 }
                      traitScores[[trait]] = traitScores[[trait]] + score
                    }
                  }
                }
                return(traitScores)
              }
              
              getItemsTraits = function(itemsAdministered) {
                traits = list()
                if(length(itemsAdministered) > 0) {
                  for(i in 1:length(itemsAdministered)) {
                    itemIndex = itemsAdministered[i]
                    value = responses[i]
                    item = items[itemIndex,]
                    itemTraits = getTraits(item, value)
                    traits[[i]] = itemTraits
                  }
                }
                return(traits)
              }
              
              calculateTheta = function(trait, itemsAdministered, responses, scores, itemTraits) {
                d = as.numeric(settings$d)
                selectedScores = NULL
                selectedParamBank = NULL
              
                for(i in 1:length(itemsAdministered)) {
                  itemIndex = itemsAdministered[i]
                  traits = itemTraits[i]
                  if(is.null(trait) || trait %in% traits) {
                    validParams = !is.na(paramBank[itemIndex,1])
                    if(validParams) {
                      selectedScores = c(selectedScores, scores[i])
                      selectedParamBank = rbind(selectedParamBank, paramBank[itemIndex,])
                    }
                  }
                }
              
                if(is.null(selectedParamBank)) { return(NULL) } 
                if(all(is.na(selectedScores))) { return(NULL) }
                theta = thetaEst(matrix(selectedParamBank, ncol=dim(paramBank)[2], byrow=F), selectedScores, model=settings$model, method=settings$scoringMethod, D=d)
                return(theta)
              }
              
              calculateSem = function(trait, theta, itemsAdministered, responses, scores, itemTraits) {
                d = as.numeric(settings$d)
                selectedScores = NULL
                selectedParamBank = NULL
              
                for(i in 1:length(itemsAdministered)) {
                  itemIndex = itemsAdministered[i]
                  traits = itemTraits[i]
                  if(is.null(trait) || trait %in% traits) {
                    validParams = !is.na(paramBank[itemIndex,1])
                    if(validParams) {
                      selectedScores = c(selectedScores, scores[i])
                      selectedParamBank = rbind(selectedParamBank, paramBank[itemIndex,])
                    }
                  }
                }
              
                if(is.null(selectedParamBank)) { return(NULL) } 
                if(all(is.na(selectedScores))) { return(NULL) }
                sem = semTheta(theta, matrix(selectedParamBank, ncol=dim(paramBank)[2], byrow=F), selectedScores, model=settings$model, method=settings$scoringMethod, D=d)
                return(sem)
              }
              
              currentScores = NULL
              currentTraits = NULL
              prevSem = sem
              prevTheta = theta
              traitTheta = list()
              traitSem = list()
              
              concerto.log('before itemsAdministered')
              concerto.log(itemsAdministered)
              concerto.log(itemsIndices)
              itemsAdministered = unique(c(itemsAdministered, itemsIndices))
              concerto.log('after itemsAdministered')
              concerto.log(itemsAdministered)
              itemTraits = getItemsTraits(itemsAdministered)
              allTraits = unlist(unique(itemTraits))
              for(i in 1:length(itemsIndices)) {
                item = items[itemsIndices[i],]
                responseRaw = templateResponse[[paste0("r",item$id)]]
                if(is.null(responseRaw)) { responseRaw = NA }
                skipped = isSkipped(item)
              
                score = NA
                if(!skipped) { 
                  score = getScore(item, responseRaw)
                }
              
                index = which(itemsAdministered == itemsIndices[i])
                scores[index] = score
                responses[index] = responseRaw
              
                currentScores = c(currentScores, score)
                currentTraits = c(currentTraits, getTraits(item, responseRaw))
              }
              
              shouldCalculateTheta = !is.na(settings$calculateTheta) && settings$calculateTheta == 1
              shouldCalculateSem = !is.na(settings$calculateSem) && settings$calculateSem == 1
              if(length(allTraits) > 0) {
                for(i in 1:length(allTraits)) {
                  trait = allTraits[i]
              
                  if(shouldCalculateTheta) {
                    if(!trait %in% ls(traitTheta)) {
                      traitTheta[[trait]] = as.numeric(settings$startingTheta)
                    }
                    newTheta = calculateTheta(trait, itemsAdministered, responses, scores, itemTraits)
                    if(!is.null(newTheta)) {
                      traitTheta[[trait]] = newTheta
                    }
                  }
              
                  if(shouldCalculateSem) {
                    if(!trait %in% ls(traitSem)) {
                      traitSem[[trait]] = 1
                    }
                    newSem = calculateSem(trait, traitTheta[[trait]], itemsAdministered, responses, scores, itemTraits)
                    if(!is.null(newSem)) {
                      traitSem[[trait]] = newSem
                    }
                  }
                }
              }
              
              if(shouldCalculateTheta) {
                newTheta = calculateTheta(NULL, itemsAdministered, responses, scores, itemTraits)
                if(!is.null(newTheta)) {
                  theta = newTheta
                }
              }
              if(shouldCalculateSem) {
                newSem = calculateSem(NULL, theta, itemsAdministered, responses, scores, itemTraits)
                if(!is.null(newSem)) {
                  sem = newSem
                }
              }
              
              traitScores = calculateTraitScores(itemsAdministered, responses, scores)
              
              concerto.log(theta, "theta")
              concerto.log(sem, "sem")
              concerto.log(traitScores, "traitScores")
              concerto.log(traitTheta, "traitTheta")
              concerto.log(traitSem, "traitTheta")
              
            node: 7
            variable: 110
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 192
            value: null
            node: 7
            variable: 112
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 193
            value: '0'
            node: 7
            variable: 111
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 194
            value: 'NULL'
            node: 7
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: scores
            pointer: '1'
            pointerVariable: scores
          -
            class_name: TestNodePort
            id: 195
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsIndices
            pointer: '1'
            pointerVariable: itemsIndices
          -
            class_name: TestNodePort
            id: 196
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: items
            pointer: '1'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 197
            value: 'NULL'
            node: 7
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsAdministered
            pointer: '1'
            pointerVariable: itemsAdministered
          -
            class_name: TestNodePort
            id: 198
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: paramBank
            pointer: '1'
            pointerVariable: paramBank
          -
            class_name: TestNodePort
            id: 199
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: templateResponse
            pointer: '1'
            pointerVariable: templateResponse
          -
            class_name: TestNodePort
            id: 200
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: settings
            pointer: '1'
            pointerVariable: settings
          -
            class_name: TestNodePort
            id: 201
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: scores
            pointer: '1'
            pointerVariable: scores
          -
            class_name: TestNodePort
            id: 202
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: sem
            pointer: '1'
            pointerVariable: sem
          -
            class_name: TestNodePort
            id: 203
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: theta
            pointer: '1'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 204
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: currentScores
            pointer: '1'
            pointerVariable: currentScores
          -
            class_name: TestNodePort
            id: 205
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: itemsAdministered
            pointer: '1'
            pointerVariable: itemsAdministered
          -
            class_name: TestNodePort
            id: 206
            value: '0'
            node: 7
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: theta
            pointer: '1'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 207
            value: '1'
            node: 7
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sem
            pointer: '1'
            pointerVariable: sem
          -
            class_name: TestNodePort
            id: 208
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: traitScores
            pointer: '1'
            pointerVariable: traitScores
          -
            class_name: TestNodePort
            id: 209
            value: 'NULL'
            node: 7
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responses
            pointer: '1'
            pointerVariable: responses
          -
            class_name: TestNodePort
            id: 210
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: responses
            pointer: '1'
            pointerVariable: responses
          -
            class_name: TestNodePort
            id: 211
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: currentTraits
            pointer: '1'
            pointerVariable: currentTraits
          -
            class_name: TestNodePort
            id: 212
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: prevTheta
            pointer: '1'
            pointerVariable: prevTheta
          -
            class_name: TestNodePort
            id: 213
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: prevSem
            pointer: '1'
            pointerVariable: prevSem
          -
            class_name: TestNodePort
            id: 214
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: traitTheta
            pointer: '1'
            pointerVariable: traitTheta
          -
            class_name: TestNodePort
            id: 215
            value: ''
            node: 7
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: traitSem
            pointer: '1'
            pointerVariable: traitSem
      -
        class_name: TestNode
        id: 8
        title: 'response processor'
        type: 0
        posX: 17125
        posY: 15118
        flowTest: 13
        sourceTest: 12
        sourceTestName: _eval
        sourceTestDescription: 'Evaluate R code.'
        ports:
          -
            class_name: TestNodePort
            id: 216
            value: |
              getSessionId = function(session) {
                id = 0
                if(!is.null(session) && is.list(session)) {
                  id = session$id
                } else {
                  id = paste0("i",concerto$session$id)
                }
                return(id)
              }
              
              isSkipped = function(item) {
                skippedTemplateResponse = templateResponse[[paste0("skip",item$id)]]
                if(settings$canSkipItems == 1 && !is.null(skippedTemplateResponse) && skippedTemplateResponse == 1) {
                  return(T)
                }
                return(F)
              }
              
              saveResponse = function(score, trait, item, skipped) {
                responseBank = fromJSON(settings$responseBank)
                if(!is.character(responseBank$table) || nchar(responseBank$table) == 0) {
                  return(NULL)
                }
              
                hasSkippedColumn = !is.null(responseBank$columns$skipped) && !is.na(responseBank$columns$skipped) && responseBank$columns$skipped != ""
              
                params = list(
                  table = responseBank$table,
                  sessionIdColumn = responseBank$columns$session_id,
                  sessionId = getSessionId(session),
                  itemIdColumn = responseBank$columns$item_id,
                  itemId = item$id,
                  responseColumn = responseBank$columns$response,
                  responseValue = templateResponse[[paste0("r",item$id)]],
                  skippedColumn = responseBank$columns$skipped,
                  skipped = if(skipped) { 1 } else { 0 },
                  scoreColumn = responseBank$columns$score,
                  score = score,
                  timeTakenColumn = responseBank$columns$timeTaken,
                  timeTaken = templateResponse$timeTaken, #could use time difference
                  thetaColumn = responseBank$columns$theta,
                  theta = theta,
                  semColumn = responseBank$columns$sem,
                  sem = sem,
                  traitColumn = responseBank$columns$trait,
                  trait = trait
                )
              
                sql = NULL
                response = concerto.table.query("
              SELECT id 
              FROM {{table}} 
              WHERE {{itemIdColumn}}={{itemId}} AND {{sessionIdColumn}}='{{sessionId}}' 
              LIMIT 1", params=params)
                responseExist = dim(response)[1] > 0
                responseId = NULL
              
                if(responseExist) {
                  responseId = response[1,"id"]
                  params$id = responseId
                  sql = "
              UPDATE {{table}} SET
              {{responseColumn}} = '{{responseValue}}',
              {{scoreColumn}} = IF('{{score}}' = '', NULL, '{{score}}'),
              {{timeTakenColumn}} = {{timeTaken}},
              {{thetaColumn}} = {{theta}},
              {{semColumn}} = {{sem}},
              {{traitColumn}} = IF('{{trait}}' = '', NULL, '{{trait}}')"
                  if(hasSkippedColumn) {
                    sql = paste0(sql, ",{{skippedColumn}} = {{skipped}} ")
                  }
                  sql = paste0(sql, "
              WHERE id={{id}}")
                } else {
                  sql = "
              INSERT INTO {{table}} 
              (
              {{itemIdColumn}}
              ,{{responseColumn}}
              ,{{scoreColumn}}
              ,{{timeTakenColumn}}
              ,{{sessionIdColumn}}
              ,{{thetaColumn}}
              ,{{semColumn}}
              ,{{traitColumn}}"
                  if(hasSkippedColumn) {
                    sql = paste0(sql, ",{{skippedColumn}}")
                  }
                  sql = paste0(sql, "
              ) 
              VALUES (
              {{itemId}}
              ,'{{responseValue}}'
              ,IF('{{score}}' = '', NULL, '{{score}}')
              ,{{timeTaken}}
              ,'{{sessionId}}'
              ,{{theta}}
              ,{{sem}}
              ,IF('{{trait}}' = '', NULL, '{{trait}}')")
                  if(hasSkippedColumn) {
                    sql = paste0(sql, ",{{skipped}}")
                  }
                  sql = paste0(sql, "
              )")
                }
              
                concerto.table.query(sql, params)
                if(!responseExist) {
                  responseId = concerto.table.lastInsertId()
                }
              
                if(!is.na(settings$responseSavedModule) && settings$responseSavedModule != "") {
                  concerto.test.run(settings$responseSavedModule, params=list(
                    settings = settings,
                    id = responseId,
                    response = params,
                    theta = theta,
                    sem = sem,
                    prevTheta = prevTheta,
                    prevSem = prevSem,
                    score = score,
                    value = params$responseValue,
                    session = session,
                    item = item,
                    skipped = skipped,
                    timeTaken = params$timeTaken
                  ))
                }
              }
              
              for(i in 1:length(itemsIndices)) {
                itemIndex = itemsIndices[i]
                item = items[itemIndex,]
                skipped = isSkipped(item)
                saveResponse(currentScores[i], currentTraits[i], item, skipped)
              }
              
              direction = 1
              if(settings$order != "cat" && settings$canGoBack == "1" && page > 1 && templateResponse$buttonPressed == "back") {
                direction = -1
              }
              
            node: 8
            variable: 110
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 217
            value: null
            node: 8
            variable: 112
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 218
            value: '0'
            node: 8
            variable: 111
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 219
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: items
            pointer: '1'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 220
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsIndices
            pointer: '1'
            pointerVariable: itemsIndices
          -
            class_name: TestNodePort
            id: 221
            value: 'NULL'
            node: 8
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsAdministered
            pointer: '1'
            pointerVariable: itemsAdministered
          -
            class_name: TestNodePort
            id: 222
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: templateResponse
            pointer: '1'
            pointerVariable: templateResponse
          -
            class_name: TestNodePort
            id: 223
            value: '1'
            node: 8
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sem
            pointer: '1'
            pointerVariable: sem
          -
            class_name: TestNodePort
            id: 224
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: session
            pointer: '1'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 225
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: settings
            pointer: '1'
            pointerVariable: settings
          -
            class_name: TestNodePort
            id: 226
            value: '0'
            node: 8
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: theta
            pointer: '1'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 227
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: currentScores
            pointer: '1'
            pointerVariable: currentScores
          -
            class_name: TestNodePort
            id: 228
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: direction
            pointer: '1'
            pointerVariable: direction
          -
            class_name: TestNodePort
            id: 229
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: page
            pointer: '1'
            pointerVariable: page
          -
            class_name: TestNodePort
            id: 230
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: currentTraits
            pointer: '1'
            pointerVariable: currentTraits
          -
            class_name: TestNodePort
            id: 231
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: prevTheta
            pointer: '1'
            pointerVariable: prevTheta
          -
            class_name: TestNodePort
            id: 232
            value: ''
            node: 8
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: prevSem
            pointer: '1'
            pointerVariable: prevSem
      -
        class_name: TestNode
        id: 9
        title: 'status check'
        type: 0
        posX: 16434
        posY: 15733
        flowTest: 13
        sourceTest: 12
        sourceTestName: _eval
        sourceTestDescription: 'Evaluate R code.'
        ports:
          -
            class_name: TestNodePort
            id: 233
            value: |
              isOutOfTime = function(testTimeLimit, testTimeLeft, itemTimeLimit, itemTimeFullRequired) {
                if(testTimeLimit > 0) {
                  if(testTimeLeft <= 1) { return(T) }
                  if(testTimeLeft < itemTimeLimit && itemTimeFullRequired) { return(T) }
                }
                return(F)
              }
              
              getStopReason = function(testTimeLimit, itemTimeLimit, itemTimeFullRequired, itemNumLimit, minAccuracy, minAccuracyMinItems, itemsNum) {
                outOfTime = isOutOfTime(
                  testTimeLimit, 
                  testTimeLeft,
                  itemTimeLimit, 
                  itemTimeFullRequired
                )
              
                if(outOfTime) {
                  return("timeOut")
                }
              
                maxItems = dim(items)[1]
                itemNumLimit = as.numeric(settings$itemNumLimit)
                if(itemNumLimit > 0) { maxItems = min(maxItems, itemNumLimit) }
                totalPages = ceiling(maxItems / as.numeric(settings$itemsPerPage))
              
                if(itemNumLimit > 0 && length(itemsAdministered) >= itemNumLimit || length(itemsAdministered) >= itemsNum) {
                  if(direction > 0 && totalPages == page) {
                    return("maxItems")
                  }
                }
              
                if(minAccuracy != 0 && minAccuracy >= sem && minAccuracyMinItems <= length(itemsAdministered)) {
                  return("minAccuracy")
                }
              
                return(NULL)
              }
              
              stopReason = getStopReason(
                as.numeric(settings$testTimeLimit),
                as.numeric(settings$itemTimeLimit), 
                settings$itemTimeFullRequired == "1", 
                as.numeric(settings$itemNumLimit), 
                as.numeric(settings$minAccuracy), 
                as.numeric(settings$minAccuracyMinItems),
                dim(items)[1]
              )
              if(!is.na(settings$stopCheckModule) && settings$stopCheckModule != "") {
                stopReason = concerto.test.run(settings$stopCheckModule, params=list(
                  stopReason = stopReason,
                  settings = settings,
                  theta = theta,
                  sem = sem,
                  itemsAdministered = itemsAdministered,
                  session = session,
                  responses = responses,
                  scores = scores,
                  items = items,
                  templateResponse = templateResponse
                ))$stopReason
              }
              
              concerto.log(stopReason, "stopReason")
              
              if(is.null(stopReason)) {
                .branch = "continue"
              } else {
                .branch = "stop"
              }
              
            node: 9
            variable: 110
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 234
            value: null
            node: 9
            variable: 112
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 235
            value: '0'
            node: 9
            variable: 111
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '0'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 236
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: items
            pointer: '1'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 237
            value: 'NULL'
            node: 9
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: itemsAdministered
            pointer: '1'
            pointerVariable: itemsAdministered
          -
            class_name: TestNodePort
            id: 238
            value: '1'
            node: 9
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sem
            pointer: '1'
            pointerVariable: sem
          -
            class_name: TestNodePort
            id: 239
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: settings
            pointer: '1'
            pointerVariable: settings
          -
            class_name: TestNodePort
            id: 240
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 2
            exposed: '1'
            name: continue
            pointer: '0'
            pointerVariable: continue
          -
            class_name: TestNodePort
            id: 241
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 2
            exposed: '1'
            name: stop
            pointer: '0'
            pointerVariable: stop
          -
            class_name: TestNodePort
            id: 242
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 243
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: testTimeLeft
            pointer: '1'
            pointerVariable: testTimeLeft
          -
            class_name: TestNodePort
            id: 244
            value: '1'
            node: 9
            variable: null
            string: '0'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: direction
            pointer: '1'
            pointerVariable: direction
          -
            class_name: TestNodePort
            id: 245
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: page
            pointer: '1'
            pointerVariable: page
          -
            class_name: TestNodePort
            id: 246
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: stopReason
            pointer: '1'
            pointerVariable: stopReason
          -
            class_name: TestNodePort
            id: 247
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: theta
            pointer: '1'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 248
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: session
            pointer: '1'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 249
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responses
            pointer: '1'
            pointerVariable: responses
          -
            class_name: TestNodePort
            id: 250
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: scores
            pointer: '1'
            pointerVariable: scores
          -
            class_name: TestNodePort
            id: 251
            value: ''
            node: 9
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: templateResponse
            pointer: '1'
            pointerVariable: templateResponse
      -
        class_name: TestNode
        id: 10
        title: 'item exposure'
        type: 0
        posX: 15548
        posY: 15088
        flowTest: 13
        sourceTest: 12
        sourceTestName: _eval
        sourceTestDescription: 'Evaluate R code.'
        ports:
          -
            class_name: TestNodePort
            id: 252
            value: |
              exposureMaxItems = as.numeric(settings$exposureMaxItems)
              exposureLimit = as.numeric(settings$exposureLimit)
              exposureMinSessions = as.numeric(settings$exposureMinSessions)
              
              concerto.log(exposureMaxItems, "exposure max items")
              
              if(is.na(exposureMaxItems) || exposureMaxItems == 0) { 
                return()
              }
              
              if(!is.list(session) || is.null(session$id)) {
                concerto.log("session is required for item exposure")
                return()
              }
              
              responseTable = fromJSON(settings$responseBank)
              if(!is.character(responseTable$table) || nchar(responseTable$table) == 0) {
                concerto.log("no response bank defined, skipping exposure")
                return()
              }
              
              responsesRecords = concerto.table.query("
              SELECT id, 
              {{itemIdCol}} AS item_id
              FROM {{table}} 
              WHERE {{sessionIdCol}}={{sessionId}}", params=list(
                itemIdCol = responseTable$columns$item_id,
                table = responseTable$table,
                sessionIdCol = responseTable$columns$session_id,
                sessionId = session$id
              ))
              
              itemsAnswered = items[items[,"id"] %in% responsesRecords[,"item_id"],]
              itemsAnsweredNum = dim(itemsAnswered)[1]
              itemsLeft = items
              if(itemsAnsweredNum > 0) {
                itemsLeft = items[-as.numeric(rownames(itemsAnswered)),]
              }
              itemsLeftNum = dim(itemsLeft)[1]
              
              if(itemsLeftNum == 0) {
                return()
              }
              
              sessionNum = concerto.table.query("
              SELECT COUNT(DISTINCT session_id) AS sessionNum
              FROM {{table}}", params=list(
                table = responseTable$table
              ))[1,1]
              
              if(sessionNum == 0 || exposureMinSessions > sessionNum) {
                concerto.log(sessionNum, "session number to low for item exposure")
                return()
              }
              
              exposureCount = concerto.table.query("
              SELECT COUNT(*) AS sessionNum,
              {{itemIdCol}} AS item_id
              FROM {{table}}
              WHERE {{itemIdCol}} IN ({{itemsLeftIds}})
              GROUP BY {{itemIdCol}}", params=list(
                itemIdCol = responseTable$columns$item_id,
                table = responseTable$table,
                itemsLeftIds=paste(itemsLeft[,"id"], collapse=",")
              ))
              
              excludedIndices = c()
              for(i in 1:itemsLeftNum) {
                itemIndex = itemsAnsweredNum + i
                exposure = exposureCount[i, "sessionNum"] / sessionNum
                
                if(exposure >= exposureLimit) {
                  excludedIndices = c(excludedIndices, itemIndex)
                }
                
                if(length(excludedIndices) >= exposureMaxItems) {
                  break
                }
              }
              
              concerto.log(excludedIndices, "excluded item indices by item exposure")
              if(length(excludedIndices) > 0) {
                items = items[-excludedIndices,]
                paramBank = paramBank[-excludedIndices,]
              }
              
            node: 10
            variable: 110
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 253
            value: null
            node: 10
            variable: 112
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 254
            value: '0'
            node: 10
            variable: 111
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 255
            value: ''
            node: 10
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: items
            pointer: '1'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 256
            value: ''
            node: 10
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: paramBank
            pointer: '1'
            pointerVariable: paramBank
          -
            class_name: TestNodePort
            id: 257
            value: ''
            node: 10
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: settings
            pointer: '1'
            pointerVariable: settings
          -
            class_name: TestNodePort
            id: 258
            value: ''
            node: 10
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: items
            pointer: '1'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 259
            value: ''
            node: 10
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: paramBank
            pointer: '1'
            pointerVariable: paramBank
          -
            class_name: TestNodePort
            id: 260
            value: ''
            node: 10
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: session
            pointer: '1'
            pointerVariable: session
    nodesConnections:
      -
        class_name: TestNodeConnection
        id: 1
        flowTest: 13
        sourceNode: 1
        sourcePort: null
        destinationNode: 3
        destinationPort: null
        returnFunction: ''
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 2
        flowTest: 13
        sourceNode: 1
        sourcePort: 2
        destinationNode: 3
        destinationPort: 70
        returnFunction: itemBankItems
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 3
        flowTest: 13
        sourceNode: 1
        sourcePort: 3
        destinationNode: 3
        destinationPort: 71
        returnFunction: itemBankTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 4
        flowTest: 13
        sourceNode: 1
        sourcePort: 1
        destinationNode: 3
        destinationPort: 72
        returnFunction: itemBankType
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 5
        flowTest: 13
        sourceNode: 1
        sourcePort: 8
        destinationNode: 3
        destinationPort: 69
        returnFunction: contentBalancing
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 6
        flowTest: 13
        sourceNode: 1
        sourcePort: 9
        destinationNode: 3
        destinationPort: 82
        returnFunction: startingTheta
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 7
        flowTest: 13
        sourceNode: 1
        sourcePort: 4
        destinationNode: 3
        destinationPort: 83
        returnFunction: testTimeLimit
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 8
        flowTest: 13
        sourceNode: 1
        sourcePort: 7
        destinationNode: 3
        destinationPort: 84
        returnFunction: testTimeLimitOffset
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 9
        flowTest: 13
        sourceNode: 1
        sourcePort: 16
        destinationNode: 3
        destinationPort: 73
        returnFunction: itemNumLimit
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 10
        flowTest: 13
        sourceNode: 1
        sourcePort: 14
        destinationNode: 3
        destinationPort: 74
        returnFunction: itemTemplate
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 11
        flowTest: 13
        sourceNode: 1
        sourcePort: 6
        destinationNode: 3
        destinationPort: 75
        returnFunction: itemTimeFullRequired
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 12
        flowTest: 13
        sourceNode: 1
        sourcePort: 5
        destinationNode: 3
        destinationPort: 76
        returnFunction: itemTimeLimit
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 13
        flowTest: 13
        sourceNode: 1
        sourcePort: 17
        destinationNode: 3
        destinationPort: 77
        returnFunction: minAccuracy
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 14
        flowTest: 13
        sourceNode: 1
        sourcePort: 10
        destinationNode: 3
        destinationPort: 78
        returnFunction: nextItemCriterion
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 15
        flowTest: 13
        sourceNode: 1
        sourcePort: 11
        destinationNode: 3
        destinationPort: 79
        returnFunction: nextItemRandomesque
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 16
        flowTest: 13
        sourceNode: 1
        sourcePort: 13
        destinationNode: 3
        destinationPort: 80
        returnFunction: responseBank
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 17
        flowTest: 13
        sourceNode: 1
        sourcePort: 12
        destinationNode: 3
        destinationPort: 81
        returnFunction: scoringMethod
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 18
        flowTest: 13
        sourceNode: 1
        sourcePort: 18
        destinationNode: 3
        destinationPort: 85
        returnFunction: responseRequired
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 19
        flowTest: 13
        sourceNode: 1
        sourcePort: 19
        destinationNode: 3
        destinationPort: 86
        returnFunction: responseRequiredAlert
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 20
        flowTest: 13
        sourceNode: 1
        sourcePort: 20
        destinationNode: 3
        destinationPort: 87
        returnFunction: itemTemplateParamsModule
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 21
        flowTest: 13
        sourceNode: 5
        sourcePort: 149
        destinationNode: 6
        destinationPort: 172
        returnFunction: nextItemsSafe
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 22
        flowTest: 13
        sourceNode: 4
        sourcePort: 124
        destinationNode: 10
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 23
        flowTest: 13
        sourceNode: 6
        sourcePort: 168
        destinationNode: 7
        destinationPort: null
        returnFunction: outOfTime
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 24
        flowTest: 13
        sourceNode: 6
        sourcePort: 169
        destinationNode: 7
        destinationPort: null
        returnFunction: submitted
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 25
        flowTest: 13
        sourceNode: 8
        sourcePort: 218
        destinationNode: 9
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 26
        flowTest: 13
        sourceNode: 9
        sourcePort: 240
        destinationNode: 5
        destinationPort: null
        returnFunction: continue
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 27
        flowTest: 13
        sourceNode: 9
        sourcePort: 241
        destinationNode: 2
        destinationPort: null
        returnFunction: stop
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 28
        flowTest: 13
        sourceNode: 3
        sourcePort: 68
        destinationNode: 4
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 29
        flowTest: 13
        sourceNode: 1
        sourcePort: 21
        destinationNode: 3
        destinationPort: 88
        returnFunction: 'if(model == "dichotomous") { NULL } else { model }'
        defaultReturnFunction: '0'
      -
        class_name: TestNodeConnection
        id: 30
        flowTest: 13
        sourceNode: 7
        sourcePort: 193
        destinationNode: 8
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 31
        flowTest: 13
        sourceNode: 1
        sourcePort: 22
        destinationNode: 3
        destinationPort: 89
        returnFunction: responseScoreModule
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 32
        flowTest: 13
        sourceNode: 1
        sourcePort: 23
        destinationNode: 3
        destinationPort: 90
        returnFunction: nextItemModule
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 33
        flowTest: 13
        sourceNode: 1
        sourcePort: 24
        destinationNode: 3
        destinationPort: 91
        returnFunction: itemBankTableExtraFields
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 34
        flowTest: 13
        sourceNode: 1
        sourcePort: 25
        destinationNode: 3
        destinationPort: 92
        returnFunction: itemBankFilterModule
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 35
        flowTest: 13
        sourceNode: 1
        sourcePort: 26
        destinationNode: 3
        destinationPort: 94
        returnFunction: testTimeLimitType
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 36
        flowTest: 13
        sourceNode: 1
        sourcePort: 27
        destinationNode: 3
        destinationPort: 95
        returnFunction: sessionResuming
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 37
        flowTest: 13
        sourceNode: 1
        sourcePort: 28
        destinationNode: 3
        destinationPort: 96
        returnFunction: sessionTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 38
        flowTest: 13
        sourceNode: 1
        sourcePort: 29
        destinationNode: 3
        destinationPort: 97
        returnFunction: minAccuracyMinItems
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 39
        flowTest: 13
        sourceNode: 1
        sourcePort: 30
        destinationNode: 3
        destinationPort: 98
        returnFunction: itemBankFlatTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 40
        flowTest: 13
        sourceNode: 1
        sourcePort: 31
        destinationNode: 3
        destinationPort: 99
        returnFunction: itemTemplateHtml
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 41
        flowTest: 13
        sourceNode: 1
        sourcePort: 36
        destinationNode: 3
        destinationPort: 104
        returnFunction: footer
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 42
        flowTest: 13
        sourceNode: 1
        sourcePort: 32
        destinationNode: 3
        destinationPort: 100
        returnFunction: instructions
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 43
        flowTest: 13
        sourceNode: 1
        sourcePort: 35
        destinationNode: 3
        destinationPort: 101
        returnFunction: logo
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 44
        flowTest: 13
        sourceNode: 1
        sourcePort: 33
        destinationNode: 3
        destinationPort: 102
        returnFunction: nextButtonLabel
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 45
        flowTest: 13
        sourceNode: 1
        sourcePort: 34
        destinationNode: 3
        destinationPort: 103
        returnFunction: title
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 46
        flowTest: 13
        sourceNode: 1
        sourcePort: 41
        destinationNode: 3
        destinationPort: 105
        returnFunction: calculateSem
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 47
        flowTest: 13
        sourceNode: 1
        sourcePort: 40
        destinationNode: 3
        destinationPort: 106
        returnFunction: calculateTheta
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 48
        flowTest: 13
        sourceNode: 1
        sourcePort: 38
        destinationNode: 3
        destinationPort: 107
        returnFunction: canGoBack
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 49
        flowTest: 13
        sourceNode: 1
        sourcePort: 39
        destinationNode: 3
        destinationPort: 108
        returnFunction: itemsPerPage
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 50
        flowTest: 13
        sourceNode: 1
        sourcePort: 37
        destinationNode: 3
        destinationPort: 109
        returnFunction: order
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 51
        flowTest: 13
        sourceNode: 1
        sourcePort: 42
        destinationNode: 3
        destinationPort: 110
        returnFunction: backButtonLabel
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 52
        flowTest: 13
        sourceNode: 1
        sourcePort: 43
        destinationNode: 3
        destinationPort: 111
        returnFunction: showPageInfo
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 53
        flowTest: 13
        sourceNode: 1
        sourcePort: 45
        destinationNode: 3
        destinationPort: 112
        returnFunction: exposureLimit
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 54
        flowTest: 13
        sourceNode: 1
        sourcePort: 44
        destinationNode: 3
        destinationPort: 113
        returnFunction: exposureMaxItems
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 55
        flowTest: 13
        sourceNode: 1
        sourcePort: 46
        destinationNode: 3
        destinationPort: 114
        returnFunction: exposureMinSessions
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 56
        flowTest: 13
        sourceNode: 10
        sourcePort: 254
        destinationNode: 5
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 57
        flowTest: 13
        sourceNode: 1
        sourcePort: 47
        destinationNode: 3
        destinationPort: 115
        returnFunction: canSkipItems
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 58
        flowTest: 13
        sourceNode: 1
        sourcePort: 49
        destinationNode: 3
        destinationPort: 117
        returnFunction: d
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 59
        flowTest: 13
        sourceNode: 1
        sourcePort: 50
        destinationNode: 3
        destinationPort: 118
        returnFunction: responseSavedModule
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 60
        flowTest: 13
        sourceNode: 1
        sourcePort: 51
        destinationNode: 3
        destinationPort: 119
        returnFunction: templateResponseModule
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 61
        flowTest: 13
        sourceNode: 5
        sourcePort: 160
        destinationNode: 6
        destinationPort: null
        returnFunction: continue
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 62
        flowTest: 13
        sourceNode: 5
        sourcePort: 161
        destinationNode: 2
        destinationPort: null
        returnFunction: stop
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 63
        flowTest: 13
        sourceNode: 1
        sourcePort: 52
        destinationNode: 3
        destinationPort: 120
        returnFunction: askAllSubGroup
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 64
        flowTest: 13
        sourceNode: 1
        sourcePort: 48
        destinationNode: 3
        destinationPort: 116
        returnFunction: stopCheckModule
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 65
        flowTest: 13
        sourceNode: 1
        sourcePort: 53
        destinationNode: 3
        destinationPort: 121
        returnFunction: subGroupItemThreshold
        defaultReturnFunction: '1'
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: 8b4d1c5dead757f13e4be75f46e1b2ff3e6cbddf
  -
    class_name: TestWizard
    id: 6
    name: groupedAssessmentTest2
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 6
        title: Items
        description: 'Test items collection'
        orderNum: 0
        colsNum: 0
        wizard: 6
        params:
          -
            class_name: TestWizardParam
            id: 29
            label: 'Ask All Sub-Grouped Items?'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 113
            name: askAllSubGroup
            wizardStep: 6
            stepTitle: Items
            order: 16
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 30
            label: 'Can Go Back?'
            description: 'Check box to enable the user to go back to items that have already been answered and change their response(s)'
            hideCondition: 'values.order == "cat"'
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 117
            name: canGoBack
            wizardStep: 6
            stepTitle: Items
            order: 40
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 31
            label: 'Can Skip Items?'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 118
            name: canSkipItems
            wizardStep: 6
            stepTitle: Items
            order: 60
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 32
            label: 'Exposure - Limit'
            description: ''
            hideCondition: 'values.exposureMaxItems == "0"'
            type: 0
            passableThroughUrl: '0'
            value: '0.7'
            testVariable: 121
            name: exposureLimit
            wizardStep: 6
            stepTitle: Items
            order: 52
            wizard: 6
            definition:
              defvalue: '0.7'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 33
            label: 'Exposure - Max Excluded Items Number'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 122
            name: exposureMaxItems
            wizardStep: 6
            stepTitle: Items
            order: 50
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 34
            label: 'Exposure - Min Session Number'
            description: ''
            hideCondition: 'values.exposureMaxItems == "0"'
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 123
            name: exposureMinSessions
            wizardStep: 6
            stepTitle: Items
            order: 51
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 35
            label: 'Flat Table'
            description: ''
            hideCondition: 'values.itemBankType != "flatTable"'
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 127
            name: itemBankFlatTable
            wizardStep: 6
            stepTitle: Items
            order: 10
            wizard: 6
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: question
                  label: Question
                  tooltip: ''
                -
                  name: trait
                  label: Trait
                  tooltip: ''
                -
                  name: fixedIndex
                  label: 'Fixed Index'
                  tooltip: ''
                -
                  name: p1
                  label: 'Parameter #1'
                  tooltip: ''
                -
                  name: responseLabel1
                  label: 'Response Label #1'
                  tooltip: ''
                -
                  name: responseValue1
                  label: 'Response Value #1'
                  tooltip: ''
                -
                  name: responseScore1
                  label: 'Response Score #1'
                  tooltip: ''
                -
                  name: responseTrait1
                  label: 'Response Trait #1'
                  tooltip: ''
                -
                  name: type
                  label: 'Item type'
                  tooltip: ''
                -
                  name: gracelyScaleShow
                  label: 'Gracely Scale Show'
                  tooltip: Optional.
                -
                  name: painMannequinGender
                  label: 'Pain Mannequin Gender'
                  tooltip: Optional.
                -
                  name: optionsRandomOrder
                  label: 'Options Random Order'
                  tooltip: Optional.
                -
                  name: painMannequinAreaMultiMarks
                  label: 'Pain Mannequin Allow Multiple Marks for Area'
                  tooltip: Optional.
                -
                  name: skippable
                  label: Skippable
                  tooltip: Optional.
                -
                  name: instructions
                  label: Instructions
                  tooltip: Optional.
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 36
            label: 'How Many Questions to Ask Per Group?'
            description: ''
            hideCondition: 'values.askSubGroupInOrder == "1"'
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 167
            name: subGroupItemThreshold
            wizardStep: 6
            stepTitle: Items
            order: 17
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 37
            label: 'Item Bank Extra Fields'
            description: ''
            hideCondition: 'values.itemBankType != "table" && values.itemBankType != "flatTable"'
            type: 10
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 130
            name: itemBankTableExtraFields
            wizardStep: 6
            stepTitle: Items
            order: 20
            wizard: 6
            definition:
              element:
                type: 9
                definition:
                  fields:
                    -
                      name: name
                      type: 0
                      label: Name
                      definition:
                        placeholder: 0
                    -
                      name: sensitive
                      type: 4
                      label: Sensitive
                      definition:
                        placeholder: 0
                  placeholder: 0
          -
            class_name: TestWizardParam
            id: 38
            label: Items
            description: 'Directly input your item bank'
            hideCondition: 'values.itemBankType != "direct"'
            type: 10
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 128
            name: itemBankItems
            wizardStep: 6
            stepTitle: Items
            order: 10
            wizard: 6
            definition:
              element:
                type: 9
                definition:
                  fields:
                    -
                      name: id
                      type: 0
                      label: Id
                      definition:
                        placeholder: 0
                    -
                      name: question
                      type: 2
                      label: Question
                      definition:
                        placeholder: 0
                    -
                      name: responseOptions
                      type: 9
                      label: 'Response Options'
                      definition:
                        fields:
                          -
                            name: type
                            type: 3
                            label: Type
                            order: 0
                            definition:
                              options:
                                -
                                  label: Open
                                  order: 1
                                  value: open
                                -
                                  label: Options
                                  order: 2
                                  value: options
                                -
                                  label: 'Pain Mannequin'
                                  order: 3
                                  value: painMannequin
                                -
                                  label: 'Gracely Scale'
                                  order: 0
                                  value: gracelyScale
                              defvalue: options
                              placeholder: 0
                          -
                            name: optionsRandomOrder
                            type: 4
                            label: 'Options Random Order'
                            order: 11
                            definition:
                              defvalue: '1'
                              placeholder: 0
                            hideCondition: 'parent.type != "options"'
                          -
                            name: options
                            type: 10
                            label: Options
                            order: 10
                            definition:
                              element:
                                type: 9
                                definition:
                                  fields:
                                    -
                                      name: label
                                      type: 2
                                      label: Label
                                      order: 1
                                      definition:
                                        placeholder: 0
                                    -
                                      name: value
                                      type: 0
                                      label: Value
                                      order: 0
                                      definition:
                                        placeholder: 0
                                  placeholder: 0
                              placeholder: 0
                            hideCondition: 'parent.type != "options"'
                          -
                            name: painMannequinGender
                            type: 3
                            label: 'Mannequin Gender'
                            order: 20
                            definition:
                              options:
                                -
                                  label: Male
                                  value: male
                                -
                                  label: Female
                                  value: female
                                -
                                  label: Custom
                                  value: custom
                              defvalue: female
                              placeholder: 0
                            hideCondition: 'parent.type != "painMannequin"'
                          -
                            name: painMannequinGenderValue
                            type: 0
                            label: 'Mannequin Gender Value'
                            order: 21
                            definition:
                              defvalue: male
                              placeholder: 0
                            hideCondition: 'parent.type != "painMannequin" || parent.painMannequinGender != "custom"'
                          -
                            name: defaultScore
                            type: 0
                            label: 'Default Score'
                            order: 1
                            definition:
                              defvalue: '0'
                              placeholder: 0
                          -
                            name: scoreMap
                            type: 10
                            label: 'Score Map'
                            order: 2
                            definition:
                              element:
                                type: 9
                                definition:
                                  fields:
                                    -
                                      name: value
                                      type: 0
                                      label: Value
                                      definition:
                                        placeholder: 0
                                    -
                                      name: score
                                      type: 0
                                      label: Score
                                      definition:
                                        defvalue: '0'
                                        placeholder: 0
                                    -
                                      name: trait
                                      type: 0
                                      label: Trait
                                      definition:
                                        placeholder: 0
                                  placeholder: 0
                              placeholder: 0
                          -
                            name: gracelyScaleShow
                            type: 3
                            label: Show
                            order: 30
                            definition:
                              options:
                                -
                                  label: Both
                                  order: 0
                                  value: both
                                -
                                  label: Unpleasantness
                                  order: 1
                                  value: unpleasantness
                                -
                                  label: Intensity
                                  order: 2
                                  value: intensity
                              defvalue: both
                              placeholder: 0
                            hideCondition: 'parent.type != "gracelyScale"'
                          -
                            name: painMannequinAreaMultiMarks
                            type: 4
                            label: 'Allow Multiple Marks on Area'
                            order: 22
                            definition:
                              defvalue: '1'
                              placeholder: 0
                            hideCondition: 'parent.type != "painMannequin"'
                        element:
                          type: 9
                          definition:
                            fields:
                              -
                                name: value
                                type: 0
                                label: Value
                                definition:
                                  placeholder: 0
                              -
                                name: label
                                type: 2
                                label: Label
                                definition:
                                  placeholder: 0
                            placeholder: 0
                        placeholder: 0
                    -
                      name: trait
                      type: 0
                      label: Trait
                      definition:
                        placeholder: 0
                    -
                      name: fixedIndex
                      type: 0
                      label: 'Fixed Index'
                      definition:
                        defvalue: ''
                        placeholder: 0
                    -
                      name: p1
                      type: 0
                      label: p1
                      definition:
                        defvalue: '0'
                        placeholder: 0
                    -
                      name: p2
                      type: 0
                      label: p2
                      definition:
                        defvalue: '0'
                        placeholder: 0
                    -
                      name: p3
                      type: 0
                      label: p3
                      definition:
                        defvalue: '0'
                        placeholder: 0
                    -
                      name: p4
                      type: 0
                      label: p4
                      definition:
                        defvalue: '0'
                        placeholder: 0
                    -
                      name: p5
                      type: 0
                      label: p5
                      definition:
                        defvalue: '0'
                        placeholder: 0
                    -
                      name: p6
                      type: 0
                      label: p6
                      definition:
                        defvalue: '0'
                        placeholder: 0
                    -
                      name: p7
                      type: 0
                      label: p7
                      definition:
                        defvalue: '0'
                        placeholder: 0
                    -
                      name: p8
                      type: 0
                      label: p8
                      definition:
                        defvalue: '0'
                        placeholder: 0
                    -
                      name: p9
                      type: 0
                      label: p9
                      definition:
                        defvalue: '0'
                        placeholder: 0
                    -
                      name: skippable
                      type: 4
                      label: Skippable
                      definition:
                        placeholder: 0
                    -
                      name: instructions
                      type: 2
                      label: Instructions
                      definition:
                        placeholder: 0
                  placeholder: 0
          -
            class_name: TestWizardParam
            id: 39
            label: 'Items Per Page'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '1'
            testVariable: 140
            name: itemsPerPage
            wizardStep: 6
            stepTitle: Items
            order: 30
            wizard: 6
            definition:
              defvalue: '1'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 40
            label: Order
            description: |
              <p>
              	Select the order in which to show items:
              </p>
              
              <ul>
              	<li>
              		<strong>
              			Manual 
              		</strong>
              		 - item order will be determined by sorted values in the  
              		<strong>
              			fixedIndex  
              		</strong>
              		column
              	</li>
              	<li>
              		<strong>
              			Random  
              		</strong>
              		- items will be shown in a random order
              	</li>
              	<li>
              		<strong>
              			CAT 
              		</strong>
              		 - CAT next item algorithm will be used to determine next item
              	</li>
              </ul>
              
            hideCondition: ''
            type: 3
            passableThroughUrl: '0'
            value: manual
            testVariable: 149
            name: order
            wizardStep: 6
            stepTitle: Items
            order: 15
            wizard: 6
            definition:
              options:
                -
                  label: Manual
                  order: ''
                  value: manual
                -
                  label: Random
                  order: ''
                  value: random
                -
                  label: CAT
                  value: cat
              defvalue: manual
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 41
            label: Table
            description: 'Map columns in data table to item bank'
            hideCondition: 'values.itemBankType != "table"'
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 129
            name: itemBankTable
            wizardStep: 6
            stepTitle: Items
            order: 10
            wizard: 6
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: question
                  label: Question
                  tooltip: ''
                -
                  name: responseOptions
                  label: 'Response Options'
                  tooltip: ''
                -
                  name: trait
                  label: Trait
                  tooltip: ''
                -
                  name: fixedIndex
                  label: 'Fixed Index'
                  tooltip: ''
                -
                  name: p1
                  label: 'Item Parameter #1'
                  tooltip: ''
                -
                  name: skippable
                  label: Skippable
                  tooltip: Optional.
                -
                  name: instructions
                  label: Instructions
                  tooltip: Optional.
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 42
            label: Type
            description: |
              <p>
              	Select where to get items from:
              </p>
              
              <ul>
              	<li>
              		<strong>
              			Direct  
              		</strong>
              		- declare item bank at the node level
              	</li>
              	<li>
              		<strong>
              			Table  
              		</strong>
              		- use a data table as the item bank; contains response options column (JSON object)
              	</li>
              	<li>
              		<strong>
              			Flat Table 
              		</strong>
              		 - use a data table as the item bank; response options column is split into multiple columns (no JSON)
              	</li>
              </ul>
              
            hideCondition: ''
            type: 3
            passableThroughUrl: '0'
            value: direct
            testVariable: 131
            name: itemBankType
            wizardStep: 6
            stepTitle: Items
            order: 0
            wizard: 6
            definition:
              options:
                -
                  label: Direct
                  order: ''
                  value: direct
                -
                  label: Table
                  order: ''
                  value: table
                -
                  label: 'Flat Table'
                  value: flatTable
              defvalue: direct
              placeholder: 0
      -
        class_name: TestWizardStep
        id: 7
        title: 'Stopping Rules'
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 6
        params:
          -
            class_name: TestWizardParam
            id: 43
            label: 'Limit Number of Items'
            description: 'Maximum number of items to show in the test. 0 = no limit.'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 132
            name: itemNumLimit
            wizardStep: 7
            stepTitle: 'Stopping Rules'
            order: 0
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 44
            label: 'Limit Time Per Item'
            description: 'Time limit for each item, in seconds. 0 = no limit.'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 137
            name: itemTimeLimit
            wizardStep: 7
            stepTitle: 'Stopping Rules'
            order: 0
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 45
            label: 'Limit Total Test Time'
            description: 'Total test time limit in seconds. 0 = no limit.'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 170
            name: testTimeLimit
            wizardStep: 7
            stepTitle: 'Stopping Rules'
            order: 1
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 46
            label: 'Minimum Accuracy'
            description: 'Minimum accuracy value that must be reached before stopping the test. 0 = no minimum accuracy.'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 142
            name: minAccuracy
            wizardStep: 7
            stepTitle: 'Stopping Rules'
            order: 0
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 47
            label: 'Minimum Accuracy - Minimum Items'
            description: ''
            hideCondition: 'values.minAccuracy == 0'
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 143
            name: minAccuracyMinItems
            wizardStep: 7
            stepTitle: 'Stopping Rules'
            order: 0
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 48
            label: 'Require Sufficient Time Per Item'
            description: 'Check this box to prevent the test from showing more items when the total test time remaining is less than the time limit per item.'
            hideCondition: 'values.testTimeLimit == 0 || values.itemTimeLimit == 0'
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 136
            name: itemTimeFullRequired
            wizardStep: 7
            stepTitle: 'Stopping Rules'
            order: 0
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 49
            label: 'Test Time Limit Type'
            description: ''
            hideCondition: ''
            type: 3
            passableThroughUrl: '0'
            value: startedAgo
            testVariable: 172
            name: testTimeLimitType
            wizardStep: 7
            stepTitle: 'Stopping Rules'
            order: 0
            wizard: 6
            definition:
              options:
                -
                  label: 'Started Ago'
                  value: startedAgo
                -
                  label: 'Time Spent'
                  value: timeSpent
              defvalue: startedAgo
              placeholder: 0
      -
        class_name: TestWizardStep
        id: 8
        title: 'CAT Options'
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 6
        params:
          -
            class_name: TestWizardParam
            id: 50
            label: 'Content Balancing Settings'
            description: |
              <p>
              	Each entry in the table consist of two fields:
              </p>
              
              <ul>
              	<li>
              		<strong>
              			Group Name 
              		</strong>
              		- trait name
              	</li>
              	<li>
              		<strong>
              			Group Proportion 
              		</strong>
              		 - numerical value specifying the proportion of items from each trait to be used by the next item selection algorithm
              	</li>
              </ul>
              
              <p>
              	<em>
              		e.g. group1_proportion=1, group2_proportion=2 will mean that the next item algorithm will try to show twice as many items from group2 as from group1 
              	</em>
              </p>
              
            hideCondition: ''
            type: 10
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 119
            name: contentBalancing
            wizardStep: 8
            stepTitle: 'CAT Options'
            order: 40
            wizard: 6
            definition:
              element:
                type: 9
                definition:
                  fields:
                    -
                      name: name
                      type: 0
                      label: 'Group Name'
                      definition:
                        placeholder: 0
                    -
                      name: proportion
                      type: 0
                      label: 'Group Proportion'
                      definition:
                        defvalue: '0'
                        placeholder: 0
                  placeholder: 0
          -
            class_name: TestWizardParam
            id: 51
            label: D
            description: 'numeric: the metric constant. Default is D=1 (for logistic metric); D=1.702 yields approximately the normal metric'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '1'
            testVariable: 120
            name: d
            wizardStep: 8
            stepTitle: 'CAT Options'
            order: 30
            wizard: 6
            definition:
              defvalue: '1'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 52
            label: Model
            description: ''
            hideCondition: ''
            type: 3
            passableThroughUrl: '0'
            value: dichotomous
            testVariable: 144
            name: model
            wizardStep: 8
            stepTitle: 'CAT Options'
            order: 0
            wizard: 6
            definition:
              options:
                -
                  label: dichotomous
                  value: dichotomous
                -
                  label: GRM
                  value: GRM
                -
                  label: MGRM
                  value: MGRM
                -
                  label: PCM
                  value: PCM
                -
                  label: GPCM
                  value: GPCM
                -
                  label: RSM
                  value: RSM
                -
                  label: NRM
                  value: NRM
              defvalue: dichotomous
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 53
            label: 'Next item criterion'
            description: ''
            hideCondition: ''
            type: 3
            passableThroughUrl: '0'
            value: MFI
            testVariable: 146
            name: nextItemCriterion
            wizardStep: 8
            stepTitle: 'CAT Options'
            order: 1
            wizard: 6
            definition:
              options:
                -
                  label: MFI
                  order: 0
                  value: MFI
                -
                  label: bOpt
                  order: 1
                  value: bOpt
                -
                  label: random
                  order: 13
                  value: random
                -
                  label: thOpt
                  order: 2
                  value: thOpt
                -
                  label: MLWI
                  order: 3
                  value: MLWI
                -
                  label: MPWI
                  order: 4
                  value: MPWI
                -
                  label: MEI
                  order: 5
                  value: MEI
                -
                  label: MEPV
                  order: 6
                  value: MEPV
                -
                  label: progressive
                  order: 7
                  value: progressive
                -
                  label: proportional
                  order: 8
                  value: proportional
                -
                  label: KL
                  order: 9
                  value: KL
                -
                  label: KLP
                  order: 10
                  value: KLP
                -
                  label: GDI
                  order: 11
                  value: GDI
                -
                  label: GDIP
                  order: 12
                  value: GDIP
              defvalue: MFI
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 54
            label: 'Next item randomesque'
            description: 'The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked up. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '1'
            testVariable: 148
            name: nextItemRandomesque
            wizardStep: 8
            stepTitle: 'CAT Options'
            order: 1
            wizard: 6
            definition:
              defvalue: '1'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 55
            label: 'Scoring method'
            description: 'Ability estimator'
            hideCondition: ''
            type: 3
            passableThroughUrl: '0'
            value: BM
            testVariable: 158
            name: scoringMethod
            wizardStep: 8
            stepTitle: 'CAT Options'
            order: 2
            wizard: 6
            definition:
              options:
                -
                  label: BM
                  value: BM
                -
                  label: ML
                  value: ML
                -
                  label: WL
                  value: WL
                -
                  label: EAP
                  value: EAP
              defvalue: BM
              placeholder: 0
      -
        class_name: TestWizardStep
        id: 9
        title: Responses
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 6
        params:
          -
            class_name: TestWizardParam
            id: 56
            label: 'Calculate SEM'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 115
            name: calculateSem
            wizardStep: 9
            stepTitle: Responses
            order: 20
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 57
            label: 'Calculate Theta'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 116
            name: calculateTheta
            wizardStep: 9
            stepTitle: Responses
            order: 10
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 58
            label: 'Require Response'
            description: 'Check to require user to answer all items before proceeding to next page.'
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 152
            name: responseRequired
            wizardStep: 9
            stepTitle: Responses
            order: 0
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 59
            label: 'Response Bank'
            description: 'Specify where to save responses to items. Leave empty to not store responses.'
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 151
            name: responseBank
            wizardStep: 9
            stepTitle: Responses
            order: 0
            wizard: 6
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: item_id
                  label: 'Item Id'
                  tooltip: ''
                -
                  name: score
                  label: Score
                  tooltip: ''
                -
                  name: timeTaken
                  label: 'Time Taken'
                  tooltip: ''
                -
                  name: session_id
                  label: 'Session Id'
                  tooltip: ''
                -
                  name: theta
                  label: Theta
                  tooltip: ''
                -
                  name: sem
                  label: SEM
                  tooltip: ''
                -
                  name: response
                  label: Response
                  tooltip: ''
                -
                  name: trait
                  label: Trait
                  tooltip: ''
                -
                  name: skipped
                  label: Skipped
                  tooltip: Optional.
              placeholder: 0
      -
        class_name: TestWizardStep
        id: 10
        title: Modules
        description: 'Test modules. Each module is a separate test that can use specific input variables and must return specific return variables.'
        orderNum: 0
        colsNum: 0
        wizard: 6
        params:
          -
            class_name: TestWizardParam
            id: 60
            label: 'Item Bank Filter Module'
            description: ''
            hideCondition: ''
            type: 8
            passableThroughUrl: '0'
            value: ''
            testVariable: 126
            name: itemBankFilterModule
            wizardStep: 10
            stepTitle: Modules
            order: 0
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 61
            label: 'Item Template Params Module'
            description: |
              <p>
              	Sets exposed item template parameters.
              </p>
              
              <p>
              	Accepts following inputs variables:
              </p>
              
              <ul>
              	<li>
              		items
              	</li>
              	<li>
              		itemsAdministered
              	</li>
              	<li>
              		params
              	</li>
              	<li>
              		scores
              	</li>
              	<li>
              		sem
              	</li>
              	<li>
              		settings
              	</li>
              	<li>
              		theta
              	</li>
              	<li>
              		traitScores
              	</li>
              </ul>
              
              <p>
              	Requires following return variables:
              </p>
              
              <ul>
              	<li>
              		params
              	</li>
              </ul>
              
            hideCondition: ''
            type: 8
            passableThroughUrl: '0'
            value: ''
            testVariable: 135
            name: itemTemplateParamsModule
            wizardStep: 10
            stepTitle: Modules
            order: 10
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 62
            label: 'Next Item Module'
            description: ''
            hideCondition: ''
            type: 8
            passableThroughUrl: '0'
            value: ''
            testVariable: 147
            name: nextItemModule
            wizardStep: 10
            stepTitle: Modules
            order: 20
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 63
            label: 'Response Saved Module'
            description: ''
            hideCondition: ''
            type: 8
            passableThroughUrl: '0'
            value: ''
            testVariable: 154
            name: responseSavedModule
            wizardStep: 10
            stepTitle: Modules
            order: 40
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 64
            label: 'Response Score Module'
            description: ''
            hideCondition: ''
            type: 8
            passableThroughUrl: '0'
            value: ''
            testVariable: 155
            name: responseScoreModule
            wizardStep: 10
            stepTitle: Modules
            order: 30
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 65
            label: 'Stop Check Module'
            description: ''
            hideCondition: ''
            type: 8
            passableThroughUrl: '0'
            value: ''
            testVariable: 165
            name: stopCheckModule
            wizardStep: 10
            stepTitle: Modules
            order: 50
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 66
            label: 'Template Response Module'
            description: ''
            hideCondition: ''
            type: 8
            passableThroughUrl: '0'
            value: ''
            testVariable: 168
            name: templateResponseModule
            wizardStep: 10
            stepTitle: Modules
            order: 60
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
      -
        class_name: TestWizardStep
        id: 11
        title: Session
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 6
        params:
          -
            class_name: TestWizardParam
            id: 67
            label: 'Session Resuming'
            description: |
              Requirements:
              <ul>
              	<li>passed session</li>
              	<li>response bank</li>
              </ul>
              
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 161
            name: sessionResuming
            wizardStep: 11
            stepTitle: Session
            order: 0
            wizard: 6
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 68
            label: 'Session Table'
            description: ''
            hideCondition: 'values.sessionResuming == 0'
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 162
            name: sessionTable
            wizardStep: 11
            stepTitle: Session
            order: 0
            wizard: 6
            definition:
              cols:
                -
                  name: state
                  label: 'Session state'
                  tooltip: ''
              placeholder: 0
      -
        class_name: TestWizardStep
        id: 12
        title: Templates
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 6
        params:
          -
            class_name: TestWizardParam
            id: 69
            label: 'Back Button Label'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: Back
            testVariable: 114
            name: backButtonLabel
            wizardStep: 12
            stepTitle: Templates
            order: 5
            wizard: 6
            definition:
              defvalue: Back
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 70
            label: Footer
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            testVariable: 124
            name: footer
            wizardStep: 12
            stepTitle: Templates
            order: 11
            wizard: 6
            definition:
              defvalue: |
                Created with 
                <a href="http://www.concertoplatform.com" target="_blank">
                	Concerto Platform
                </a>
                
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 71
            label: Instructions
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: ''
            testVariable: 125
            name: instructions
            wizardStep: 12
            stepTitle: Templates
            order: 4
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 72
            label: 'Item Template'
            description: 'Select which template to use for CAT item page design. This field will be ignored if Item Template HTML parameter is set (and not empty).'
            hideCondition: ''
            type: 5
            passableThroughUrl: '0'
            value: test
            testVariable: 133
            name: itemTemplate
            wizardStep: 12
            stepTitle: Templates
            order: 1
            wizard: 6
            definition:
              defvalue: test
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 73
            label: 'Item Template HTML'
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: ''
            testVariable: 134
            name: itemTemplateHtml
            wizardStep: 12
            stepTitle: Templates
            order: 0
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 74
            label: 'Logo URL'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 141
            name: logo
            wizardStep: 12
            stepTitle: Templates
            order: 3
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 75
            label: 'Next Button Label'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: Next
            testVariable: 145
            name: nextButtonLabel
            wizardStep: 12
            stepTitle: Templates
            order: 6
            wizard: 6
            definition:
              defvalue: Next
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 76
            label: 'Response validation alert'
            description: 'Specify the message shown to users when no answer is given to a required item.'
            hideCondition: 'values.responseRequired == 0'
            type: 0
            passableThroughUrl: '0'
            value: 'Please answer all items on this page'
            testVariable: 153
            name: responseRequiredAlert
            wizardStep: 12
            stepTitle: Templates
            order: 10
            wizard: 6
            definition:
              defvalue: 'Please answer all items on this page'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 77
            label: 'Show Page Info'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '1'
            testVariable: 163
            name: showPageInfo
            wizardStep: 12
            stepTitle: Templates
            order: 7
            wizard: 6
            definition:
              defvalue: '1'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 78
            label: Title
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 174
            name: title
            wizardStep: 12
            stepTitle: Templates
            order: 2
            wizard: 6
            definition:
              defvalue: ''
              placeholder: 0
    test: 13
    groups: ''
    starterContent: false
    hash: a5e0740b765f4ec08f4990f194e48134548352b4
  -
    class_name: Test
    id: 14
    name: groupedAssessment2
    accessibility: 0
    archived: '0'
    visibility: 0
    type: 1
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 179
        name: askAllSubGroup
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 113
      -
        class_name: TestVariable
        id: 180
        name: backButtonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Back
        test: 14
        parentVariable: 114
      -
        class_name: TestVariable
        id: 181
        name: calculateSem
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 115
      -
        class_name: TestVariable
        id: 182
        name: calculateTheta
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 116
      -
        class_name: TestVariable
        id: 183
        name: canGoBack
        type: 0
        description: 'Check box to enable the user to go back to items that have already been answered and change their response(s)'
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 117
      -
        class_name: TestVariable
        id: 184
        name: canSkipItems
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 118
      -
        class_name: TestVariable
        id: 185
        name: contentBalancing
        type: 0
        description: |
          <p>
          	Each entry in the table consist of two fields:
          </p>
          
          <ul>
          	<li>
          		<strong>
          			Group Name 
          		</strong>
          		- trait name
          	</li>
          	<li>
          		<strong>
          			Group Proportion 
          		</strong>
          		 - numerical value specifying the proportion of items from each trait to be used by the next item selection algorithm
          	</li>
          </ul>
          
          <p>
          	<em>
          		e.g. group1_proportion=1, group2_proportion=2 will mean that the next item algorithm will try to show twice as many items from group2 as from group1 
          	</em>
          </p>
          
        passableThroughUrl: '0'
        value: '[]'
        test: 14
        parentVariable: 119
      -
        class_name: TestVariable
        id: 186
        name: d
        type: 0
        description: 'numeric: the metric constant. Default is D=1 (for logistic metric); D=1.702 yields approximately the normal metric'
        passableThroughUrl: '0'
        value: '1'
        test: 14
        parentVariable: 120
      -
        class_name: TestVariable
        id: 187
        name: exposureLimit
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0.7'
        test: 14
        parentVariable: 121
      -
        class_name: TestVariable
        id: 188
        name: exposureMaxItems
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 122
      -
        class_name: TestVariable
        id: 189
        name: exposureMinSessions
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 123
      -
        class_name: TestVariable
        id: 190
        name: footer
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: |
          Created with 
          <a href="http://www.concertoplatform.com" target="_blank">
          	Concerto Platform
          </a>
          
        test: 14
        parentVariable: 124
      -
        class_name: TestVariable
        id: 191
        name: instructions
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 125
      -
        class_name: TestVariable
        id: 192
        name: itemBankFilterModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 126
      -
        class_name: TestVariable
        id: 193
        name: itemBankFlatTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 14
        parentVariable: 127
      -
        class_name: TestVariable
        id: 194
        name: itemBankItems
        type: 0
        description: 'Directly input your item bank'
        passableThroughUrl: '0'
        value: '[]'
        test: 14
        parentVariable: 128
      -
        class_name: TestVariable
        id: 195
        name: itemBankTable
        type: 0
        description: 'Map columns in data table to item bank'
        passableThroughUrl: '0'
        value: '[]'
        test: 14
        parentVariable: 129
      -
        class_name: TestVariable
        id: 196
        name: itemBankTableExtraFields
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 14
        parentVariable: 130
      -
        class_name: TestVariable
        id: 197
        name: itemBankType
        type: 0
        description: |
          <p>
          	Select where to get items from:
          </p>
          
          <ul>
          	<li>
          		<strong>
          			Direct  
          		</strong>
          		- declare item bank at the node level
          	</li>
          	<li>
          		<strong>
          			Table  
          		</strong>
          		- use a data table as the item bank; contains response options column (JSON object)
          	</li>
          	<li>
          		<strong>
          			Flat Table 
          		</strong>
          		 - use a data table as the item bank; response options column is split into multiple columns (no JSON)
          	</li>
          </ul>
          
        passableThroughUrl: '0'
        value: direct
        test: 14
        parentVariable: 131
      -
        class_name: TestVariable
        id: 198
        name: itemNumLimit
        type: 0
        description: 'Maximum number of items to show in the test. 0 = no limit.'
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 132
      -
        class_name: TestVariable
        id: 199
        name: itemTemplate
        type: 0
        description: 'Select which template to use for CAT item page design. This field will be ignored if Item Template HTML parameter is set (and not empty).'
        passableThroughUrl: '0'
        value: test
        test: 14
        parentVariable: 133
      -
        class_name: TestVariable
        id: 200
        name: itemTemplateHtml
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 134
      -
        class_name: TestVariable
        id: 201
        name: itemTemplateParamsModule
        type: 0
        description: |
          <p>
          	Sets exposed item template parameters.
          </p>
          
          <p>
          	Accepts following inputs variables:
          </p>
          
          <ul>
          	<li>
          		items
          	</li>
          	<li>
          		itemsAdministered
          	</li>
          	<li>
          		params
          	</li>
          	<li>
          		scores
          	</li>
          	<li>
          		sem
          	</li>
          	<li>
          		settings
          	</li>
          	<li>
          		theta
          	</li>
          	<li>
          		traitScores
          	</li>
          </ul>
          
          <p>
          	Requires following return variables:
          </p>
          
          <ul>
          	<li>
          		params
          	</li>
          </ul>
          
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 135
      -
        class_name: TestVariable
        id: 202
        name: itemTimeFullRequired
        type: 0
        description: 'Check this box to prevent the test from showing more items when the total test time remaining is less than the time limit per item.'
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 136
      -
        class_name: TestVariable
        id: 203
        name: itemTimeLimit
        type: 0
        description: 'Time limit for each item, in seconds. 0 = no limit.'
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 137
      -
        class_name: TestVariable
        id: 204
        name: items
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 138
      -
        class_name: TestVariable
        id: 205
        name: itemsAdministered
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 139
      -
        class_name: TestVariable
        id: 206
        name: itemsPerPage
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 14
        parentVariable: 140
      -
        class_name: TestVariable
        id: 207
        name: logo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 141
      -
        class_name: TestVariable
        id: 208
        name: minAccuracy
        type: 0
        description: 'Minimum accuracy value that must be reached before stopping the test. 0 = no minimum accuracy.'
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 142
      -
        class_name: TestVariable
        id: 209
        name: minAccuracyMinItems
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 143
      -
        class_name: TestVariable
        id: 210
        name: model
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: dichotomous
        test: 14
        parentVariable: 144
      -
        class_name: TestVariable
        id: 211
        name: nextButtonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Next
        test: 14
        parentVariable: 145
      -
        class_name: TestVariable
        id: 212
        name: nextItemCriterion
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: MFI
        test: 14
        parentVariable: 146
      -
        class_name: TestVariable
        id: 213
        name: nextItemModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 147
      -
        class_name: TestVariable
        id: 214
        name: nextItemRandomesque
        type: 0
        description: 'The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked up. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.'
        passableThroughUrl: '0'
        value: '1'
        test: 14
        parentVariable: 148
      -
        class_name: TestVariable
        id: 215
        name: order
        type: 0
        description: |
          <p>
          	Select the order in which to show items:
          </p>
          
          <ul>
          	<li>
          		<strong>
          			Manual 
          		</strong>
          		 - item order will be determined by sorted values in the  
          		<strong>
          			fixedIndex  
          		</strong>
          		column
          	</li>
          	<li>
          		<strong>
          			Random  
          		</strong>
          		- items will be shown in a random order
          	</li>
          	<li>
          		<strong>
          			CAT 
          		</strong>
          		 - CAT next item algorithm will be used to determine next item
          	</li>
          </ul>
          
        passableThroughUrl: '0'
        value: manual
        test: 14
        parentVariable: 149
      -
        class_name: TestVariable
        id: 216
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 150
      -
        class_name: TestVariable
        id: 217
        name: responseBank
        type: 0
        description: 'Specify where to save responses to items. Leave empty to not store responses.'
        passableThroughUrl: '0'
        value: '[]'
        test: 14
        parentVariable: 151
      -
        class_name: TestVariable
        id: 218
        name: responseRequired
        type: 0
        description: 'Check to require user to answer all items before proceeding to next page.'
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 152
      -
        class_name: TestVariable
        id: 219
        name: responseRequiredAlert
        type: 0
        description: 'Specify the message shown to users when no answer is given to a required item.'
        passableThroughUrl: '0'
        value: 'Please answer all items on this page'
        test: 14
        parentVariable: 153
      -
        class_name: TestVariable
        id: 220
        name: responseSavedModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 154
      -
        class_name: TestVariable
        id: 221
        name: responseScoreModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 155
      -
        class_name: TestVariable
        id: 222
        name: responseScores
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 156
      -
        class_name: TestVariable
        id: 223
        name: responses
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 157
      -
        class_name: TestVariable
        id: 224
        name: scoringMethod
        type: 0
        description: 'Ability estimator'
        passableThroughUrl: '0'
        value: BM
        test: 14
        parentVariable: 158
      -
        class_name: TestVariable
        id: 225
        name: sem
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 159
      -
        class_name: TestVariable
        id: 226
        name: session
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 160
      -
        class_name: TestVariable
        id: 227
        name: sessionResuming
        type: 0
        description: |
          Requirements:
          <ul>
          	<li>passed session</li>
          	<li>response bank</li>
          </ul>
          
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 161
      -
        class_name: TestVariable
        id: 228
        name: sessionTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 14
        parentVariable: 162
      -
        class_name: TestVariable
        id: 229
        name: showPageInfo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '1'
        test: 14
        parentVariable: 163
      -
        class_name: TestVariable
        id: 230
        name: startingTheta
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 164
      -
        class_name: TestVariable
        id: 231
        name: stopCheckModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 165
      -
        class_name: TestVariable
        id: 232
        name: stopReason
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 166
      -
        class_name: TestVariable
        id: 233
        name: subGroupItemThreshold
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 167
      -
        class_name: TestVariable
        id: 234
        name: templateResponseModule
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 168
      -
        class_name: TestVariable
        id: 235
        name: testTimeLeft
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 169
      -
        class_name: TestVariable
        id: 236
        name: testTimeLimit
        type: 0
        description: 'Total test time limit in seconds. 0 = no limit.'
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 170
      -
        class_name: TestVariable
        id: 237
        name: testTimeLimitOffset
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 14
        parentVariable: 171
      -
        class_name: TestVariable
        id: 238
        name: testTimeLimitType
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: startedAgo
        test: 14
        parentVariable: 172
      -
        class_name: TestVariable
        id: 239
        name: theta
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 173
      -
        class_name: TestVariable
        id: 240
        name: title
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 14
        parentVariable: 174
      -
        class_name: TestVariable
        id: 241
        name: totalScore
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 175
      -
        class_name: TestVariable
        id: 242
        name: traitScores
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 176
      -
        class_name: TestVariable
        id: 243
        name: traitSem
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 177
      -
        class_name: TestVariable
        id: 244
        name: traitTheta
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 14
        parentVariable: 178
    sourceWizard: 6
    sourceWizardTest: 56
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: 9cb0343b5f991597f1fda7e75f9912999284a108
  -
    class_name: ViewTemplate
    id: 3
    name: test
    description: ''
    accessibility: 2
    archived: '0'
    head: ''
    css: |
      :root {
        --option-bg: #f3f3f3;
        --option-hover-bg: #efefef;
        --option-color: #000000;
        --option-unselected-bg: #ffffd5;
        --error-color: #f32828;
        --accent-light-color: #45b87e;
        --accent-dark-color: #35a26b;
        --font-color-for-accent-bg: #ffffff;
        --main-font-style: 'Open Sans', sans-serif;
        --main-font-color: #000000;
        --main-font-size: 16px;
        --header-bg: #4581b5;
        --header-color: #ffffff;
      }
      
      .body {
        min-height: 100vh;
        position: relative;
        font-size: var(--main-font-size);
        font-family: var(--main-font-style);
        color: var(--main-font-color);
        display: flex;
        flex-direction: column;
      }
      
      .container {
        max-width: 1000px;
        margin: auto;
        padding: 20px;
      }
      
      .main-btn {
        background-color: var(--accent-light-color);
        border: none;
        padding: 10px 20px;
        font-size: var(--main-font-size);
        color: var(--font-color-for-accent-bg);
        display: block;
        min-width: 100px;
        cursor: pointer;
        -webkit-transform: perspective(1px) translateZ(0);
        transform: perspective(1px) translateZ(0);
        -webkit-transition-duration: 0.3s;
        transition-duration: 0.3s;
        -webkit-transition-property: background-color;
        transition-property: background-color;
        outline: none;
      }
      
      .main-btn:hover {
        background-color: var(--accent-dark-color);
      }
      
      .main-btn:disabled {
        background-color: var(--option-hover-bg);
        color: #ccc;
        cursor: default;
      }
      
      .left-btn {
        margin: 0 auto 0 0;
      }
      
      .right-btn {
        margin: 0 0 0 auto;
      }
      
      /*QUESTIONS*/
      .question-text {
        font-weight: 600;
        text-align: center;
        margin: 20px auto;
      }
      
      .question-footer {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin-top: 20px;
      }
      
      .question-page {
        font-size: 14px;
        padding: 10px 0;
      }
      
      .form-error {
        color: var(--error-color);
        font-size: 14px;
        position: relative;
        top: -18px;
        text-align: center;
      }
      
      @media screen and (max-width: 500px) {
        .question-text {
          font-size: 14px;
        }
      
        .main-btn {
          min-width: 0;
        }
      }
      
      .instructions {
        margin: 20px 0px;
      }
      
    js: |
      testRunner.controllerProvider.register("test", function ($scope) {
        $scope.items = testRunner.R.items;
        $scope.canGoBack = testRunner.R.canGoBack == 1;
        $scope.responseRequired = testRunner.R.responseRequired == 1;
        $scope.responseRequiredAlert = testRunner.R.responeRequiredAlert;
        $scope.page = testRunner.R.page;
        $scope.totalPages = testRunner.R.totalPages;
        $scope.pastResponses = testRunner.R.responses;
        $scope.responses = {};
        $scope.nextButtonLabel = testRunner.R.nextButtonLabel;
        $scope.backButtonLabel = testRunner.R.backButtonLabel;
        $scope.showPageInfo = testRunner.R.showPageInfo == 1;
      
        $scope.isFormValid = function() {
          if(!$scope.responseRequired) {
            return true;
          }
          for(let i=0; i<$scope.items.length; i++) {
            let item = $scope.items[i];
            let response = $scope.responses["r" + item.id];
            if(response.skipped) continue;
            if(!response.isValid()) return false;
          }
          return true;
        }
      
        if ($scope.pastResponses) {
          for (let i = 0; i < $scope.pastResponses.length; i++) {
            let response = $scope.pastResponses[i];
            $scope.responses["r" + response.item_id] = typeof response.response === 'object' ? response.response : {
              value: response.response,
              skipped: response.skipped
            };
          }
        }
      
        for (let i = 0; i < $scope.items.length; i++) {
          let item = $scope.items[i];
          if (typeof item.responseOptions === "string") {
            item.responseOptions = JSON.parse(item.responseOptions);
          }
          if (typeof $scope.responses["r" + item.id] === 'undefined') {
            $scope.responses["r" + item.id] = {
              skipped: 0
            };
          }
          
          $scope.responses["r" + item.id].isValid = function() {
            return typeof this.value !== 'undefined' && this.value !== null && this.value !== ""; 
          }
          
          testRunner.addExtraControl("skip"+item.id, function() {
            return $scope.responses["r"+item.id].skipped;
          });
        }
      });
      
    html: |
      <src>
      	{{template:itemOpen,css=FALSE,html=FALSE}}
      	{{template:itemOptions,css=FALSE,html=FALSE}}
      	{{template:itemPainMannequin,css=FALSE,html=FALSE}}
      	{{template:itemGracelyScale,css=FALSE,html=FALSE}}
      </src>
      <div class="body" ng-controller="test">
      	{{template:header}}
      	<div class="questions">
      		<div class="container">
      			<form autocomplete="off" name="form">
      				<div ng-repeat="item in items track by $index">
      					<div class="instructions" ng-html="item.instructions" ng-if="item.instructions && ($index == 0 || items[$index-1].instructions != item.instructions)">
      					</div>
      
      					<div class="question-text" ng-html="item.question">
      					</div>
      
      					<div ng-switch="item.responseOptions.type">
      						<src>
      							<item-open item="item" ng-switch-when="open" response="responses['r' + item.id]" response-required="responseRequired"></item-open>
      							<item-options item="item" ng-switch-when="options" response="responses['r' + item.id]" response-required="responseRequired"></item-options>
      							<item-pain-mannequin item="item" ng-switch-when="painMannequin" response="responses['r' + item.id]" response-required="responseRequired"></item-pain-mannequin>
      							<item-gracely-scale item="item" ng-switch-when="gracelyScale" response="responses['r' + item.id]" response-required="responseRequired"></item-gracely-scale>
      						</src>
      					</div>
      
      					<div ng-show="item.skippable == 1">
      						<input id="skip[[item.id]]" name="skip[[item.id]]" ng-false-value="0" ng-model="responses['r' + item.id].skipped" ng-true-value="1" type="checkbox" />
      						
      						<label for="skip[[item.id]]">
      							skip item 
      						</label>
      					</div>
      
      					<div class="form-error" ng-show="form.response.$error.required && form.response.$dirty">
      						{{responseRequiredAlert}}
      					</div>
      				</div>
      
      				<div class="question-footer">
      					<button class="main-btn left-btn" name="back" ng-show="canGoBack">
      						{{backButtonLabel}}
      					</button>
      					<div class="question-page" ng-show="showPageInfo && page != null && totalPages != null">
      						Page [[page]] / [[totalPages]]
      					</div>
      					<button class="main-btn right-btn" id="submitButton" name="next" ng-disabled="form.$invalid || !isFormValid()">
      						{{nextButtonLabel}}
      					</button>
      				</div>
      			</form>
      		</div>
      	</div>
      	{{template:footer}}
      </div>
      
    groups: ''
    starterContent: true
    hash: 10cf6056f3052e5b0041583f171152025b2fc96a
  -
    class_name: Test
    id: 15
    name: _evalDisplay
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      sanitizedCode = concerto.test.sanitizeSource(code)
      result = eval(parse(text=sanitizedCode))
      
    description: 'Evaluate R code.'
    variables:
      -
        class_name: TestVariable
        id: 245
        name: code
        type: 0
        description: 'Code value is expected to be text.'
        passableThroughUrl: '0'
        value: null
        test: 15
        parentVariable: null
      -
        class_name: TestVariable
        id: 246
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 15
        parentVariable: null
      -
        class_name: TestVariable
        id: 247
        name: result
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 15
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: 15dfcb5d74cc9d7bf80d2907109c7cd514166ff4
  -
    class_name: TestWizard
    id: 7
    name: evalDisplay
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 13
        title: eval
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 7
        params:
          -
            class_name: TestWizardParam
            id: 79
            label: Code
            description: 'R code to execute'
            hideCondition: ''
            type: 11
            passableThroughUrl: '0'
            value: ''
            testVariable: 245
            name: code
            wizardStep: 13
            stepTitle: eval
            order: 0
            wizard: 7
            definition:
              placeholder: 0
    test: 15
    groups: ''
    starterContent: false
    hash: 14be94d4caead4f7f4e0bc331ddb9fdd2ac8c283
  -
    class_name: Test
    id: 16
    name: evalDisplay
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 1
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 248
        name: code
        type: 0
        description: 'R code to execute'
        passableThroughUrl: '0'
        value: null
        test: 16
        parentVariable: 245
      -
        class_name: TestVariable
        id: 249
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 16
        parentVariable: 246
      -
        class_name: TestVariable
        id: 250
        name: result
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 16
        parentVariable: 247
    sourceWizard: 7
    sourceWizardTest: 58
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: false
    hash: 88ad0155f9e812eb0d2cd3311e0a3869ea09de43
  -
    class_name: Test
    id: 17
    name: _showPageDisplay
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      getTemplateParams = function() {
        if(!is.list(templateParams)) {
          templateParams = list()
        }
      
        templateParams$logo = logo
        templateParams$title = title
        templateParams$content = content
        templateParams$buttonLabel = buttonLabel
        templateParams$footer = footer
      
        for(.name in .dynamicInputs) {
          templateParams[[.name]] = get(.name)
        }
        return(templateParams)
      }
      
      numericTimeLimit = as.numeric(timeLimit)
      if(!is.list(cookies)) {
        cookies = list()
      }
      if(!is.list(bgWorkers)) {
        bgWorkers = list()
      }
      response = concerto5:::concerto.template.show(
        template=template, 
        html=if(!is.null(html) && !is.na(html) && html != "") {html} else {""},
        params=getTemplateParams(), 
        timeLimit=if(!is.na(numericTimeLimit)) { numericTimeLimit } else { 0 },
        cookies=cookies,
        bgWorkers=bgWorkers,
        protectedFilesAccess=protectedFilesAccess == 1,
        sessionFilesAccess=sessionFilesAccess == 1
      )
      
      cookies = concerto$lastResponse$cookies
      
      for(.name in .dynamicReturns) {
        if(!is.null(response[[.name]])) {
          assign(.name, response[[.name]])
        }
      }
      if(response$buttonPressed %in% .dynamicBranches) {
        .branch = response$buttonPressed
      } else {
        .branch = "out"
      }
      
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 251
        name: .branch
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 252
        name: bgWorkers
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 253
        name: buttonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Next
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 254
        name: content
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 255
        name: cookies
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 256
        name: cookies
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 257
        name: footer
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 258
        name: html
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 259
        name: logo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 260
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 261
        name: protectedFilesAccess
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 262
        name: response
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 263
        name: sessionFilesAccess
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 264
        name: template
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 265
        name: templateParams
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 266
        name: timeLimit
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 17
        parentVariable: null
      -
        class_name: TestVariable
        id: 267
        name: title
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 17
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: b1c6b8f999e89697f797a121275e974e39648339
  -
    class_name: TestWizard
    id: 8
    name: showPageDisplay
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 14
        title: Template
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 8
        params:
          -
            class_name: TestWizardParam
            id: 80
            label: 'Button Label'
            description: 'Leave blank to disable button.'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: Next
            testVariable: 253
            name: buttonLabel
            wizardStep: 14
            stepTitle: Template
            order: 13
            wizard: 8
            definition:
              defvalue: Next
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 81
            label: Content
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: ''
            testVariable: 254
            name: content
            wizardStep: 14
            stepTitle: Template
            order: 12
            wizard: 8
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 82
            label: Footer
            description: ''
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            testVariable: 257
            name: footer
            wizardStep: 14
            stepTitle: Template
            order: 14
            wizard: 8
            definition:
              defvalue: |
                Created with 
                <a href="http://www.concertoplatform.com" target="_blank">
                	Concerto Platform
                </a>
                
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 83
            label: HTML
            description: 'Directly input HTML to be shown by this node.'
            hideCondition: ''
            type: 2
            passableThroughUrl: '0'
            value: ''
            testVariable: 258
            name: html
            wizardStep: 14
            stepTitle: Template
            order: 0
            wizard: 8
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 84
            label: 'Logo URL'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 259
            name: logo
            wizardStep: 14
            stepTitle: Template
            order: 11
            wizard: 8
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 85
            label: 'Protected Files Access'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 261
            name: protectedFilesAccess
            wizardStep: 14
            stepTitle: Template
            order: 20
            wizard: 8
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 86
            label: 'Session Files Access'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 263
            name: sessionFilesAccess
            wizardStep: 14
            stepTitle: Template
            order: 30
            wizard: 8
            definition:
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 87
            label: 'Time limit'
            description: 'Specify how long the selected Page or HTML should be shown for, in seconds. 0&nbsp;= page does not expire.'
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: '0'
            testVariable: 266
            name: timeLimit
            wizardStep: 14
            stepTitle: Template
            order: 2
            wizard: 8
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 88
            label: Title
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 267
            name: title
            wizardStep: 14
            stepTitle: Template
            order: 10
            wizard: 8
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 89
            label: 'View Template'
            description: 'Select which template should be shown by this node.&nbsp;This field will be ignored if HTML has been entered above.'
            hideCondition: ''
            type: 5
            passableThroughUrl: '0'
            value: page
            testVariable: 264
            name: template
            wizardStep: 14
            stepTitle: Template
            order: 1
            wizard: 8
            definition:
              defvalue: page
              placeholder: 0
    test: 17
    groups: ''
    starterContent: false
    hash: 9d9d71d9c94dfad9c27200e3844508ee7032317d
  -
    class_name: Test
    id: 18
    name: showPageDisplay
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 1
    code: null
    description: 'Shows page to user.'
    variables:
      -
        class_name: TestVariable
        id: 268
        name: .branch
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 18
        parentVariable: 251
      -
        class_name: TestVariable
        id: 269
        name: bgWorkers
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 18
        parentVariable: 252
      -
        class_name: TestVariable
        id: 270
        name: buttonLabel
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: Next
        test: 18
        parentVariable: 253
      -
        class_name: TestVariable
        id: 271
        name: content
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 18
        parentVariable: 254
      -
        class_name: TestVariable
        id: 272
        name: cookies
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 18
        parentVariable: 255
      -
        class_name: TestVariable
        id: 273
        name: cookies
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 18
        parentVariable: 256
      -
        class_name: TestVariable
        id: 274
        name: footer
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: |
          Created with 
          <a href="http://www.concertoplatform.com" target="_blank">
          	Concerto Platform
          </a>
          
        test: 18
        parentVariable: 257
      -
        class_name: TestVariable
        id: 275
        name: html
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 18
        parentVariable: 258
      -
        class_name: TestVariable
        id: 276
        name: logo
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 18
        parentVariable: 259
      -
        class_name: TestVariable
        id: 277
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 18
        parentVariable: 260
      -
        class_name: TestVariable
        id: 278
        name: protectedFilesAccess
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 18
        parentVariable: 261
      -
        class_name: TestVariable
        id: 279
        name: response
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 18
        parentVariable: 262
      -
        class_name: TestVariable
        id: 280
        name: sessionFilesAccess
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 18
        parentVariable: 263
      -
        class_name: TestVariable
        id: 281
        name: template
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 18
        parentVariable: 264
      -
        class_name: TestVariable
        id: 282
        name: templateParams
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 18
        parentVariable: 265
      -
        class_name: TestVariable
        id: 283
        name: timeLimit
        type: 0
        description: 'Time limit in seconds.'
        passableThroughUrl: '0'
        value: '0'
        test: 18
        parentVariable: 266
      -
        class_name: TestVariable
        id: 284
        name: title
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 18
        parentVariable: 267
    sourceWizard: 8
    sourceWizardTest: 60
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: false
    hash: 31cc53c8e559735a8e0ca00d66a2d606b55c60a5
  -
    class_name: Test
    id: 19
    name: createListDisplay
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      result = list()
      if(is.list(sourceList)) {
        result = sourceList
      }
      for(.name in .dynamicInputs) {
          result[.name] = list(get(.name))
      }
      
    description: 'List creation. Dynamic inputs will be used as list elements (input name as list key, input value as list value).'
    variables:
      -
        class_name: TestVariable
        id: 285
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 19
        parentVariable: null
      -
        class_name: TestVariable
        id: 286
        name: result
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 19
        parentVariable: null
      -
        class_name: TestVariable
        id: 287
        name: sourceList
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 19
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: false
    hash: ebff2f2d698c5584433ae8a081299a68d3f0059e
  -
    class_name: Test
    id: 20
    name: _displayResults
    accessibility: 2
    archived: '0'
    visibility: 0
    type: 2
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 288
        name: includeMathJax
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 20
        parentVariable: null
      -
        class_name: TestVariable
        id: 289
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 20
        parentVariable: null
      -
        class_name: TestVariable
        id: 290
        name: questionTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 20
        parentVariable: null
      -
        class_name: TestVariable
        id: 291
        name: responseBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 20
        parentVariable: null
      -
        class_name: TestVariable
        id: 292
        name: session
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 20
        parentVariable: null
      -
        class_name: TestVariable
        id: 293
        name: showAnswers
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 20
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes:
      -
        class_name: TestNode
        id: 11
        title: ''
        type: 1
        posX: 14829
        posY: 15022
        flowTest: 20
        sourceTest: 20
        sourceTestName: _displayResults
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 261
            value: null
            node: 11
            variable: 292
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 262
            value: null
            node: 11
            variable: 291
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: responseBank
            pointer: '0'
            pointerVariable: responseBank
          -
            class_name: TestNodePort
            id: 263
            value: null
            node: 11
            variable: 290
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: questionTable
            pointer: '0'
            pointerVariable: questionTable
          -
            class_name: TestNodePort
            id: 264
            value: null
            node: 11
            variable: 293
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: showAnswers
            pointer: '0'
            pointerVariable: showAnswers
          -
            class_name: TestNodePort
            id: 265
            value: null
            node: 11
            variable: 288
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: includeMathJax
            pointer: '0'
            pointerVariable: addMathJax
      -
        class_name: TestNode
        id: 12
        title: ''
        type: 2
        posX: 16080
        posY: 15095
        flowTest: 20
        sourceTest: 20
        sourceTestName: _displayResults
        sourceTestDescription: ''
        ports: {  }
      -
        class_name: TestNode
        id: 13
        title: getResults
        type: 0
        posX: 15339
        posY: 15084
        flowTest: 20
        sourceTest: 16
        sourceTestName: evalDisplay
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 266
            value: |
              resultHTMLPage = '<div><h1 style="text-align: center">Incorrect Questions</h1>'
              
              getSessionId = function(session) {
                id = 0
                if(!is.null(session) && is.list(session)) {
                  id = session$id
                } else {
                  id = paste0("i",concerto$session$id)
                }
                return(id)
              }
              
              
              getResponses = function() {
                responseBank = fromJSON(settings$responseBank)
                sql = "
              SELECT 
              {{itemIdColumn}} AS item_id,
              {{responseColumn}} AS response,
              {{skippedColumn}} AS skipped,
              {{scoreColumn}} AS score
              FROM {{table}}
              WHERE 
              {{sessionIdColumn}}='{{sessionId}}'
              "
                pastResponses = concerto.table.query(sql, list(
                  table=responseBank$table,
                  responseColumn=responseBank$columns$response,
                  skippedColumn=responseBank$columns$skipped,
                  scoreColumn=responseBank$columns$score,
                  sessionIdColumn=responseBank$columns$session_id,
                  sessionId=getSessionId(settings$session),
                  itemIdColumn=responseBank$columns$item_id
                ))
                if(dim(pastResponses)[1] > 0) {
                  return(pastResponses)
                }
                return(NULL)
              }
              
              getQuestions = function() {
                questionBank = fromJSON(settings$questionTable)
              
                sql = "SELECT 
              id, 
              {{questionColumn}} AS question, 
              {{responseOptionsColumn}} AS responseOptions
              FROM {{table}}
              "
                questions = concerto.table.query(sql, list(
                  table=questionBank$table,
                  questionColumn=questionBank$columns$question,
                  responseOptionsColumn=questionBank$columns$responseOptions
                ))
                if(dim(questions)[1] > 0) {
                  return(questions)
                }
                return(NULL)
              }
              
              #concerto.log('above pastResponses')
              pastResponses = getResponses()
              questions = getQuestions()
              for(i in 1:dim(pastResponses)[1]) {
                response = as.list(pastResponses[i,])
                if(response$score == 0){
                  for(k in 1:dim(questions)[1]) {
                    question = as.list(questions[k,])
                    if(question$id == response$item_id){
              
                      resultHTMLPage = paste(resultHTMLPage,'<div style="border:2px solid grey;margin-bottom:20px;text-align:center;width:80%;margin-left:auto;margin-right:auto;border-radius:5px"><div style="text-align:center">')
                      resultHTMLPage = paste(resultHTMLPage,question$question)
                      resultHTMLPage = paste(resultHTMLPage,'</div>')
              
                      if(settings$showAnswers == 1){
                        resultHTMLPage = paste(resultHTMLPage,'<div style="margin:auto;"><div style="overflow: auto;display: table;margin: auto;">')
                        responseParse = fromJSON(question$responseOptions)
                        for(j in 1:length(responseParse$options)){
                          resultHTMLPage = paste(resultHTMLPage,'<div style="float:left;padding:5px;background-color:grey;border-radius:5px;color:white;margin:5px">')
                          resultHTMLPage = paste(resultHTMLPage,responseParse$options[[j]]$label)
                          resultHTMLPage = paste(resultHTMLPage,'</div>')
                        }
                        resultHTMLPage = paste(resultHTMLPage,'</div></div>')
                      }
                      resultHTMLPage = paste(resultHTMLPage,'</div>')
                    }
                  }
                }
              }
              resultHTMLPage = paste(resultHTMLPage,'</div>')
              concerto.log(pastResponses)
              
            node: 13
            variable: 248
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 267
            value: null
            node: 13
            variable: 250
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 268
            value: '0'
            node: 13
            variable: 249
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 269
            value: ''
            node: 13
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: resultHTMLPage
            pointer: '0'
            pointerVariable: resultHTMLPage
          -
            class_name: TestNodePort
            id: 270
            value: ''
            node: 13
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: settings
            pointer: '1'
            pointerVariable: settings
      -
        class_name: TestNode
        id: 14
        title: ''
        type: 0
        posX: 15644
        posY: 15070
        flowTest: 20
        sourceTest: 18
        sourceTestName: showPageDisplay
        sourceTestDescription: 'Shows page to user.'
        ports:
          -
            class_name: TestNodePort
            id: 271
            value: null
            node: 14
            variable: 269
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: bgWorkers
            pointer: '0'
            pointerVariable: bgWorkers
          -
            class_name: TestNodePort
            id: 272
            value: Next
            node: 14
            variable: 270
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: buttonLabel
            pointer: '0'
            pointerVariable: buttonLabel
          -
            class_name: TestNodePort
            id: 273
            value: ''
            node: 14
            variable: 271
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: content
            pointer: '0'
            pointerVariable: content
          -
            class_name: TestNodePort
            id: 274
            value: null
            node: 14
            variable: 272
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 275
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            node: 14
            variable: 274
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: footer
            pointer: '0'
            pointerVariable: footer
          -
            class_name: TestNodePort
            id: 276
            value: ''
            node: 14
            variable: 275
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: html
            pointer: '0'
            pointerVariable: html
          -
            class_name: TestNodePort
            id: 277
            value: ''
            node: 14
            variable: 276
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: logo
            pointer: '0'
            pointerVariable: logo
          -
            class_name: TestNodePort
            id: 278
            value: '0'
            node: 14
            variable: 278
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: protectedFilesAccess
            pointer: '0'
            pointerVariable: protectedFilesAccess
          -
            class_name: TestNodePort
            id: 279
            value: '0'
            node: 14
            variable: 280
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionFilesAccess
            pointer: '0'
            pointerVariable: sessionFilesAccess
          -
            class_name: TestNodePort
            id: 280
            value: page_mathjax
            node: 14
            variable: 281
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: template
            pointer: '0'
            pointerVariable: template
          -
            class_name: TestNodePort
            id: 281
            value: null
            node: 14
            variable: 282
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: templateParams
            pointer: '0'
            pointerVariable: templateParams
          -
            class_name: TestNodePort
            id: 282
            value: '0'
            node: 14
            variable: 283
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: timeLimit
            pointer: '0'
            pointerVariable: timeLimit
          -
            class_name: TestNodePort
            id: 283
            value: ''
            node: 14
            variable: 284
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: title
            pointer: '0'
            pointerVariable: title
          -
            class_name: TestNodePort
            id: 284
            value: null
            node: 14
            variable: 268
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 285
            value: null
            node: 14
            variable: 273
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 286
            value: null
            node: 14
            variable: 279
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: response
            pointer: '0'
            pointerVariable: response
          -
            class_name: TestNodePort
            id: 287
            value: '0'
            node: 14
            variable: 277
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
      -
        class_name: TestNode
        id: 15
        title: ''
        type: 0
        posX: 15032
        posY: 15058
        flowTest: 20
        sourceTest: 19
        sourceTestName: createListDisplay
        sourceTestDescription: 'List creation. Dynamic inputs will be used as list elements (input name as list key, input value as list value).'
        ports:
          -
            class_name: TestNodePort
            id: 288
            value: null
            node: 15
            variable: 287
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sourceList
            pointer: '0'
            pointerVariable: sourceList
          -
            class_name: TestNodePort
            id: 289
            value: null
            node: 15
            variable: 286
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: result
            pointer: '1'
            pointerVariable: settings
          -
            class_name: TestNodePort
            id: 290
            value: '0'
            node: 15
            variable: 285
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 291
            value: ''
            node: 15
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: questionTable
            pointer: '0'
            pointerVariable: questionTable
          -
            class_name: TestNodePort
            id: 292
            value: ''
            node: 15
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: responseBank
            pointer: '0'
            pointerVariable: responseBank
          -
            class_name: TestNodePort
            id: 293
            value: ''
            node: 15
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 294
            value: ''
            node: 15
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: includeMathJax
            pointer: '0'
            pointerVariable: includeMathJax
          -
            class_name: TestNodePort
            id: 295
            value: ''
            node: 15
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: showAnswers
            pointer: '0'
            pointerVariable: showAnswers
      -
        class_name: TestNode
        id: 16
        title: ''
        type: 0
        posX: 15720
        posY: 15261
        flowTest: 20
        sourceTest: 10
        sourceTestName: showPage
        sourceTestDescription: 'Shows page to user.'
        ports:
          -
            class_name: TestNodePort
            id: 296
            value: Next
            node: 16
            variable: 92
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: buttonLabel
            pointer: '0'
            pointerVariable: buttonLabel
          -
            class_name: TestNodePort
            id: 297
            value: ''
            node: 16
            variable: 93
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: content
            pointer: '0'
            pointerVariable: content
          -
            class_name: TestNodePort
            id: 298
            value: null
            node: 16
            variable: 94
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 299
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            node: 16
            variable: 96
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: footer
            pointer: '0'
            pointerVariable: footer
          -
            class_name: TestNodePort
            id: 300
            value: ''
            node: 16
            variable: 97
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: html
            pointer: '0'
            pointerVariable: html
          -
            class_name: TestNodePort
            id: 301
            value: ''
            node: 16
            variable: 98
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: logo
            pointer: '0'
            pointerVariable: logo
          -
            class_name: TestNodePort
            id: 302
            value: page_mathjax
            node: 16
            variable: 103
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: template
            pointer: '0'
            pointerVariable: template
          -
            class_name: TestNodePort
            id: 303
            value: null
            node: 16
            variable: 104
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: templateParams
            pointer: '0'
            pointerVariable: templateParams
          -
            class_name: TestNodePort
            id: 304
            value: '0'
            node: 16
            variable: 105
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: timeLimit
            pointer: '0'
            pointerVariable: timeLimit
          -
            class_name: TestNodePort
            id: 305
            value: ''
            node: 16
            variable: 106
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: title
            pointer: '0'
            pointerVariable: title
          -
            class_name: TestNodePort
            id: 306
            value: null
            node: 16
            variable: 90
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 307
            value: null
            node: 16
            variable: 95
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 308
            value: null
            node: 16
            variable: 101
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: response
            pointer: '0'
            pointerVariable: response
          -
            class_name: TestNodePort
            id: 309
            value: '0'
            node: 16
            variable: 99
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
    nodesConnections:
      -
        class_name: TestNodeConnection
        id: 66
        flowTest: 20
        sourceNode: 13
        sourcePort: 268
        destinationNode: 16
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 67
        flowTest: 20
        sourceNode: 11
        sourcePort: 261
        destinationNode: 15
        destinationPort: 293
        returnFunction: session
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 68
        flowTest: 20
        sourceNode: 11
        sourcePort: 262
        destinationNode: 15
        destinationPort: 292
        returnFunction: responseBank
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 69
        flowTest: 20
        sourceNode: 11
        sourcePort: 263
        destinationNode: 15
        destinationPort: 291
        returnFunction: questionTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 70
        flowTest: 20
        sourceNode: 15
        sourcePort: 290
        destinationNode: 13
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 71
        flowTest: 20
        sourceNode: 11
        sourcePort: null
        destinationNode: 15
        destinationPort: null
        returnFunction: ''
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 72
        flowTest: 20
        sourceNode: 11
        sourcePort: 265
        destinationNode: 15
        destinationPort: 294
        returnFunction: includeMathJax
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 73
        flowTest: 20
        sourceNode: 11
        sourcePort: 264
        destinationNode: 15
        destinationPort: 295
        returnFunction: showAnswers
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 74
        flowTest: 20
        sourceNode: 13
        sourcePort: 269
        destinationNode: 16
        destinationPort: 297
        returnFunction: resultHTMLPage
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 75
        flowTest: 20
        sourceNode: 16
        sourcePort: 309
        destinationNode: 12
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: eb20512b94eedf47d8e67518e95457242fe4cabb
  -
    class_name: ViewTemplate
    id: 4
    name: page_mathjax
    description: ''
    accessibility: 2
    archived: '0'
    head: '<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>'
    css: |
      :root {
        --option-bg: #f3f3f3;
        --option-hover-bg: #efefef;
        --option-color: #000000;
        --option-unselected-bg: #ffffd5;
        --error-color: #f32828;
        --accent-light-color: #45b87e;
        --accent-dark-color: #35a26b;
        --font-color-for-accent-bg: #ffffff;
        --main-font-style: 'Open Sans', sans-serif;
        --main-font-color: #000000;
        --main-font-size: 16px;
        --header-bg: #4581b5;
        --header-color: #ffffff;
      }
      
      .body {
        min-height: 100vh;
        position: relative;
        font-size: var(--main-font-size);
        font-family: var(--main-font-style);
        color: var(--main-font-color);
        display: flex;
        flex-direction: column;
      }
      
      .container {
        max-width: 1000px;
        margin: auto;
        padding: 20px;
      }
      
      .main-btn {
        background-color: var(--accent-light-color);
        border: none;
        padding: 10px 20px;
        font-size: var(--main-font-size);
        color: var(--font-color-for-accent-bg);
        display: block;
        min-width: 100px;
        cursor: pointer;
        -webkit-transform: perspective(1px) translateZ(0);
        transform: perspective(1px) translateZ(0);
        -webkit-transition-duration: 0.3s;
        transition-duration: 0.3s;
        -webkit-transition-property: background-color;
        transition-property: background-color;
        outline: none;
      }
      
      .main-btn:hover {
        background-color: var(--accent-dark-color);
      }
      
      .main-btn:disabled {
        background-color: var(--option-hover-bg);
        color: #ccc;
        cursor: default;
      }
      
      .left-btn {
        margin: 0 auto 0 0;
      }
      
      .right-btn {
        margin: 0 0 0 auto;
      }
      
      .question-footer {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin-top: 20px;
      }
      
      @media screen and (max-width: 500px) {
        .main-btn {
          min-width: 0;
        }
      }
      
    js: |
      testRunner.controllerProvider.register("page", function($scope) {
        $scope.buttonLabel = testRunner.R.buttonLabel;
      });
      
    html: |
      <script type="text/javascript" async
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML" async>
      </script>
      <div class="body" ng-controller="page">
      	{{template:header}}
      	<div class="questions">
      		<div class="container">
      			{{content}}
      			<div class="question-footer">
      				<button class="main-btn right-btn" id="submitButton" name="next" ng-show="buttonLabel">
      					{{buttonLabel}}
      				</button>
      			</div>
      		</div>
      	</div>
      	{{template:footer}}
      </div>
      <script type="text/javascript"
         src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML">
      </script><script>
           window.MathJax = {
              tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
            }; 
      </script>
      
    groups: ''
    starterContent: false
    hash: 5aeb4c31540504c1e0c6805eadde8f974f9e6620
  -
    class_name: TestWizard
    id: 9
    name: displayResults
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 15
        title: 'Required Settings'
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 9
        params:
          -
            class_name: TestWizardParam
            id: 90
            label: 'Include MathJax?'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 288
            name: includeMathJax
            wizardStep: 15
            stepTitle: 'Required Settings'
            order: 0
            wizard: 9
            definition:
              defvalue: '0'
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 91
            label: 'Question Table'
            description: ''
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 290
            name: questionTable
            wizardStep: 15
            stepTitle: 'Required Settings'
            order: 2
            wizard: 9
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: question
                  label: Question
                  tooltip: ''
                -
                  name: responseOptions
                  label: 'Response Options'
                  tooltip: ''
                -
                  name: trait
                  label: Trait
                  tooltip: ''
                -
                  name: fixedIndex
                  label: 'Fixed Index'
                  tooltip: ''
                -
                  name: p1
                  label: 'Item Parameter #1'
                  tooltip: ''
                -
                  name: skippable
                  label: Skippable
                  tooltip: Optional.
                -
                  name: instructions
                  label: Instructions
                  tooltip: Optional.
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 92
            label: 'Response Bank'
            description: ''
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 291
            name: responseBank
            wizardStep: 15
            stepTitle: 'Required Settings'
            order: 3
            wizard: 9
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: item_id
                  label: 'Item Id'
                  tooltip: ''
                -
                  name: score
                  label: Score
                  tooltip: ''
                -
                  name: timeTaken
                  label: 'Time Taken'
                  tooltip: ''
                -
                  name: session_id
                  label: 'Session Id'
                  tooltip: ''
                -
                  name: theta
                  label: Theta
                  tooltip: ''
                -
                  name: sem
                  label: SEM
                  tooltip: ''
                -
                  name: response
                  label: Response
                  tooltip: ''
                -
                  name: trait
                  label: Trait
                  tooltip: ''
                -
                  name: skipped
                  label: Skipped
                  tooltip: Optional.
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 93
            label: 'Show Question Answer Options?'
            description: ''
            hideCondition: ''
            type: 4
            passableThroughUrl: '0'
            value: '0'
            testVariable: 293
            name: showAnswers
            wizardStep: 15
            stepTitle: 'Required Settings'
            order: 1
            wizard: 9
            definition:
              defvalue: '0'
              placeholder: 0
    test: 20
    groups: ''
    starterContent: false
    hash: a6cde6464073becee2a4222bb2cee97bf6f76ff3
  -
    class_name: Test
    id: 21
    name: displayResults
    accessibility: 2
    archived: '0'
    visibility: 0
    type: 1
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 294
        name: includeMathJax
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 21
        parentVariable: 288
      -
        class_name: TestVariable
        id: 295
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 21
        parentVariable: 289
      -
        class_name: TestVariable
        id: 296
        name: questionTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 21
        parentVariable: 290
      -
        class_name: TestVariable
        id: 297
        name: responseBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 21
        parentVariable: 291
      -
        class_name: TestVariable
        id: 298
        name: session
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 21
        parentVariable: 292
      -
        class_name: TestVariable
        id: 299
        name: showAnswers
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 21
        parentVariable: 293
    sourceWizard: 9
    sourceWizardTest: 63
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: f3a53a1c8e17d912baaf75cc027b1185893a701c
  -
    class_name: TestWizard
    id: 10
    name: eval
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 16
        title: eval
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 10
        params:
          -
            class_name: TestWizardParam
            id: 94
            label: Code
            description: 'R code to execute'
            hideCondition: ''
            type: 11
            passableThroughUrl: '0'
            value: ''
            testVariable: 110
            name: code
            wizardStep: 16
            stepTitle: eval
            order: 0
            wizard: 10
            definition:
              placeholder: 0
    test: 12
    groups: ''
    starterContent: true
    hash: bc7093f9db2feb380a956af247f0d3c64b57c4dd
  -
    class_name: Test
    id: 22
    name: eval
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 1
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 300
        name: code
        type: 0
        description: 'R code to execute'
        passableThroughUrl: '0'
        value: null
        test: 22
        parentVariable: 110
      -
        class_name: TestVariable
        id: 301
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 22
        parentVariable: 111
      -
        class_name: TestVariable
        id: 302
        name: result
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 22
        parentVariable: 112
    sourceWizard: 10
    sourceWizardTest: 3
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: true
    hash: a1813408954c252890e050ddb508703602597c9e
  -
    class_name: Test
    id: 23
    name: testCounter
    accessibility: 2
    archived: '0'
    visibility: 0
    type: 2
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 303
        name: count
        type: 1
        description: 'The number of times the current user has completed the current test. Returns -1 if there is an error when counting.'
        passableThroughUrl: '0'
        value: '-1'
        test: 23
        parentVariable: null
      -
        class_name: TestVariable
        id: 304
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 23
        parentVariable: null
      -
        class_name: TestVariable
        id: 305
        name: session
        type: 0
        description: 'The session id number of the current session. Usually generated by a startSession block.'
        passableThroughUrl: '0'
        value: null
        test: 23
        parentVariable: null
      -
        class_name: TestVariable
        id: 306
        name: sessionResultsTable
        type: 0
        description: 'The name of the session results table to query in order to check if a test session was completed.'
        passableThroughUrl: '0'
        value: EGR242S21SessionResults
        test: 23
        parentVariable: null
      -
        class_name: TestVariable
        id: 307
        name: sessionsTable
        type: 0
        description: 'The name of the session table to query to get the current user id, test id, and list of sessions that correspond to those two values.'
        passableThroughUrl: '0'
        value: EGR242S21sessions
        test: 23
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes:
      -
        class_name: TestNode
        id: 17
        title: ''
        type: 1
        posX: 14642
        posY: 15270
        flowTest: 23
        sourceTest: 23
        sourceTestName: testCounter
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 310
            value: null
            node: 17
            variable: 305
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: session
            pointer: '0'
            pointerVariable: session_id
          -
            class_name: TestNodePort
            id: 311
            value: EGR242S21SessionResults
            node: 17
            variable: 306
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: sessionResultsTable
            pointer: '0'
            pointerVariable: sessionResultsTable
          -
            class_name: TestNodePort
            id: 312
            value: EGR242S21sessions
            node: 17
            variable: 307
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: sessionsTable
            pointer: '0'
            pointerVariable: sessionsTable
      -
        class_name: TestNode
        id: 18
        title: ''
        type: 2
        posX: 15320
        posY: 15298
        flowTest: 23
        sourceTest: 23
        sourceTestName: testCounter
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 313
            value: '-1'
            node: 18
            variable: 303
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: count
            pointer: '0'
            pointerVariable: count
      -
        class_name: TestNode
        id: 19
        title: eval
        type: 0
        posX: 14946
        posY: 15218
        flowTest: 23
        sourceTest: 22
        sourceTestName: eval
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 314
            value: |
              cat(paste("\n\nRaw session table: ", sessionsTable, "\n\n"))
              cat(paste("\n\nRaw session results table: ", sessionResultsTable, "\n\n"))
              cat(paste("\n\nRaw session id: ", session, "\n\n"))
              
              # Which session table and session results table to use
              sessions_table <- sessionsTable
              session_results_table <- sessionResultsTable
              
              cat(paste("\n\nUsing session table: ", sessions_table, "\n\n"))
              cat(paste("\n\nUsing session results table: ", session_results_table, "\n\n"))
              
              # Get id, test_id, and user_id in session table from session_id
              # We assume they input a valid session_id
              # (which they should because it will come directly from concerto)
              current_session_data <- concerto.table.query(paste("select id, test_id, user_id from ", sessions_table, " where id = {{session}}"))
              
              session_id <- current_session_data[1]
              test_id <- current_session_data[2]
              user_id <- current_session_data[3]
              
              cat(paste("\n\n",
                        "session_id:\t", session_id, "\n",
                        "test_id:\t", test_id, "\n",
                        "user_id:\t", user_id, "\n",
                        "\n\n"))
              
              # Get a list of all session_id's matching that user_id and test_id
              user_test_sessions_data <- concerto.table.query(paste("select id from ", sessions_table, " where test_id = ", test_id, " and user_id = ", user_id))
              
              # Convert the list to a string that SQL can understand
              SQL_all_sessions_list <- substr(paste(user_test_sessions_data), 2, nchar(user_test_sessions_data))
              
              cat("\n\n", SQL_all_sessions_list, "\n\n")
              
              # Get the count of session_id's in the list that are also present in the session_results table
              # Since that table has duplicate session_id values for thetas and users, filter the search for only 'user' lines
              count <- concerto.table.query(paste("select COUNT(id) from ", session_results_table, " where session_id in ", SQL_all_sessions_list, " and name = \'user\'"))
              
              cat(paste("\n\n", count, "\n\n"))
              
            node: 19
            variable: 300
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 315
            value: null
            node: 19
            variable: 302
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 316
            value: '0'
            node: 19
            variable: 301
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 317
            value: ''
            node: 19
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: session
            pointer: '0'
            pointerVariable: test
          -
            class_name: TestNodePort
            id: 318
            value: ''
            node: 19
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: count
            pointer: '0'
            pointerVariable: count
          -
            class_name: TestNodePort
            id: 319
            value: EGR242S21sessions
            node: 19
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sessionsTable
            pointer: '0'
            pointerVariable: sessionsTable
          -
            class_name: TestNodePort
            id: 320
            value: EGR242S21SessionResults
            node: 19
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sessionResultsTable
            pointer: '0'
            pointerVariable: sessionsResultsTable
          -
            class_name: TestNodePort
            id: 321
            value: ''
            node: 19
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: user_id
            pointer: '0'
            pointerVariable: user_id
          -
            class_name: TestNodePort
            id: 322
            value: ''
            node: 19
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: test_id
            pointer: '0'
            pointerVariable: test_id
    nodesConnections:
      -
        class_name: TestNodeConnection
        id: 76
        flowTest: 23
        sourceNode: 17
        sourcePort: 311
        destinationNode: 19
        destinationPort: 320
        returnFunction: sessionResultsTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 77
        flowTest: 23
        sourceNode: 17
        sourcePort: 310
        destinationNode: 19
        destinationPort: 317
        returnFunction: session
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 78
        flowTest: 23
        sourceNode: 17
        sourcePort: 312
        destinationNode: 19
        destinationPort: 319
        returnFunction: sessionsTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 79
        flowTest: 23
        sourceNode: 19
        sourcePort: 318
        destinationNode: 18
        destinationPort: 313
        returnFunction: count
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 80
        flowTest: 23
        sourceNode: 17
        sourcePort: null
        destinationNode: 19
        destinationPort: null
        returnFunction: ''
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 81
        flowTest: 23
        sourceNode: 19
        sourcePort: 316
        destinationNode: 18
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: 4deec1d362bade65ac87aff91577288cfceab87c
  -
    class_name: Test
    id: 24
    name: _SessionIDCounter
    accessibility: 0
    archived: '0'
    visibility: 0
    type: 2
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 308
        name: SessionID
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 24
        parentVariable: null
      -
        class_name: TestVariable
        id: 309
        name: SessionResultTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 24
        parentVariable: null
      -
        class_name: TestVariable
        id: 310
        name: SessionTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 24
        parentVariable: null
      -
        class_name: TestVariable
        id: 311
        name: count
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 24
        parentVariable: null
      -
        class_name: TestVariable
        id: 312
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 24
        parentVariable: null
      -
        class_name: TestVariable
        id: 313
        name: testID
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 24
        parentVariable: null
      -
        class_name: TestVariable
        id: 314
        name: userID
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 24
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes:
      -
        class_name: TestNode
        id: 20
        title: ''
        type: 1
        posX: 15322
        posY: 15126
        flowTest: 24
        sourceTest: 24
        sourceTestName: _SessionIDCounter
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 323
            value: null
            node: 20
            variable: 310
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: SessionTable
            pointer: '0'
            pointerVariable: SessionTable
          -
            class_name: TestNodePort
            id: 324
            value: null
            node: 20
            variable: 309
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: SessionResultTable
            pointer: '0'
            pointerVariable: SessionResultTable
          -
            class_name: TestNodePort
            id: 325
            value: null
            node: 20
            variable: 308
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: SessionID
            pointer: '0'
            pointerVariable: SessionID
      -
        class_name: TestNode
        id: 21
        title: ''
        type: 2
        posX: 16339
        posY: 15154
        flowTest: 24
        sourceTest: 24
        sourceTestName: _SessionIDCounter
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 326
            value: null
            node: 21
            variable: 314
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: userID
            pointer: '0'
            pointerVariable: UserID
          -
            class_name: TestNodePort
            id: 327
            value: null
            node: 21
            variable: 313
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: testID
            pointer: '0'
            pointerVariable: testID
          -
            class_name: TestNodePort
            id: 328
            value: null
            node: 21
            variable: 311
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: count
            pointer: '0'
            pointerVariable: count
      -
        class_name: TestNode
        id: 22
        title: sessionCounter
        type: 0
        posX: 15644
        posY: 15096
        flowTest: 24
        sourceTest: 22
        sourceTestName: eval
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 329
            value: |
              cat(paste("\n\nRaw session table: ", sessionsTable, "\n\n"))
              cat(paste("\n\nRaw session results table: ", sessionResultsTable, "\n\n"))
              cat(paste("\n\nRaw session id: ", session, "\n\n"))
              
              # Which session table and session results table to use
              sessions_table <- sessionsTable
              session_results_table <- sessionResultsTable
              sessionID <- as.numeric(session)
              print("Testing:")
              print(as.numeric("12"))
              print(session)
              print({{session}})
              
              cat(paste("\n\nUsing session table: ", sessions_table, "\n\n"))
              cat(paste("\n\nUsing session results table: ", session_results_table, "\n\n"))
              
              # Get id, test_id, and user_id in session table from session_id
              # We assume they input a valid session_id
              # (which they should because it will come directly from concerto)
              current_session_data <- concerto.table.query(paste("select id, test_id, user_id from ", sessions_table, " where id =",sessionID))
              
              session_id <- current_session_data[1]
              test_id <- current_session_data[2]
              user_id <- current_session_data[3]
              
              cat(paste("\n\n",
                        "session_id:\t", session_id, "\n",
                        "test_id:\t", test_id, "\n",
                        "user_id:\t", user_id, "\n",
                        "\n\n"))
              
              # Get a list of all session_id's matching that user_id and test_id
              user_test_sessions_data <- concerto.table.query(paste("select id from ", sessions_table, " where test_id = ", test_id, " and user_id = ", user_id))
              
              # Convert the list to a string that SQL can understand
              SQL_all_sessions_list <- substr(paste(user_test_sessions_data), 2, nchar(user_test_sessions_data))
              
              cat("\n\n", SQL_all_sessions_list, "\n\n")
              
              # Get the count of session_id's in the list that are also present in the session_results table
              # Since that table has duplicate session_id values for thetas and users, filter the search for only 'user' lines
              count <- concerto.table.query(paste("select COUNT(id) from ", session_results_table, " where session_id in ", SQL_all_sessions_list, " and name = \'user\'"))
              
              cat(paste("\n\n", count, "\n\n"))
              
            node: 22
            variable: 300
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 330
            value: null
            node: 22
            variable: 302
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 331
            value: '0'
            node: 22
            variable: 301
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 332
            value: ''
            node: 22
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: session
            pointer: '0'
            pointerVariable: test
          -
            class_name: TestNodePort
            id: 333
            value: ''
            node: 22
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: count
            pointer: '0'
            pointerVariable: count
          -
            class_name: TestNodePort
            id: 334
            value: EGR242S21sessions
            node: 22
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sessionsTable
            pointer: '0'
            pointerVariable: sessionsTable
          -
            class_name: TestNodePort
            id: 335
            value: EGR242S21SessionResults
            node: 22
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sessionResultsTable
            pointer: '0'
            pointerVariable: sessionsResultsTable
          -
            class_name: TestNodePort
            id: 336
            value: ''
            node: 22
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: user_id
            pointer: '0'
            pointerVariable: user_id
          -
            class_name: TestNodePort
            id: 337
            value: ''
            node: 22
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: test_id
            pointer: '0'
            pointerVariable: test_id
      -
        class_name: TestNode
        id: 23
        title: ''
        type: 0
        posX: 16077
        posY: 15435
        flowTest: 24
        sourceTest: 10
        sourceTestName: showPage
        sourceTestDescription: 'Shows page to user.'
        ports:
          -
            class_name: TestNodePort
            id: 338
            value: Next
            node: 23
            variable: 92
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: buttonLabel
            pointer: '0'
            pointerVariable: buttonLabel
          -
            class_name: TestNodePort
            id: 339
            value: ''
            node: 23
            variable: 93
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: content
            pointer: '0'
            pointerVariable: content
          -
            class_name: TestNodePort
            id: 340
            value: null
            node: 23
            variable: 94
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 341
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            node: 23
            variable: 96
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: footer
            pointer: '0'
            pointerVariable: footer
          -
            class_name: TestNodePort
            id: 342
            value: |
              <div style="padding-left:1em">
              	<p>
              		User ID: 
              		<strong>
              			{{user}} 
              		</strong>
              	</p>
              
              	<p>
              		Test ID: 
              		<strong>
              			{{test}} 
              		</strong>
              	</p>
              
              	<p>
              		<strong>
              			
              		</strong>
              		
              		<span style="font-size:20px;">
              			Count 
              		</span>
              		
              		<span style="font-size:20px;">
              			: 
              			<b>
              				{{count}} 
              			</b>
              			
              		</span>
              		
              		<em>
              			
              			<span style="font-size:14px;">
              				
              			</span>
              			
              		</em>
              	</p>
              
              	<p>
              		<em>
              			
              			<span style="font-size:14px;">
              				From: {{sessionsTable}}, {{sessionsResultsTable}} 
              			</span>
              			
              		</em>
              	</p>
              </div>
              
            node: 23
            variable: 97
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: html
            pointer: '0'
            pointerVariable: html
          -
            class_name: TestNodePort
            id: 343
            value: ''
            node: 23
            variable: 98
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: logo
            pointer: '0'
            pointerVariable: logo
          -
            class_name: TestNodePort
            id: 344
            value: page
            node: 23
            variable: 103
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: template
            pointer: '0'
            pointerVariable: template
          -
            class_name: TestNodePort
            id: 345
            value: null
            node: 23
            variable: 104
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: templateParams
            pointer: '0'
            pointerVariable: templateParams
          -
            class_name: TestNodePort
            id: 346
            value: '0'
            node: 23
            variable: 105
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: timeLimit
            pointer: '0'
            pointerVariable: timeLimit
          -
            class_name: TestNodePort
            id: 347
            value: ''
            node: 23
            variable: 106
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: title
            pointer: '0'
            pointerVariable: title
          -
            class_name: TestNodePort
            id: 348
            value: null
            node: 23
            variable: 90
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 349
            value: null
            node: 23
            variable: 95
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 350
            value: null
            node: 23
            variable: 101
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: response
            pointer: '0'
            pointerVariable: response
          -
            class_name: TestNodePort
            id: 351
            value: '0'
            node: 23
            variable: 99
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 352
            value: ''
            node: 23
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: count
            pointer: '0'
            pointerVariable: count
          -
            class_name: TestNodePort
            id: 353
            value: user
            node: 23
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: user
            pointer: '0'
            pointerVariable: user
          -
            class_name: TestNodePort
            id: 354
            value: test
            node: 23
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: test
            pointer: '0'
            pointerVariable: id
          -
            class_name: TestNodePort
            id: 355
            value: sessionsTable
            node: 23
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sessionsTable
            pointer: '0'
            pointerVariable: sessionsTable
          -
            class_name: TestNodePort
            id: 356
            value: sessionResultsTable
            node: 23
            variable: null
            string: '1'
            defaultValue: '0'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sessionResultsTable
            pointer: '0'
            pointerVariable: sessionsResultsTable
          -
            class_name: TestNodePort
            id: 357
            value: null
            node: 23
            variable: 91
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: bgWorkers
            pointer: '0'
            pointerVariable: bgWorkers
          -
            class_name: TestNodePort
            id: 358
            value: '0'
            node: 23
            variable: 100
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: protectedFilesAccess
            pointer: '0'
            pointerVariable: protectedFilesAccess
          -
            class_name: TestNodePort
            id: 359
            value: '0'
            node: 23
            variable: 102
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionFilesAccess
            pointer: '0'
            pointerVariable: sessionFilesAccess
      -
        class_name: TestNode
        id: 24
        title: ''
        type: 0
        posX: 15688
        posY: 15420
        flowTest: 24
        sourceTest: 23
        sourceTestName: testCounter
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 360
            value: null
            node: 24
            variable: 305
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 361
            value: EGR242S21SessionResults
            node: 24
            variable: 306
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionResultsTable
            pointer: '0'
            pointerVariable: sessionResultsTable
          -
            class_name: TestNodePort
            id: 362
            value: EGR242S21sessions
            node: 24
            variable: 307
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionsTable
            pointer: '0'
            pointerVariable: sessionsTable
          -
            class_name: TestNodePort
            id: 363
            value: '-1'
            node: 24
            variable: 303
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: count
            pointer: '0'
            pointerVariable: count
          -
            class_name: TestNodePort
            id: 364
            value: '0'
            node: 24
            variable: 304
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
    nodesConnections:
      -
        class_name: TestNodeConnection
        id: 82
        flowTest: 24
        sourceNode: 22
        sourcePort: 331
        destinationNode: 21
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 83
        flowTest: 24
        sourceNode: 23
        sourcePort: 351
        destinationNode: 21
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 84
        flowTest: 24
        sourceNode: 22
        sourcePort: 337
        destinationNode: 23
        destinationPort: 354
        returnFunction: test_id
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 85
        flowTest: 24
        sourceNode: 22
        sourcePort: 333
        destinationNode: 23
        destinationPort: 352
        returnFunction: count
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 86
        flowTest: 24
        sourceNode: 22
        sourcePort: 336
        destinationNode: 23
        destinationPort: 353
        returnFunction: user_id
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 87
        flowTest: 24
        sourceNode: 20
        sourcePort: 325
        destinationNode: 22
        destinationPort: 332
        returnFunction: SessionID
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 88
        flowTest: 24
        sourceNode: 20
        sourcePort: 324
        destinationNode: 22
        destinationPort: 335
        returnFunction: SessionResultTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 89
        flowTest: 24
        sourceNode: 20
        sourcePort: 323
        destinationNode: 22
        destinationPort: 334
        returnFunction: SessionTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 90
        flowTest: 24
        sourceNode: 20
        sourcePort: 324
        destinationNode: 23
        destinationPort: 356
        returnFunction: SessionResultTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 91
        flowTest: 24
        sourceNode: 20
        sourcePort: 323
        destinationNode: 23
        destinationPort: 355
        returnFunction: SessionTable
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 92
        flowTest: 24
        sourceNode: 20
        sourcePort: null
        destinationNode: 22
        destinationPort: null
        returnFunction: ''
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 93
        flowTest: 24
        sourceNode: 22
        sourcePort: 333
        destinationNode: 21
        destinationPort: 328
        returnFunction: count
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 94
        flowTest: 24
        sourceNode: 22
        sourcePort: 337
        destinationNode: 21
        destinationPort: 327
        returnFunction: test_id
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 95
        flowTest: 24
        sourceNode: 22
        sourcePort: 336
        destinationNode: 21
        destinationPort: 326
        returnFunction: user_id
        defaultReturnFunction: '1'
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: 39affc8c8655cf43dec05a1f32133f3a45a2ac75
  -
    class_name: TestWizard
    id: 11
    name: 'Session ID Test Counter Wizard'
    description: ''
    accessibility: 0
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 17
        title: 'Data Tables and Session ID'
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 11
        params:
          -
            class_name: TestWizardParam
            id: 95
            label: 'Session ID'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 308
            name: SessionID
            wizardStep: 17
            stepTitle: 'Data Tables and Session ID'
            order: 0
            wizard: 11
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 96
            label: 'Session Result Table'
            description: ''
            hideCondition: ''
            type: 6
            passableThroughUrl: '0'
            value: ''
            testVariable: 309
            name: SessionResultTable
            wizardStep: 17
            stepTitle: 'Data Tables and Session ID'
            order: 0
            wizard: 11
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 97
            label: 'Session Table'
            description: ''
            hideCondition: ''
            type: 6
            passableThroughUrl: '0'
            value: ''
            testVariable: 310
            name: SessionTable
            wizardStep: 17
            stepTitle: 'Data Tables and Session ID'
            order: 0
            wizard: 11
            definition:
              defvalue: ''
              placeholder: 0
    test: 24
    groups: ''
    starterContent: false
    hash: ce093baf97079d5a31f2560f56e995d162d2a693
  -
    class_name: Test
    id: 25
    name: SessionIDCounter
    accessibility: 0
    archived: '0'
    visibility: 0
    type: 1
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 315
        name: SessionID
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 25
        parentVariable: 308
      -
        class_name: TestVariable
        id: 316
        name: SessionResultTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 25
        parentVariable: 309
      -
        class_name: TestVariable
        id: 317
        name: SessionTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 25
        parentVariable: 310
      -
        class_name: TestVariable
        id: 318
        name: count
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 25
        parentVariable: 311
      -
        class_name: TestVariable
        id: 319
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 25
        parentVariable: 312
      -
        class_name: TestVariable
        id: 320
        name: testID
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 25
        parentVariable: 313
      -
        class_name: TestVariable
        id: 321
        name: userID
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 25
        parentVariable: 314
    sourceWizard: 11
    sourceWizardTest: 66
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: 6aed8eb00917d4ce1f1c76eee4830831f7f4e9d9
  -
    class_name: Test
    id: 26
    name: _finishSession
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 0
    code: |
      session$finished = 1
      session$updateTime = format(Sys.time(), "%Y-%m-%d %X")
      
      sessionBank = fromJSON(sessionBankTable)
      params=list(
        table=sessionBank$table,
        finishedColumn=sessionBank$columns$finished,
        updateTimeColumn=sessionBank$columns$updateTime,
        id=session$id
      )
      
      concerto.table.query("
      UPDATE {{table}} SET 
      {{finishedColumn}}=1,
      {{updateTimeColumn}}=CURRENT_TIMESTAMP
      WHERE id={{id}}", params=params)
      
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 322
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 26
        parentVariable: null
      -
        class_name: TestVariable
        id: 323
        name: session
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 26
        parentVariable: null
      -
        class_name: TestVariable
        id: 324
        name: session
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 26
        parentVariable: null
      -
        class_name: TestVariable
        id: 325
        name: sessionBankTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 26
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: true
    hash: 94d159f08b89c2e6032f2908ee9e66cd0a6e5aa6
  -
    class_name: TestWizard
    id: 12
    name: finishSession
    description: ''
    accessibility: 2
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 18
        title: Session
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 12
        params:
          -
            class_name: TestWizardParam
            id: 98
            label: Table
            description: ''
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '{"table":"sessions","columns":{"finished":"finished","updateTime":"updateTime"}}'
            testVariable: 325
            name: sessionBankTable
            wizardStep: 18
            stepTitle: Session
            order: 0
            wizard: 12
            definition:
              cols:
                -
                  name: finished
                  label: Finished
                  tooltip: ''
                -
                  name: updateTime
                  label: updateTime
                  tooltip: ''
              placeholder: 0
    test: 26
    groups: ''
    starterContent: true
    hash: 86e6e57a1ebd7fa2c47fb707b2febd82ead999fd
  -
    class_name: Test
    id: 27
    name: finishSession
    accessibility: 2
    archived: '0'
    visibility: 2
    type: 1
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 326
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 27
        parentVariable: 322
      -
        class_name: TestVariable
        id: 327
        name: session
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 27
        parentVariable: 323
      -
        class_name: TestVariable
        id: 328
        name: session
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 27
        parentVariable: 324
      -
        class_name: TestVariable
        id: 329
        name: sessionBankTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '{"table":"sessions","columns":{"finished":"finished","updateTime":"updateTime"}}'
        test: 27
        parentVariable: 325
    sourceWizard: 12
    sourceWizardTest: 34
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: _concerto_core
    groups: ''
    protected: '0'
    starterContent: true
    hash: dc760d6974c1f5c9b36de31dbf46f14881150ad3
  -
    class_name: Test
    id: 28
    name: 'Generic Test_1'
    accessibility: 0
    archived: '0'
    visibility: 0
    type: 2
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 330
        name: ItemNumLimit
        type: 0
        description: 'Number of questions the test will ask before stopping'
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 331
        name: NewItemNumLimit
        type: 0
        description: 'Number of new questions asked to student before ending'
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 332
        name: SD
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 333
        name: Score
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 334
        name: contentBalancingTable
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 335
        name: masteringThreshold
        type: 0
        description: "Cut off theta for when the student has mastered the content\_"
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 336
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 337
        name: questionBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 338
        name: responseBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 339
        name: scoringSlope
        type: 0
        description: |
          <p>
          	Multiplier used for the slope for calculating the student's score to give visual feedback 
          </p>
          
          <p>
          	Score = min(100, scoringSlope*(theta-masteringThreshold)+90) 
          </p>
          
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 340
        name: sessionBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 341
        name: sessionBank2
        type: 0
        description: "this is a band-aid for the test to run. In a nutshell, the starter content needs JSON objects but our code needs a singe string. there is two blocks that need session bank however, one block is from starter code and the other is from us. TODO: parse the JSON object to get the table name THEN pass it into our block.\_"
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 342
        name: sessionResultsBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 343
        name: testName
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 344
        name: testNameforResults
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
      -
        class_name: TestVariable
        id: 345
        name: userBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 28
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes:
      -
        class_name: TestNode
        id: 25
        title: ''
        type: 1
        posX: 14797
        posY: 14786
        flowTest: 28
        sourceTest: 28
        sourceTestName: 'Generic Test_1'
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 365
            value: null
            node: 25
            variable: 337
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: questionBank
            pointer: '0'
            pointerVariable: questionBank
          -
            class_name: TestNodePort
            id: 366
            value: null
            node: 25
            variable: 338
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: responseBank
            pointer: '0'
            pointerVariable: resultsBank
          -
            class_name: TestNodePort
            id: 367
            value: null
            node: 25
            variable: 340
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: sessionBank
            pointer: '0'
            pointerVariable: sessionBank
          -
            class_name: TestNodePort
            id: 368
            value: null
            node: 25
            variable: 342
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: sessionResultsBank
            pointer: '0'
            pointerVariable: sessionResultsBank
          -
            class_name: TestNodePort
            id: 369
            value: null
            node: 25
            variable: 343
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: testName
            pointer: '0'
            pointerVariable: testName
          -
            class_name: TestNodePort
            id: 370
            value: null
            node: 25
            variable: 344
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: testNameforResults
            pointer: '0'
            pointerVariable: testNameforResults
          -
            class_name: TestNodePort
            id: 371
            value: null
            node: 25
            variable: 334
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: contentBalancingTable
            pointer: '0'
            pointerVariable: contentBalancingTable
          -
            class_name: TestNodePort
            id: 372
            value: null
            node: 25
            variable: 345
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: userBank
            pointer: '0'
            pointerVariable: userBank
          -
            class_name: TestNodePort
            id: 373
            value: null
            node: 25
            variable: 339
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: scoringSlope
            pointer: '0'
            pointerVariable: cutOffTheta
          -
            class_name: TestNodePort
            id: 374
            value: null
            node: 25
            variable: 335
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: masteringThreshold
            pointer: '0'
            pointerVariable: masteringThreshold
          -
            class_name: TestNodePort
            id: 375
            value: null
            node: 25
            variable: 330
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: ItemNumLimit
            pointer: '0'
            pointerVariable: ItemNumLimit
          -
            class_name: TestNodePort
            id: 376
            value: null
            node: 25
            variable: 331
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: NewItemNumLimit
            pointer: '0'
            pointerVariable: NewItemNumLimit
          -
            class_name: TestNodePort
            id: 377
            value: null
            node: 25
            variable: 341
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: sessionBank2
            pointer: '0'
            pointerVariable: sessionBank2
      -
        class_name: TestNode
        id: 26
        title: ''
        type: 2
        posX: 16960
        posY: 15001
        flowTest: 28
        sourceTest: 28
        sourceTestName: 'Generic Test_1'
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 378
            value: null
            node: 26
            variable: 333
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: Score
            pointer: '0'
            pointerVariable: Score
          -
            class_name: TestNodePort
            id: 379
            value: null
            node: 26
            variable: 332
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: SD
            pointer: '0'
            pointerVariable: SD
      -
        class_name: TestNode
        id: 27
        title: ''
        type: 0
        posX: 15458
        posY: 15212
        flowTest: 28
        sourceTest: 2
        sourceTestName: saveData
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 380
            value: null
            node: 27
            variable: 5
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: data
            pointer: '0'
            pointerVariable: data
          -
            class_name: TestNodePort
            id: 381
            value: null
            node: 27
            variable: 7
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 382
            value: '{"table":"Troubleshooting_SessionResults","columns":{"session_id":"session_id","name":"name","value":"value"}}'
            node: 27
            variable: 8
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: table
            pointer: '0'
            pointerVariable: table
          -
            class_name: TestNodePort
            id: 383
            value: '0'
            node: 27
            variable: 6
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
      -
        class_name: TestNode
        id: 28
        title: ''
        type: 0
        posX: 15386
        posY: 14798
        flowTest: 28
        sourceTest: 4
        sourceTestName: authorizeUser
        sourceTestDescription: 'User authorization.'
        ports:
          -
            class_name: TestNodePort
            id: 384
            value: null
            node: 28
            variable: 22
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: login
            pointer: '0'
            pointerVariable: login
          -
            class_name: TestNodePort
            id: 385
            value: null
            node: 28
            variable: 23
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: password
            pointer: '0'
            pointerVariable: password
          -
            class_name: TestNodePort
            id: 386
            value: plain
            node: 28
            variable: 27
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: userBankEncryption
            pointer: '0'
            pointerVariable: userBankEncryption
          -
            class_name: TestNodePort
            id: 387
            value: '[]'
            node: 28
            variable: 28
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: userBankList
            pointer: '0'
            pointerVariable: userBankList
          -
            class_name: TestNodePort
            id: 388
            value: '{"table":"EGR242S23users","columns":{"id":"id","login":"login","password":"password","enabled":"enabled"}}'
            node: 28
            variable: 29
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: userBankTable
            pointer: '0'
            pointerVariable: userBankTable
          -
            class_name: TestNodePort
            id: 389
            value: table
            node: 28
            variable: 30
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: userBankType
            pointer: '0'
            pointerVariable: userBankType
          -
            class_name: TestNodePort
            id: 390
            value: null
            node: 28
            variable: 20
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 391
            value: null
            node: 28
            variable: 24
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: resultCode
            pointer: '0'
            pointerVariable: resultCode
          -
            class_name: TestNodePort
            id: 392
            value: null
            node: 28
            variable: 26
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: user
            pointer: '0'
            pointerVariable: user
          -
            class_name: TestNodePort
            id: 393
            value: '0'
            node: 28
            variable: 21
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: authorized
            pointer: '0'
            pointerVariable: authorized
          -
            class_name: TestNodePort
            id: 394
            value: null
            node: 28
            variable: 25
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: unauthorized
            pointer: '0'
            pointerVariable: unauthorized
      -
        class_name: TestNode
        id: 29
        title: ''
        type: 0
        posX: 15184
        posY: 14786
        flowTest: 28
        sourceTest: 6
        sourceTestName: form
        sourceTestDescription: 'Form page.'
        ports:
          -
            class_name: TestNodePort
            id: 395
            value: Next
            node: 29
            variable: 43
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: buttonLabel
            pointer: '0'
            pointerVariable: buttonLabel
          -
            class_name: TestNodePort
            id: 396
            value: '[{"name":"login","label":"login","type":"singleLine","validation":[{"type":"required","value":"","alert":"Answer required!"}],"definition":{"options":null}},{"name":"password","label":"password","type":"password","validation":[],"definition":{"options":[]}}]'
            node: 29
            variable: 44
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: fields
            pointer: '0'
            pointerVariable: fields
          -
            class_name: TestNodePort
            id: 397
            value: ''
            node: 29
            variable: 45
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: footer
            pointer: '0'
            pointerVariable: footer
          -
            class_name: TestNodePort
            id: 398
            value: null
            node: 29
            variable: 46
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: initialValues
            pointer: '0'
            pointerVariable: initialValues
          -
            class_name: TestNodePort
            id: 399
            value: ''
            node: 29
            variable: 47
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: instructions
            pointer: '0'
            pointerVariable: instructions
          -
            class_name: TestNodePort
            id: 400
            value: ''
            node: 29
            variable: 48
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: logo
            pointer: '0'
            pointerVariable: logo
          -
            class_name: TestNodePort
            id: 401
            value: form
            node: 29
            variable: 51
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: template
            pointer: '0'
            pointerVariable: template
          -
            class_name: TestNodePort
            id: 402
            value: ''
            node: 29
            variable: 52
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: templateHtml
            pointer: '0'
            pointerVariable: templateHtml
          -
            class_name: TestNodePort
            id: 403
            value: null
            node: 29
            variable: 53
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: templateParams
            pointer: '0'
            pointerVariable: templateParams
          -
            class_name: TestNodePort
            id: 404
            value: 'Module 3 Comprehensive Assessment'
            node: 29
            variable: 54
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: title
            pointer: '0'
            pointerVariable: title
          -
            class_name: TestNodePort
            id: 405
            value: null
            node: 29
            variable: 50
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: response
            pointer: '0'
            pointerVariable: response
          -
            class_name: TestNodePort
            id: 406
            value: '0'
            node: 29
            variable: 49
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 407
            value: ''
            node: 29
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: login
            pointer: '0'
            pointerVariable: login
          -
            class_name: TestNodePort
            id: 408
            value: ''
            node: 29
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: password
            pointer: '0'
            pointerVariable: password
      -
        class_name: TestNode
        id: 30
        title: ''
        type: 0
        posX: 15686
        posY: 14811
        flowTest: 28
        sourceTest: 8
        sourceTestName: startSession
        sourceTestDescription: 'Start session.'
        ports:
          -
            class_name: TestNodePort
            id: 409
            value: null
            node: 30
            variable: 64
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: extraFields
            pointer: '0'
            pointerVariable: extraFields
          -
            class_name: TestNodePort
            id: 410
            value: '1'
            node: 30
            variable: 66
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: preventParallelSessionUsage
            pointer: '0'
            pointerVariable: preventParallelSessionUsage
          -
            class_name: TestNodePort
            id: 411
            value: '1'
            node: 30
            variable: 67
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: restoreState
            pointer: '0'
            pointerVariable: restoreState
          -
            class_name: TestNodePort
            id: 412
            value: '1'
            node: 30
            variable: 68
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: resumable
            pointer: '0'
            pointerVariable: resumable
          -
            class_name: TestNodePort
            id: 413
            value: '10'
            node: 30
            variable: 69
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: resumableExpiration
            pointer: '0'
            pointerVariable: resumableExpiration
          -
            class_name: TestNodePort
            id: 414
            value: '{"table":"EGR242S21sessions","columns":{"id":"id","internal_id":"internal_id","user_id":"user_id","test_id":"test_id","updateTime":"updateTime","finished":"finished","startedTime":"startedTime"}}'
            node: 30
            variable: 71
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: sessionBankTable
            pointer: '0'
            pointerVariable: sessionBankTable
          -
            class_name: TestNodePort
            id: 415
            value: null
            node: 30
            variable: 72
            string: '0'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: user
            pointer: '0'
            pointerVariable: user
          -
            class_name: TestNodePort
            id: 416
            value: null
            node: 30
            variable: 70
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 417
            value: '0'
            node: 30
            variable: 65
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
      -
        class_name: TestNode
        id: 31
        title: ''
        type: 0
        posX: 15664
        posY: 15304
        flowTest: 28
        sourceTest: 2
        sourceTestName: saveData
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 418
            value: null
            node: 31
            variable: 5
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: data
            pointer: '0'
            pointerVariable: data
          -
            class_name: TestNodePort
            id: 419
            value: null
            node: 31
            variable: 7
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 420
            value: '{"table":"Troubleshooting_SessionResults","columns":{"session_id":"session_id","name":"name","value":"value"}}'
            node: 31
            variable: 8
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: table
            pointer: '0'
            pointerVariable: table
          -
            class_name: TestNodePort
            id: 421
            value: '0'
            node: 31
            variable: 6
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
      -
        class_name: TestNode
        id: 32
        title: ''
        type: 0
        posX: 16393
        posY: 14836
        flowTest: 28
        sourceTest: 10
        sourceTestName: showPage
        sourceTestDescription: 'Shows page to user.'
        ports:
          -
            class_name: TestNodePort
            id: 422
            value: Next
            node: 32
            variable: 92
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: buttonLabel
            pointer: '0'
            pointerVariable: buttonLabel
          -
            class_name: TestNodePort
            id: 423
            value: ''
            node: 32
            variable: 93
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: content
            pointer: '0'
            pointerVariable: content
          -
            class_name: TestNodePort
            id: 424
            value: null
            node: 32
            variable: 94
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 425
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            node: 32
            variable: 96
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: footer
            pointer: '0'
            pointerVariable: footer
          -
            class_name: TestNodePort
            id: 426
            value: |
              <span style="font-size:20px;">
              	The username and/or password were incorrect. Please use your CBU ID# for your login and get your password from the the gradebook on Blackboard.
              </span>
              
            node: 32
            variable: 97
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: html
            pointer: '0'
            pointerVariable: html
          -
            class_name: TestNodePort
            id: 427
            value: ''
            node: 32
            variable: 98
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: logo
            pointer: '0'
            pointerVariable: logo
          -
            class_name: TestNodePort
            id: 428
            value: page
            node: 32
            variable: 103
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: template
            pointer: '0'
            pointerVariable: template
          -
            class_name: TestNodePort
            id: 429
            value: null
            node: 32
            variable: 104
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: templateParams
            pointer: '0'
            pointerVariable: templateParams
          -
            class_name: TestNodePort
            id: 430
            value: '0'
            node: 32
            variable: 105
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: timeLimit
            pointer: '0'
            pointerVariable: timeLimit
          -
            class_name: TestNodePort
            id: 431
            value: ''
            node: 32
            variable: 106
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: title
            pointer: '0'
            pointerVariable: title
          -
            class_name: TestNodePort
            id: 432
            value: null
            node: 32
            variable: 90
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 433
            value: null
            node: 32
            variable: 95
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 434
            value: null
            node: 32
            variable: 101
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: response
            pointer: '0'
            pointerVariable: response
          -
            class_name: TestNodePort
            id: 435
            value: '0'
            node: 32
            variable: 99
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 436
            value: null
            node: 32
            variable: 91
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: bgWorkers
            pointer: '0'
            pointerVariable: bgWorkers
          -
            class_name: TestNodePort
            id: 437
            value: '0'
            node: 32
            variable: 100
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: protectedFilesAccess
            pointer: '0'
            pointerVariable: protectedFilesAccess
          -
            class_name: TestNodePort
            id: 438
            value: '0'
            node: 32
            variable: 102
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionFilesAccess
            pointer: '0'
            pointerVariable: sessionFilesAccess
      -
        class_name: TestNode
        id: 33
        title: ''
        type: 0
        posX: 15991
        posY: 14884
        flowTest: 28
        sourceTest: 14
        sourceTestName: groupedAssessment2
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 439
            value: '0'
            node: 33
            variable: 179
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: askAllSubGroup
            pointer: '0'
            pointerVariable: askAllSubGroup
          -
            class_name: TestNodePort
            id: 440
            value: Back
            node: 33
            variable: 180
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: backButtonLabel
            pointer: '0'
            pointerVariable: backButtonLabel
          -
            class_name: TestNodePort
            id: 441
            value: '1'
            node: 33
            variable: 181
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: calculateSem
            pointer: '0'
            pointerVariable: calculateSem
          -
            class_name: TestNodePort
            id: 442
            value: '1'
            node: 33
            variable: 182
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: calculateTheta
            pointer: '0'
            pointerVariable: calculateTheta
          -
            class_name: TestNodePort
            id: 443
            value: '0'
            node: 33
            variable: 183
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: canGoBack
            pointer: '0'
            pointerVariable: canGoBack
          -
            class_name: TestNodePort
            id: 444
            value: '0'
            node: 33
            variable: 184
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: canSkipItems
            pointer: '0'
            pointerVariable: canSkipItems
          -
            class_name: TestNodePort
            id: 445
            value: '[{"name":"M1.1","proportion":"1"},{"name":"M1.2","proportion":"1"},{"name":"M1.3","proportion":"1"},{"name":"M1.4","proportion":"1"},{"name":"M2.1","proportion":"1"},{"name":"M2.2","proportion":"1"},{"name":"M3.1","proportion":"1"},{"name":"M3.2","proportion":"1"},{"name":"M3.3","proportion":"1"}]'
            node: 33
            variable: 185
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: contentBalancing
            pointer: '0'
            pointerVariable: contentBalancing
          -
            class_name: TestNodePort
            id: 446
            value: '1'
            node: 33
            variable: 186
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: d
            pointer: '0'
            pointerVariable: d
          -
            class_name: TestNodePort
            id: 447
            value: '0.7'
            node: 33
            variable: 187
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: exposureLimit
            pointer: '0'
            pointerVariable: exposureLimit
          -
            class_name: TestNodePort
            id: 448
            value: '0'
            node: 33
            variable: 188
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: exposureMaxItems
            pointer: '0'
            pointerVariable: exposureMaxItems
          -
            class_name: TestNodePort
            id: 449
            value: '0'
            node: 33
            variable: 189
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: exposureMinSessions
            pointer: '0'
            pointerVariable: exposureMinSessions
          -
            class_name: TestNodePort
            id: 450
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            node: 33
            variable: 190
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: footer
            pointer: '0'
            pointerVariable: footer
          -
            class_name: TestNodePort
            id: 451
            value: ''
            node: 33
            variable: 191
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: instructions
            pointer: '0'
            pointerVariable: instructions
          -
            class_name: TestNodePort
            id: 452
            value: ''
            node: 33
            variable: 192
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemBankFilterModule
            pointer: '0'
            pointerVariable: itemBankFilterModule
          -
            class_name: TestNodePort
            id: 453
            value: '{}'
            node: 33
            variable: 193
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemBankFlatTable
            pointer: '0'
            pointerVariable: itemBankFlatTable
          -
            class_name: TestNodePort
            id: 454
            value: '[]'
            node: 33
            variable: 194
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemBankItems
            pointer: '0'
            pointerVariable: itemBankItems
          -
            class_name: TestNodePort
            id: 455
            value: '{"table":"EGR242_Module3_Review_Assessment_Questions","columns":{"id":"id","question":"question","responseOptions":"responseOptions","trait":"trait","fixedIndex":"fixedIndex","p1":"p1","skippable":"skippable","instructions":"instructions"}}'
            node: 33
            variable: 195
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: itemBankTable
            pointer: '0'
            pointerVariable: itemBankTable
          -
            class_name: TestNodePort
            id: 456
            value: '[{"name":"SubGroupId","sensitive":"0"},{"name":"SubGroupSortOrder","sensitive":"0"}]'
            node: 33
            variable: 196
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemBankTableExtraFields
            pointer: '0'
            pointerVariable: itemBankTableExtraFields
          -
            class_name: TestNodePort
            id: 457
            value: table
            node: 33
            variable: 197
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemBankType
            pointer: '0'
            pointerVariable: itemBankType
          -
            class_name: TestNodePort
            id: 458
            value: '6'
            node: 33
            variable: 198
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: itemNumLimit
            pointer: '0'
            pointerVariable: itemNumLimit
          -
            class_name: TestNodePort
            id: 459
            value: test_6
            node: 33
            variable: 199
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemTemplate
            pointer: '0'
            pointerVariable: itemTemplate
          -
            class_name: TestNodePort
            id: 460
            value: ''
            node: 33
            variable: 200
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemTemplateHtml
            pointer: '0'
            pointerVariable: itemTemplateHtml
          -
            class_name: TestNodePort
            id: 461
            value: ''
            node: 33
            variable: 201
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemTemplateParamsModule
            pointer: '0'
            pointerVariable: itemTemplateParamsModule
          -
            class_name: TestNodePort
            id: 462
            value: '0'
            node: 33
            variable: 202
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemTimeFullRequired
            pointer: '0'
            pointerVariable: itemTimeFullRequired
          -
            class_name: TestNodePort
            id: 463
            value: '0'
            node: 33
            variable: 203
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemTimeLimit
            pointer: '0'
            pointerVariable: itemTimeLimit
          -
            class_name: TestNodePort
            id: 464
            value: '1'
            node: 33
            variable: 206
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: itemsPerPage
            pointer: '0'
            pointerVariable: itemsPerPage
          -
            class_name: TestNodePort
            id: 465
            value: 'https://calbaptist.edu/_resources/images/Bell-Tower-No-Stroke.jpg'
            node: 33
            variable: 207
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: logo
            pointer: '0'
            pointerVariable: logo
          -
            class_name: TestNodePort
            id: 466
            value: '0'
            node: 33
            variable: 208
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: minAccuracy
            pointer: '0'
            pointerVariable: minAccuracy
          -
            class_name: TestNodePort
            id: 467
            value: '0'
            node: 33
            variable: 209
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: minAccuracyMinItems
            pointer: '0'
            pointerVariable: minAccuracyMinItems
          -
            class_name: TestNodePort
            id: 468
            value: dichotomous
            node: 33
            variable: 210
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: model
            pointer: '0'
            pointerVariable: model
          -
            class_name: TestNodePort
            id: 469
            value: Next
            node: 33
            variable: 211
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: nextButtonLabel
            pointer: '0'
            pointerVariable: nextButtonLabel
          -
            class_name: TestNodePort
            id: 470
            value: MFI
            node: 33
            variable: 212
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: nextItemCriterion
            pointer: '0'
            pointerVariable: nextItemCriterion
          -
            class_name: TestNodePort
            id: 471
            value: ''
            node: 33
            variable: 213
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: nextItemModule
            pointer: '0'
            pointerVariable: nextItemModule
          -
            class_name: TestNodePort
            id: 472
            value: '5'
            node: 33
            variable: 214
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: nextItemRandomesque
            pointer: '0'
            pointerVariable: nextItemRandomesque
          -
            class_name: TestNodePort
            id: 473
            value: cat
            node: 33
            variable: 215
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: order
            pointer: '0'
            pointerVariable: order
          -
            class_name: TestNodePort
            id: 474
            value: '{"table":"Troubleshooting_Responses","columns":{"id":"id","item_id":"item_id","score":"score","timeTaken":"timeTaken","session_id":"session_id","theta":"theta","sem":"sem","response":"response","trait":"trait","skipped":"skipped"}}'
            node: 33
            variable: 217
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: responseBank
            pointer: '0'
            pointerVariable: responseBank
          -
            class_name: TestNodePort
            id: 475
            value: '1'
            node: 33
            variable: 218
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: responseRequired
            pointer: '0'
            pointerVariable: responseRequired
          -
            class_name: TestNodePort
            id: 476
            value: 'Please answer all items on this page'
            node: 33
            variable: 219
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: responseRequiredAlert
            pointer: '0'
            pointerVariable: responseRequiredAlert
          -
            class_name: TestNodePort
            id: 477
            value: ''
            node: 33
            variable: 220
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: responseSavedModule
            pointer: '0'
            pointerVariable: responseSavedModule
          -
            class_name: TestNodePort
            id: 478
            value: ''
            node: 33
            variable: 221
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: responseScoreModule
            pointer: '0'
            pointerVariable: responseScoreModule
          -
            class_name: TestNodePort
            id: 479
            value: BM
            node: 33
            variable: 224
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: scoringMethod
            pointer: '0'
            pointerVariable: scoringMethod
          -
            class_name: TestNodePort
            id: 480
            value: null
            node: 33
            variable: 226
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 481
            value: '0'
            node: 33
            variable: 227
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionResuming
            pointer: '0'
            pointerVariable: sessionResuming
          -
            class_name: TestNodePort
            id: 482
            value: '{}'
            node: 33
            variable: 228
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionTable
            pointer: '0'
            pointerVariable: sessionTable
          -
            class_name: TestNodePort
            id: 483
            value: '1'
            node: 33
            variable: 229
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: showPageInfo
            pointer: '0'
            pointerVariable: showPageInfo
          -
            class_name: TestNodePort
            id: 484
            value: '0'
            node: 33
            variable: 230
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: startingTheta
            pointer: '0'
            pointerVariable: startingTheta
          -
            class_name: TestNodePort
            id: 485
            value: ''
            node: 33
            variable: 231
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: stopCheckModule
            pointer: '0'
            pointerVariable: stopCheckModule
          -
            class_name: TestNodePort
            id: 486
            value: '5'
            node: 33
            variable: 233
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: subGroupItemThreshold
            pointer: '0'
            pointerVariable: subGroupItemThreshold
          -
            class_name: TestNodePort
            id: 487
            value: ''
            node: 33
            variable: 234
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: templateResponseModule
            pointer: '0'
            pointerVariable: templateResponseModule
          -
            class_name: TestNodePort
            id: 488
            value: '0'
            node: 33
            variable: 236
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: testTimeLimit
            pointer: '0'
            pointerVariable: testTimeLimit
          -
            class_name: TestNodePort
            id: 489
            value: '0'
            node: 33
            variable: 237
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: testTimeLimitOffset
            pointer: '0'
            pointerVariable: testTimeLimitOffset
          -
            class_name: TestNodePort
            id: 490
            value: startedAgo
            node: 33
            variable: 238
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: testTimeLimitType
            pointer: '0'
            pointerVariable: testTimeLimitType
          -
            class_name: TestNodePort
            id: 491
            value: ''
            node: 33
            variable: 240
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: title
            pointer: '0'
            pointerVariable: title
          -
            class_name: TestNodePort
            id: 492
            value: null
            node: 33
            variable: 204
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: items
            pointer: '0'
            pointerVariable: items
          -
            class_name: TestNodePort
            id: 493
            value: null
            node: 33
            variable: 205
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: itemsAdministered
            pointer: '0'
            pointerVariable: itemsAdministered
          -
            class_name: TestNodePort
            id: 494
            value: null
            node: 33
            variable: 222
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: responseScores
            pointer: '0'
            pointerVariable: responseScores
          -
            class_name: TestNodePort
            id: 495
            value: null
            node: 33
            variable: 223
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: responses
            pointer: '0'
            pointerVariable: responses
          -
            class_name: TestNodePort
            id: 496
            value: null
            node: 33
            variable: 225
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: sem
            pointer: '0'
            pointerVariable: sem
          -
            class_name: TestNodePort
            id: 497
            value: null
            node: 33
            variable: 232
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: stopReason
            pointer: '0'
            pointerVariable: stopReason
          -
            class_name: TestNodePort
            id: 498
            value: null
            node: 33
            variable: 235
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: testTimeLeft
            pointer: '0'
            pointerVariable: testTimeLeft
          -
            class_name: TestNodePort
            id: 499
            value: null
            node: 33
            variable: 239
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: theta
            pointer: '0'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 500
            value: null
            node: 33
            variable: 241
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: totalScore
            pointer: '0'
            pointerVariable: totalScore
          -
            class_name: TestNodePort
            id: 501
            value: null
            node: 33
            variable: 242
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: traitScores
            pointer: '0'
            pointerVariable: traitScores
          -
            class_name: TestNodePort
            id: 502
            value: null
            node: 33
            variable: 243
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: traitSem
            pointer: '0'
            pointerVariable: traitSem
          -
            class_name: TestNodePort
            id: 503
            value: null
            node: 33
            variable: 244
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: traitTheta
            pointer: '0'
            pointerVariable: traitTheta
          -
            class_name: TestNodePort
            id: 504
            value: '0'
            node: 33
            variable: 216
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
      -
        class_name: TestNode
        id: 34
        title: ''
        type: 0
        posX: 15811
        posY: 15461
        flowTest: 28
        sourceTest: 21
        sourceTestName: displayResults
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 505
            value: '1'
            node: 34
            variable: 294
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: includeMathJax
            pointer: '0'
            pointerVariable: includeMathJax
          -
            class_name: TestNodePort
            id: 506
            value: '{"table":"EGR242_Test_2_Questions","columns":{"id":"id","question":"question","responseOptions":"responseOptions","trait":"trait","fixedIndex":"fixedIndex","p1":"p1","skippable":"skippable","instructions":"instructions"}}'
            node: 34
            variable: 296
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: questionTable
            pointer: '0'
            pointerVariable: questionTable
          -
            class_name: TestNodePort
            id: 507
            value: '{"table":"EGR242S21Responses","columns":{"id":"id","item_id":"item_id","score":"score","timeTaken":"timeTaken","session_id":"session_id","theta":"theta","sem":"sem","response":"response","trait":"trait","skipped":"skipped"}}'
            node: 34
            variable: 297
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: responseBank
            pointer: '0'
            pointerVariable: responseBank
          -
            class_name: TestNodePort
            id: 508
            value: null
            node: 34
            variable: 298
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 509
            value: '0'
            node: 34
            variable: 299
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: showAnswers
            pointer: '0'
            pointerVariable: showAnswers
          -
            class_name: TestNodePort
            id: 510
            value: '0'
            node: 34
            variable: 295
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
      -
        class_name: TestNode
        id: 35
        title: ''
        type: 0
        posX: 16428
        posY: 15188
        flowTest: 28
        sourceTest: 22
        sourceTestName: eval
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 511
            value: |
              toReturn = "";
              
              options(digits=3)
              
              
              raw_grade = 33/as.double(slope)*(theta-as.double(masteringThreshold)) + 90
              df<- c(raw_grade,100)
              capped_grade = min(df)
              df<- c(capped_grade,0)
              grade = max(df)
              
              
              worst_score = 999
              second_worst_score = 999
              worst_index = 0
              
              for (i in 1:length(traitSem)) {
                current_theta = traitTheta[[i]]
                if(current_theta < worst_score){
                  second_worst_index = worst_index
                  second_worst_score = worst_score
                  worst_index = i
                  worst_score = current_theta
                } else if (current_theta < second_worst_score){
                  second_worst_index = i
                  second_worst_score = current_theta
                }
              }
              
              toReturn = paste("The black line represents the knowledge level demonstrated in this assessment and the red line represents mastery level knowledge. <br><br>");
                
              if( grade <87){
                toReturn = paste(toReturn, "Your assessment did not demonstrate mastery. Please take a screenshot of this page and post it to Blackboard. You should then practice by completing more homework and studying more before retaking the test. <br><br>");
              } else if (grade < 90){
                          toReturn = paste(toReturn, "You were close to demonstrating mastery. Make sure to take a screenshot of this page and post it Blackboard and then study a little more and then you may reatke the test without doing additional homework. <br><br>");
              } else {
              toReturn = paste(toReturn, "Congratulations! You have demonstrated comprehensive mastery of Module 3. Make sure to take a screenshot of this page and post this to Blackboard. <br><br>");
              }
              
              
              if (grade < 90) {
                  toReturn = paste(toReturn, "You can improve the most by focusing on the material from ", names(traitSem)[worst_index], "and ", names(traitSem)[second_worst_index], ".");
              }
              
              toReturn = paste(toReturn, "You can have taken this test ", count, "times.");
              
            node: 35
            variable: 300
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 512
            value: null
            node: 35
            variable: 302
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 513
            value: '0'
            node: 35
            variable: 301
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 514
            value: ''
            node: 35
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: traitTheta
            pointer: '0'
            pointerVariable: traitTheta
          -
            class_name: TestNodePort
            id: 515
            value: ''
            node: 35
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: theta
            pointer: '0'
            pointerVariable: theta
          -
            class_name: TestNodePort
            id: 516
            value: ''
            node: 35
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: masteringThreshold
            pointer: '0'
            pointerVariable: intercept
          -
            class_name: TestNodePort
            id: 517
            value: ''
            node: 35
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: slope
            pointer: '0'
            pointerVariable: slope
          -
            class_name: TestNodePort
            id: 518
            value: ''
            node: 35
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: toReturn
            pointer: '0'
            pointerVariable: toReturn
          -
            class_name: TestNodePort
            id: 519
            value: ''
            node: 35
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: sem
            pointer: '0'
            pointerVariable: sem
          -
            class_name: TestNodePort
            id: 520
            value: ''
            node: 35
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: traitSem
            pointer: '0'
            pointerVariable: traitSem
          -
            class_name: TestNodePort
            id: 521
            value: ''
            node: 35
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: grade
            pointer: '0'
            pointerVariable: grade
          -
            class_name: TestNodePort
            id: 522
            value: ''
            node: 35
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: count
            pointer: '0'
            pointerVariable: count
      -
        class_name: TestNode
        id: 36
        title: ''
        type: 0
        posX: 16029
        posY: 15220
        flowTest: 28
        sourceTest: 22
        sourceTestName: eval
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 523
            value: |
              slope = 20;
              intercept =  70;
              
            node: 36
            variable: 300
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 524
            value: null
            node: 36
            variable: 302
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 525
            value: '0'
            node: 36
            variable: 301
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 526
            value: ''
            node: 36
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: intercept
            pointer: '0'
            pointerVariable: intercept
          -
            class_name: TestNodePort
            id: 527
            value: ''
            node: 36
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 1
            exposed: '1'
            name: slope
            pointer: '0'
            pointerVariable: slope
      -
        class_name: TestNode
        id: 37
        title: ''
        type: 0
        posX: 16728
        posY: 15440
        flowTest: 28
        sourceTest: 10
        sourceTestName: showPage
        sourceTestDescription: 'Shows page to user.'
        ports:
          -
            class_name: TestNodePort
            id: 528
            value: Next
            node: 37
            variable: 92
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: buttonLabel
            pointer: '0'
            pointerVariable: buttonLabel
          -
            class_name: TestNodePort
            id: 529
            value: ''
            node: 37
            variable: 93
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: content
            pointer: '0'
            pointerVariable: content
          -
            class_name: TestNodePort
            id: 530
            value: null
            node: 37
            variable: 94
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 531
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            node: 37
            variable: 96
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: footer
            pointer: '0'
            pointerVariable: footer
          -
            class_name: TestNodePort
            id: 532
            value: |
              <p>
              	<br />
              	{{toReturn}}
              </p>
              
            node: 37
            variable: 97
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: html
            pointer: '0'
            pointerVariable: html
          -
            class_name: TestNodePort
            id: 533
            value: ''
            node: 37
            variable: 98
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: logo
            pointer: '0'
            pointerVariable: logo
          -
            class_name: TestNodePort
            id: 534
            value: page
            node: 37
            variable: 103
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: template
            pointer: '0'
            pointerVariable: template
          -
            class_name: TestNodePort
            id: 535
            value: null
            node: 37
            variable: 104
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: templateParams
            pointer: '0'
            pointerVariable: templateParams
          -
            class_name: TestNodePort
            id: 536
            value: '0'
            node: 37
            variable: 105
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: timeLimit
            pointer: '0'
            pointerVariable: timeLimit
          -
            class_name: TestNodePort
            id: 537
            value: ''
            node: 37
            variable: 106
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: title
            pointer: '0'
            pointerVariable: title
          -
            class_name: TestNodePort
            id: 538
            value: null
            node: 37
            variable: 90
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 539
            value: null
            node: 37
            variable: 95
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 540
            value: null
            node: 37
            variable: 101
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: response
            pointer: '0'
            pointerVariable: response
          -
            class_name: TestNodePort
            id: 541
            value: '0'
            node: 37
            variable: 99
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 542
            value: ''
            node: 37
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: toReturn
            pointer: '0'
            pointerVariable: toReturn
          -
            class_name: TestNodePort
            id: 543
            value: null
            node: 37
            variable: 91
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: bgWorkers
            pointer: '0'
            pointerVariable: bgWorkers
          -
            class_name: TestNodePort
            id: 544
            value: '0'
            node: 37
            variable: 100
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: protectedFilesAccess
            pointer: '0'
            pointerVariable: protectedFilesAccess
          -
            class_name: TestNodePort
            id: 545
            value: '0'
            node: 37
            variable: 102
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionFilesAccess
            pointer: '0'
            pointerVariable: sessionFilesAccess
      -
        class_name: TestNode
        id: 38
        title: ''
        type: 0
        posX: 16703
        posY: 15190
        flowTest: 28
        sourceTest: 10
        sourceTestName: showPage
        sourceTestDescription: 'Shows page to user.'
        ports:
          -
            class_name: TestNodePort
            id: 546
            value: Next
            node: 38
            variable: 92
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: buttonLabel
            pointer: '0'
            pointerVariable: buttonLabel
          -
            class_name: TestNodePort
            id: 547
            value: ''
            node: 38
            variable: 93
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: content
            pointer: '0'
            pointerVariable: content
          -
            class_name: TestNodePort
            id: 548
            value: null
            node: 38
            variable: 94
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 549
            value: |
              Created with 
              <a href="http://www.concertoplatform.com" target="_blank">
              	Concerto Platform
              </a>
              
            node: 38
            variable: 96
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: footer
            pointer: '0'
            pointerVariable: footer
          -
            class_name: TestNodePort
            id: 550
            value: |
              <div style="height: 100vh; width: 100%; background-color: #E8E8E8; padding-top: 20vh;">
              	<div style="margin:0px auto; width: 80vw; height: 150px">
              		<div style="">
              			<p style="font-size:35pt">
              Level Of Mastery                   
              			</p>
              			<p>
              			</p>
              		</div>
              		<div style="background: linear-gradient(to right,red,yellow,green); border-radius:30px; border: 1px solid black; height: 100px;box-shadow: 5px 10px 18px #888888;">
              			<div style="height: 120px; border-radius:30px; border-left: 4px solid red; position:relative; bottom: 10px; left: 90%; width:0px;">
              				<p style="position: absolute; bottom:115px;margin-left:-30px;">
              Mastery                         
              				</p>
              			</div>
              			<div style="height: 120px; border-radius:30px; border-right: 4px solid black;bottom:130px; left:{{score}}%; position:relative;width:0px;">
              			</div>
              		</div>
              		<p style="font-size: 15pt; text-allign:start; margin-top:50px;">
              {{message}}             
              		</p>
              	</div>
              </div>
              
            node: 38
            variable: 97
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: html
            pointer: '0'
            pointerVariable: html
          -
            class_name: TestNodePort
            id: 551
            value: ''
            node: 38
            variable: 98
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: logo
            pointer: '0'
            pointerVariable: logo
          -
            class_name: TestNodePort
            id: 552
            value: page
            node: 38
            variable: 103
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: template
            pointer: '0'
            pointerVariable: template
          -
            class_name: TestNodePort
            id: 553
            value: null
            node: 38
            variable: 104
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: templateParams
            pointer: '0'
            pointerVariable: templateParams
          -
            class_name: TestNodePort
            id: 554
            value: '0'
            node: 38
            variable: 105
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: timeLimit
            pointer: '0'
            pointerVariable: timeLimit
          -
            class_name: TestNodePort
            id: 555
            value: 'green bar show page'
            node: 38
            variable: 106
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: title
            pointer: '0'
            pointerVariable: title
          -
            class_name: TestNodePort
            id: 556
            value: null
            node: 38
            variable: 90
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: .branch
            pointer: '0'
            pointerVariable: .branch
          -
            class_name: TestNodePort
            id: 557
            value: null
            node: 38
            variable: 95
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: cookies
            pointer: '0'
            pointerVariable: cookies
          -
            class_name: TestNodePort
            id: 558
            value: null
            node: 38
            variable: 101
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: response
            pointer: '0'
            pointerVariable: response
          -
            class_name: TestNodePort
            id: 559
            value: '0'
            node: 38
            variable: 99
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 560
            value: ''
            node: 38
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: message
            pointer: '0'
            pointerVariable: message
          -
            class_name: TestNodePort
            id: 561
            value: ''
            node: 38
            variable: null
            string: '1'
            defaultValue: '1'
            dynamic: '1'
            type: 0
            exposed: '1'
            name: score
            pointer: '0'
            pointerVariable: score
          -
            class_name: TestNodePort
            id: 562
            value: null
            node: 38
            variable: 91
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: bgWorkers
            pointer: '0'
            pointerVariable: bgWorkers
          -
            class_name: TestNodePort
            id: 563
            value: '0'
            node: 38
            variable: 100
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: protectedFilesAccess
            pointer: '0'
            pointerVariable: protectedFilesAccess
          -
            class_name: TestNodePort
            id: 564
            value: '0'
            node: 38
            variable: 102
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionFilesAccess
            pointer: '0'
            pointerVariable: sessionFilesAccess
      -
        class_name: TestNode
        id: 39
        title: ''
        type: 0
        posX: 16106
        posY: 15417
        flowTest: 28
        sourceTest: 25
        sourceTestName: SessionIDCounter
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 565
            value: ''
            node: 39
            variable: 317
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: SessionTable
            pointer: '0'
            pointerVariable: SessionTable
          -
            class_name: TestNodePort
            id: 566
            value: ''
            node: 39
            variable: 316
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: SessionResultTable
            pointer: '0'
            pointerVariable: SessionResultTable
          -
            class_name: TestNodePort
            id: 567
            value: ''
            node: 39
            variable: 315
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '1'
            name: SessionID
            pointer: '0'
            pointerVariable: SessionID
          -
            class_name: TestNodePort
            id: 568
            value: null
            node: 39
            variable: 321
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: userID
            pointer: '0'
            pointerVariable: userID
          -
            class_name: TestNodePort
            id: 569
            value: null
            node: 39
            variable: 320
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: testID
            pointer: '0'
            pointerVariable: testID
          -
            class_name: TestNodePort
            id: 570
            value: null
            node: 39
            variable: 318
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '1'
            name: count
            pointer: '0'
            pointerVariable: count
          -
            class_name: TestNodePort
            id: 571
            value: '0'
            node: 39
            variable: 319
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
      -
        class_name: TestNode
        id: 40
        title: ''
        type: 0
        posX: 16443
        posY: 15557
        flowTest: 28
        sourceTest: 22
        sourceTestName: eval
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 572
            value: ''
            node: 40
            variable: 300
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: code
            pointer: '0'
            pointerVariable: code
          -
            class_name: TestNodePort
            id: 573
            value: null
            node: 40
            variable: 302
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: result
            pointer: '0'
            pointerVariable: result
          -
            class_name: TestNodePort
            id: 574
            value: '0'
            node: 40
            variable: 301
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
      -
        class_name: TestNode
        id: 41
        title: ''
        type: 0
        posX: 16890
        posY: 15140
        flowTest: 28
        sourceTest: 27
        sourceTestName: finishSession
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 575
            value: null
            node: 41
            variable: 327
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 576
            value: '{"table":"sessions","columns":{"finished":"finished","updateTime":"updateTime"}}'
            node: 41
            variable: 329
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionBankTable
            pointer: '0'
            pointerVariable: sessionBankTable
          -
            class_name: TestNodePort
            id: 577
            value: null
            node: 41
            variable: 328
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: session
            pointer: '0'
            pointerVariable: session
          -
            class_name: TestNodePort
            id: 578
            value: '0'
            node: 41
            variable: 326
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
    nodesConnections:
      -
        class_name: TestNodeConnection
        id: 96
        flowTest: 28
        sourceNode: 28
        sourcePort: 393
        destinationNode: 30
        destinationPort: null
        returnFunction: authorized
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 97
        flowTest: 28
        sourceNode: 28
        sourcePort: 394
        destinationNode: 32
        destinationPort: null
        returnFunction: unauthorized
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 98
        flowTest: 28
        sourceNode: 29
        sourcePort: 408
        destinationNode: 28
        destinationPort: 385
        returnFunction: password
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 99
        flowTest: 28
        sourceNode: 29
        sourcePort: 406
        destinationNode: 28
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 100
        flowTest: 28
        sourceNode: 29
        sourcePort: 407
        destinationNode: 28
        destinationPort: 384
        returnFunction: login
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 101
        flowTest: 28
        sourceNode: 29
        sourcePort: 408
        destinationNode: 28
        destinationPort: 385
        returnFunction: password
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 102
        flowTest: 28
        sourceNode: 25
        sourcePort: null
        destinationNode: 29
        destinationPort: null
        returnFunction: ''
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 103
        flowTest: 28
        sourceNode: 30
        sourcePort: 417
        destinationNode: 33
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 104
        flowTest: 28
        sourceNode: 30
        sourcePort: 416
        destinationNode: 27
        destinationPort: 381
        returnFunction: session
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 105
        flowTest: 28
        sourceNode: 30
        sourcePort: 416
        destinationNode: 31
        destinationPort: 419
        returnFunction: session
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 106
        flowTest: 28
        sourceNode: 29
        sourcePort: 407
        destinationNode: 31
        destinationPort: 418
        returnFunction: ' mylist = list(user=login)'
        defaultReturnFunction: '0'
      -
        class_name: TestNodeConnection
        id: 107
        flowTest: 28
        sourceNode: 27
        sourcePort: 383
        destinationNode: 31
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 108
        flowTest: 28
        sourceNode: 30
        sourcePort: 416
        destinationNode: 33
        destinationPort: 480
        returnFunction: session
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 109
        flowTest: 28
        sourceNode: 28
        sourcePort: 392
        destinationNode: 30
        destinationPort: 415
        returnFunction: user
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 110
        flowTest: 28
        sourceNode: 32
        sourcePort: 435
        destinationNode: 26
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 111
        flowTest: 28
        sourceNode: 33
        sourcePort: 499
        destinationNode: 27
        destinationPort: 380
        returnFunction: 'mylist = list(theta=theta)'
        defaultReturnFunction: '0'
      -
        class_name: TestNodeConnection
        id: 112
        flowTest: 28
        sourceNode: 30
        sourcePort: 416
        destinationNode: 34
        destinationPort: 508
        returnFunction: session
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 113
        flowTest: 28
        sourceNode: 31
        sourcePort: 421
        destinationNode: 36
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 114
        flowTest: 28
        sourceNode: 33
        sourcePort: 504
        destinationNode: 27
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 115
        flowTest: 28
        sourceNode: 33
        sourcePort: 503
        destinationNode: 35
        destinationPort: 514
        returnFunction: traitTheta
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 116
        flowTest: 28
        sourceNode: 33
        sourcePort: 499
        destinationNode: 35
        destinationPort: 515
        returnFunction: theta
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 117
        flowTest: 28
        sourceNode: 34
        sourcePort: 510
        destinationNode: 36
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 118
        flowTest: 28
        sourceNode: 35
        sourcePort: 513
        destinationNode: 38
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 119
        flowTest: 28
        sourceNode: 35
        sourcePort: 518
        destinationNode: 37
        destinationPort: 542
        returnFunction: toReturn
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 120
        flowTest: 28
        sourceNode: 33
        sourcePort: 502
        destinationNode: 35
        destinationPort: 520
        returnFunction: traitSem
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 121
        flowTest: 28
        sourceNode: 33
        sourcePort: 496
        destinationNode: 35
        destinationPort: 519
        returnFunction: sem
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 122
        flowTest: 28
        sourceNode: 35
        sourcePort: 518
        destinationNode: 38
        destinationPort: 560
        returnFunction: toReturn
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 123
        flowTest: 28
        sourceNode: 35
        sourcePort: 521
        destinationNode: 38
        destinationPort: 561
        returnFunction: grade
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 124
        flowTest: 28
        sourceNode: 38
        sourcePort: 559
        destinationNode: 26
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 125
        flowTest: 28
        sourceNode: 25
        sourcePort: 368
        destinationNode: 39
        destinationPort: 566
        returnFunction: sessionResultsBank
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 126
        flowTest: 28
        sourceNode: 25
        sourcePort: 365
        destinationNode: 33
        destinationPort: 455
        returnFunction: questionBank
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 127
        flowTest: 28
        sourceNode: 25
        sourcePort: 369
        destinationNode: 29
        destinationPort: 404
        returnFunction: testName
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 128
        flowTest: 28
        sourceNode: 30
        sourcePort: 416
        destinationNode: 39
        destinationPort: 567
        returnFunction: session
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 129
        flowTest: 28
        sourceNode: 36
        sourcePort: 525
        destinationNode: 39
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 130
        flowTest: 28
        sourceNode: 39
        sourcePort: 571
        destinationNode: 35
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 131
        flowTest: 28
        sourceNode: 39
        sourcePort: 570
        destinationNode: 35
        destinationPort: 522
        returnFunction: count=3
        defaultReturnFunction: '0'
      -
        class_name: TestNodeConnection
        id: 132
        flowTest: 28
        sourceNode: 39
        sourcePort: 570
        destinationNode: 35
        destinationPort: 522
        returnFunction: count
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 133
        flowTest: 28
        sourceNode: 25
        sourcePort: 373
        destinationNode: 35
        destinationPort: 517
        returnFunction: scoringSlope
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 134
        flowTest: 28
        sourceNode: 25
        sourcePort: 374
        destinationNode: 35
        destinationPort: 516
        returnFunction: masteringThreshold
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 135
        flowTest: 28
        sourceNode: 25
        sourcePort: 375
        destinationNode: 33
        destinationPort: 458
        returnFunction: ItemNumLimit
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 136
        flowTest: 28
        sourceNode: 25
        sourcePort: 367
        destinationNode: 30
        destinationPort: 414
        returnFunction: sessionBank
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 137
        flowTest: 28
        sourceNode: 25
        sourcePort: 372
        destinationNode: 28
        destinationPort: 388
        returnFunction: userBank
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 138
        flowTest: 28
        sourceNode: 25
        sourcePort: 377
        destinationNode: 39
        destinationPort: 565
        returnFunction: sessionBank2
        defaultReturnFunction: '1'
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: bfe75f48cae8ae6fffac9d21922ffde601a80d88
  -
    class_name: DataTable
    id: 4
    name: Troubleshooting_SessionResults
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: name
        type: string
        nullable: true
        length: 1024
      -
        name: value
        type: text
        nullable: false
        length: ''
      -
        name: session_id
        type: string
        nullable: true
        length: 1024
    groups: ''
    starterContent: false
    hash: 38ad390ed64bca8627bd5a870babd9d2629764c2
  -
    class_name: DataTable
    id: 5
    name: EGR242S23users
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: login
        type: string
        nullable: false
        length: 1024
      -
        name: password
        type: string
        nullable: false
        length: 1024
      -
        name: enabled
        type: boolean
        nullable: false
        length: ''
    groups: ''
    starterContent: false
    hash: f32d89b2f6a9dec7741460ae71ea3fa2e9f48f37
  -
    class_name: DataTable
    id: 6
    name: EGR242S21sessions
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: internal_id
        type: bigint
        nullable: false
        length: ''
      -
        name: test_id
        type: bigint
        nullable: false
        length: ''
      -
        name: user_id
        type: bigint
        nullable: false
        length: ''
      -
        name: startedTime
        type: datetime
        nullable: false
        length: ''
      -
        name: updateTime
        type: datetime
        nullable: false
        length: ''
      -
        name: finished
        type: boolean
        nullable: false
        length: ''
      -
        name: state
        type: text
        nullable: true
        length: ''
    groups: ''
    starterContent: false
    hash: 78827070c8a34229b11fec72023fd368ec3c0ce5
  -
    class_name: DataTable
    id: 7
    name: EGR242_Module3_Review_Assessment_Questions
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: fixedIndex
        type: text
        nullable: true
        length: ''
      -
        name: trait
        type: text
        nullable: true
        length: ''
      -
        name: question
        type: text
        nullable: false
        length: ''
      -
        name: responseOptions
        type: text
        nullable: false
        length: ''
      -
        name: p1
        type: float
        nullable: true
        length: ''
      -
        name: p2
        type: float
        nullable: true
        length: ''
      -
        name: p3
        type: float
        nullable: true
        length: ''
      -
        name: p4
        type: float
        nullable: true
        length: ''
      -
        name: skippable
        type: boolean
        nullable: true
        length: ''
      -
        name: instructions
        type: text
        nullable: true
        length: ''
      -
        name: SubGroupId
        type: integer
        nullable: true
        length: ''
      -
        name: SubGroupSortOrder
        type: integer
        nullable: true
        length: ''
    groups: ''
    starterContent: false
    hash: 04577b85d866efc989abbb27b9642302d4ea4058
  -
    class_name: DataTable
    id: 8
    name: Troubleshooting_Responses
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: item_id
        type: bigint
        nullable: false
        length: ''
      -
        name: response
        type: string
        nullable: false
        length: 1024
      -
        name: score
        type: float
        nullable: true
        length: ''
      -
        name: timeTaken
        type: float
        nullable: false
        length: ''
      -
        name: session_id
        type: string
        nullable: false
        length: 1024
      -
        name: theta
        type: float
        nullable: false
        length: ''
      -
        name: sem
        type: float
        nullable: false
        length: ''
      -
        name: trait
        type: string
        nullable: true
        length: 1024
      -
        name: skipped
        type: boolean
        nullable: false
        length: ''
    groups: ''
    starterContent: false
    hash: d47413041f4c2cb5acce9fef84ba2c0eae4eff93
  -
    class_name: DataTable
    id: 9
    name: EGR242_Test_2_Questions
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: fixedIndex
        type: text
        nullable: true
        length: ''
      -
        name: trait
        type: text
        nullable: true
        length: ''
      -
        name: question
        type: text
        nullable: false
        length: ''
      -
        name: responseOptions
        type: text
        nullable: false
        length: ''
      -
        name: p1
        type: float
        nullable: true
        length: ''
      -
        name: p2
        type: float
        nullable: true
        length: ''
      -
        name: p3
        type: float
        nullable: true
        length: ''
      -
        name: p4
        type: float
        nullable: true
        length: ''
      -
        name: skippable
        type: boolean
        nullable: true
        length: ''
      -
        name: instructions
        type: text
        nullable: true
        length: ''
      -
        name: SubGroupId
        type: integer
        nullable: true
        length: ''
      -
        name: SubGroupSortOrder
        type: integer
        nullable: true
        length: ''
    groups: ''
    starterContent: false
    hash: 4364d789203d5a868e6f43508707274f350b797e
  -
    class_name: DataTable
    id: 10
    name: EGR242S21Responses
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: item_id
        type: bigint
        nullable: false
        length: ''
      -
        name: response
        type: string
        nullable: false
        length: 1024
      -
        name: score
        type: float
        nullable: true
        length: ''
      -
        name: timeTaken
        type: float
        nullable: false
        length: ''
      -
        name: session_id
        type: string
        nullable: false
        length: 1024
      -
        name: theta
        type: float
        nullable: false
        length: ''
      -
        name: sem
        type: float
        nullable: false
        length: ''
      -
        name: trait
        type: string
        nullable: true
        length: 1024
      -
        name: skipped
        type: boolean
        nullable: false
        length: ''
    groups: ''
    starterContent: false
    hash: 9fdf7dcb61cd69cd825d25d2ea930759ad57776a
  -
    class_name: ViewTemplate
    id: 5
    name: test_6
    description: ''
    accessibility: 2
    archived: '0'
    head: '<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>'
    css: |
      :root {
        --option-bg: #f3f3f3;
        --option-hover-bg: #efefef;
        --option-color: #000000;
        --option-unselected-bg: #ffffd5;
        --error-color: #f32828;
        --accent-light-color: #45b87e;
        --accent-dark-color: #35a26b;
        --font-color-for-accent-bg: #ffffff;
        --main-font-style: 'Open Sans', sans-serif;
        --main-font-color: #000000;
        --main-font-size: 16px;
        --header-bg: #4581b5;
        --header-color: #ffffff;
      }
      
      .body {
        min-height: 100vh;
        position: relative;
        font-size: var(--main-font-size);
        font-family: var(--main-font-style);
        color: var(--main-font-color);
        display: flex;
        flex-direction: column;
      }
      
      .container {
        max-width: 1000px;
        margin: auto;
        padding: 20px;
      }
      
      .main-btn {
        background-color: var(--accent-light-color);
        border: none;
        padding: 10px 20px;
        font-size: var(--main-font-size);
        color: var(--font-color-for-accent-bg);
        display: block;
        min-width: 100px;
        cursor: pointer;
        -webkit-transform: perspective(1px) translateZ(0);
        transform: perspective(1px) translateZ(0);
        -webkit-transition-duration: 0.3s;
        transition-duration: 0.3s;
        -webkit-transition-property: background-color;
        transition-property: background-color;
        outline: none;
      }
      
      .main-btn:hover {
        background-color: var(--accent-dark-color);
      }
      
      .main-btn:disabled {
        background-color: var(--option-hover-bg);
        color: #ccc;
        cursor: default;
      }
      
      .left-btn {
        margin: 0 auto 0 0;
      }
      
      .right-btn {
        margin: 0 0 0 auto;
      }
      
      /*QUESTIONS*/
      .question-text {
        font-weight: 600;
        text-align: center;
        margin: 20px auto;
      }
      
      .question-footer {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin-top: 20px;
      }
      
      .question-page {
        font-size: 14px;
        padding: 10px 0;
      }
      
      .form-error {
        color: var(--error-color);
        font-size: 14px;
        position: relative;
        top: -18px;
        text-align: center;
      }
      
      @media screen and (max-width: 500px) {
        .question-text {
          font-size: 14px;
        }
      
        .main-btn {
          min-width: 0;
        }
      }
      
      .instructions {
        margin-bottom: 20px;
      }
      
    js: |
      testRunner.controllerProvider.register("test", function ($scope) {
        $scope.instructions = testRunner.R.instructions;
        $scope.items = testRunner.R.items;
        $scope.canGoBack = testRunner.R.canGoBack == 1;
        $scope.responseRequired = testRunner.R.responseRequired == 1;
        $scope.responseRequiredAlert = testRunner.R.responeRequiredAlert;
        $scope.page = testRunner.R.page;
        $scope.totalPages = testRunner.R.totalPages;
        $scope.pastResponses = testRunner.R.responses;
        $scope.responses = {};
        $scope.nextButtonLabel = testRunner.R.nextButtonLabel;
        $scope.backButtonLabel = testRunner.R.backButtonLabel;
        $scope.showPageInfo = testRunner.R.showPageInfo == 1;
      
        if ($scope.pastResponses) {
          for (var i = 0; i < $scope.pastResponses.length; i++) {
            var response = $scope.pastResponses[i];
            $scope.responses["r" + response.item_id] = typeof response.response === 'object' ? response.response : {value: response.response};
          }
        }
      
        for (var i = 0; i < $scope.items.length; i++) {
          var item = $scope.items[i];
          if (typeof item.responseOptions === "string") {
            item.responseOptions = JSON.parse(item.responseOptions);
            $scope.items[i] = item;
          }
          $scope.items[i] = item;
      
          if (typeof $scope.responses["r" + item.id] === 'undefined') {
            $scope.responses["r" + item.id] = {};
          }
        }
      });
      
    html: |
      <src>
      	{{template:itemOpen,css=FALSE,html=FALSE}}
      	{{template:itemOptions,css=FALSE,html=FALSE}}
      	{{template:itemPainMannequin,css=FALSE,html=FALSE}}
      	{{template:itemGracelyScale,css=FALSE,html=FALSE}}
      </src>
      <script type="text/javascript" async
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML" async>
      </script>
      
      <div class="body" ng-controller="test">
      	{{template:header}}
      	<div class="questions">
      		<div class="container">
      			<div class="instructions" ng-if="instructions">
      				{{instructions}}
      			</div>
      
      			<form autocomplete="off" name="form">
      				<div ng-repeat="item in items">
      					<div class="question-text" ng-html="item.question">
      					</div>
      
      					<div ng-switch="item.responseOptions.type">
      						<src>
      							<item-open item="item" ng-switch-when="open" response="responses['r' + item.id]" response-required="responseRequired"></item-open>
      							<item-options item="item" ng-switch-when="options" response="responses['r' + item.id]" response-required="responseRequired"></item-options>
      							<item-pain-mannequin item="item" ng-switch-when="painMannequin" response="responses['r' + item.id]" response-required="responseRequired"></item-pain-mannequin>
      							<item-gracely-scale item="item" ng-switch-when="gracelyScale" response="responses['r' + item.id]" response-required="responseRequired"></item-gracely-scale>
      						</src>
      					</div>
      
      					<div class="form-error" ng-show="form.response.$error.required && form.response.$dirty">
      						{{responseRequiredAlert}}
      					</div>
      				</div>
      
      				<div class="question-footer">
      					<button class="main-btn left-btn" name="back" ng-show="canGoBack">
      						{{backButtonLabel}}
      					</button>
      					<div class="question-page" ng-show="showPageInfo && page != null && totalPages != null">
      						Page [[page]] / [[totalPages]]
      					</div>
      					<button class="main-btn right-btn" id="submitButton" name="next" ng-disabled="form.$invalid">
      						{{nextButtonLabel}}
      					</button>
      				</div>
      			</form>
      		</div>
      	</div>
      	{{template:footer}}
      </div>
      <script type="text/javascript"
         src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML">
      </script><script>
           window.MathJax = {
              tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
            }; 
      </script>
      
    groups: ''
    starterContent: false
    hash: 63ba7a64eb98bc3bfdb325c9823ed8bf0f88dd7f
  -
    class_name: TestWizard
    id: 13
    name: 'Generic Test Wizard'
    description: ''
    accessibility: 0
    archived: '0'
    steps:
      -
        class_name: TestWizardStep
        id: 19
        title: 'Drop Down Tables'
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 13
        params:
          -
            class_name: TestWizardParam
            id: 99
            label: 'Content Balancing Settings'
            description: |
              <p>
              	Each entry in the table consist of two fields:
              </p>
              
              <ul>
              	<li>
              		<strong>
              			Group Name 
              		</strong>
              		- trait name
              	</li>
              	<li>
              		<strong>
              			Group Proportion 
              		</strong>
              		 - numerical value specifying the proportion of items from each trait to be used by the next item selection algorithm
              	</li>
              </ul>
              
              <p>
              	<em>
              		e.g. group1_proportion=1, group2_proportion=2 will mean that the next item algorithm will try to show twice as many items from group2 as from group1
              	</em>
              </p>
              
            hideCondition: ''
            type: 10
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 334
            name: contentBalancingTable
            wizardStep: 19
            stepTitle: 'Drop Down Tables'
            order: 0
            wizard: 13
            definition:
              element:
                type: 9
                definition:
                  fields:
                    -
                      name: name
                      type: 0
                      label: 'Group Name'
                      definition:
                        placeholder: 0
                    -
                      name: proportion
                      type: 0
                      label: 'Group Proportion'
                      definition:
                        placeholder: 0
                  placeholder: 0
          -
            class_name: TestWizardParam
            id: 100
            label: 'Question Bank'
            description: ''
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 337
            name: questionBank
            wizardStep: 19
            stepTitle: 'Drop Down Tables'
            order: 0
            wizard: 13
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: question
                  label: Question
                  tooltip: ''
                -
                  name: responseOptions
                  label: 'Response Options'
                  tooltip: ''
                -
                  name: trait
                  label: Trait
                  tooltip: ''
                -
                  name: fixedIndex
                  label: 'Fixed Index'
                  tooltip: ''
                -
                  name: p1
                  label: 'Item Parameter #1'
                  tooltip: ''
                -
                  name: skippable
                  label: Skippable
                  tooltip: Optional
                -
                  name: instructions
                  label: Instructions
                  tooltip: Optional
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 101
            label: 'Response Bank'
            description: ''
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 338
            name: responseBank
            wizardStep: 19
            stepTitle: 'Drop Down Tables'
            order: 0
            wizard: 13
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: item_id
                  label: 'Item id'
                  tooltip: ''
                -
                  name: score
                  label: Score
                  tooltip: ''
                -
                  name: time_taken
                  label: 'Time taken'
                  tooltip: ''
                -
                  name: session_id
                  label: 'Session id'
                  tooltip: ''
                -
                  name: theta
                  label: theta
                  tooltip: ''
                -
                  name: sem
                  label: SEM
                  tooltip: ''
                -
                  name: response
                  label: response
                  tooltip: ''
                -
                  name: trait
                  label: trait
                  tooltip: ''
                -
                  name: skipped
                  label: skipped
                  tooltip: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 102
            label: 'Session Bank'
            description: ''
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 340
            name: sessionBank
            wizardStep: 19
            stepTitle: 'Drop Down Tables'
            order: 0
            wizard: 13
            definition:
              cols:
                -
                  name: id
                  label: Id
                  tooltip: ''
                -
                  name: internal_id
                  label: 'Internal id'
                  tooltip: ''
                -
                  name: user_id
                  label: 'User id'
                  tooltip: ''
                -
                  name: test_id
                  label: 'Test id'
                  tooltip: ''
                -
                  name: started_time
                  label: 'Started time'
                  tooltip: ''
                -
                  name: update_time
                  label: 'Update time'
                  tooltip: ''
                -
                  name: finished
                  label: Finished
                  tooltip: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 103
            label: 'Session Bank 2'
            description: "This is a band-aid for the test to run. In a nutshell, the starter content needs JSON objects but our code needs a single string (Type: table). there is two blocks that need session bank however, one block is from starter code and the other is from us. TODO: parse the JSON object to get the table name THEN pass it into our block.\_"
            hideCondition: ''
            type: 6
            passableThroughUrl: '0'
            value: ''
            testVariable: 341
            name: sessionBank2
            wizardStep: 19
            stepTitle: 'Drop Down Tables'
            order: 0
            wizard: 13
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 104
            label: 'Session Results Bank'
            description: ''
            hideCondition: ''
            type: 6
            passableThroughUrl: '0'
            value: ''
            testVariable: 342
            name: sessionResultsBank
            wizardStep: 19
            stepTitle: 'Drop Down Tables'
            order: 0
            wizard: 13
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 105
            label: 'User Bank'
            description: ''
            hideCondition: ''
            type: 12
            passableThroughUrl: '0'
            value: '[]'
            testVariable: 345
            name: userBank
            wizardStep: 19
            stepTitle: 'Drop Down Tables'
            order: 0
            wizard: 13
            definition:
              cols:
                -
                  name: id
                  label: ID
                  tooltip: ''
                -
                  name: login
                  label: Login
                  tooltip: ''
                -
                  name: password
                  label: Password
                  tooltip: ''
                -
                  name: enabled
                  label: Enabled
                  tooltip: ''
              placeholder: 0
      -
        class_name: TestWizardStep
        id: 20
        title: 'Type-in Vars'
        description: ''
        orderNum: 0
        colsNum: 0
        wizard: 13
        params:
          -
            class_name: TestWizardParam
            id: 106
            label: ItemNumberLimit
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 330
            name: ItemNumLimit
            wizardStep: 20
            stepTitle: 'Type-in Vars'
            order: 0
            wizard: 13
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 107
            label: 'Mastering Threshold'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 335
            name: masteringThreshold
            wizardStep: 20
            stepTitle: 'Type-in Vars'
            order: 0
            wizard: 13
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 108
            label: NewItemNumLimit
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 331
            name: NewItemNumLimit
            wizardStep: 20
            stepTitle: 'Type-in Vars'
            order: 0
            wizard: 13
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 109
            label: 'Scoring Slope'
            description: |
              <p>
              	Multiplier used for the slope for calculating the student's score to give visual feedback 
              </p>
              
              <p>
              	Score = min(100, scoringSlope*(theta-masteringThreshold)+90) 
              </p>
              
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 339
            name: scoringSlope
            wizardStep: 20
            stepTitle: 'Type-in Vars'
            order: 0
            wizard: 13
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 110
            label: 'Test Name'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 343
            name: testName
            wizardStep: 20
            stepTitle: 'Type-in Vars'
            order: 0
            wizard: 13
            definition:
              defvalue: ''
              placeholder: 0
          -
            class_name: TestWizardParam
            id: 111
            label: 'Test Name for Results'
            description: ''
            hideCondition: ''
            type: 0
            passableThroughUrl: '0'
            value: ''
            testVariable: 344
            name: testNameforResults
            wizardStep: 20
            stepTitle: 'Type-in Vars'
            order: 0
            wizard: 13
            definition:
              defvalue: ''
              placeholder: 0
    test: 28
    groups: ''
    starterContent: false
    hash: c00c91a7fb6504e9b5e7157c5e09257bb9d39429
  -
    class_name: Test
    id: 29
    name: 'Generic Test Block'
    accessibility: 0
    archived: '0'
    visibility: 0
    type: 1
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 346
        name: ItemNumLimit
        type: 0
        description: 'Number of questions the test will ask before stopping'
        passableThroughUrl: '0'
        value: ''
        test: 29
        parentVariable: 330
      -
        class_name: TestVariable
        id: 347
        name: NewItemNumLimit
        type: 0
        description: 'Number of new questions asked to student before ending'
        passableThroughUrl: '0'
        value: ''
        test: 29
        parentVariable: 331
      -
        class_name: TestVariable
        id: 348
        name: SD
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 29
        parentVariable: 332
      -
        class_name: TestVariable
        id: 349
        name: Score
        type: 1
        description: ''
        passableThroughUrl: '0'
        value: null
        test: 29
        parentVariable: 333
      -
        class_name: TestVariable
        id: 350
        name: contentBalancingTable
        type: 0
        description: |
          <p>
          	Each entry in the table consist of two fields:
          </p>
          
          <ul>
          	<li>
          		<strong>
          			Group Name 
          		</strong>
          		- trait name
          	</li>
          	<li>
          		<strong>
          			Group Proportion 
          		</strong>
          		 - numerical value specifying the proportion of items from each trait to be used by the next item selection algorithm
          	</li>
          </ul>
          
          <p>
          	<em>
          		e.g. group1_proportion=1, group2_proportion=2 will mean that the next item algorithm will try to show twice as many items from group2 as from group1
          	</em>
          </p>
          
        passableThroughUrl: '0'
        value: '[]'
        test: 29
        parentVariable: 334
      -
        class_name: TestVariable
        id: 351
        name: masteringThreshold
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 29
        parentVariable: 335
      -
        class_name: TestVariable
        id: 352
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 29
        parentVariable: 336
      -
        class_name: TestVariable
        id: 353
        name: questionBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 29
        parentVariable: 337
      -
        class_name: TestVariable
        id: 354
        name: responseBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 29
        parentVariable: 338
      -
        class_name: TestVariable
        id: 355
        name: scoringSlope
        type: 0
        description: |
          <p>
          	Multiplier used for the slope for calculating the student's score to give visual feedback 
          </p>
          
          <p>
          	Score = min(100, scoringSlope*(theta-masteringThreshold)+90) 
          </p>
          
        passableThroughUrl: '0'
        value: ''
        test: 29
        parentVariable: 339
      -
        class_name: TestVariable
        id: 356
        name: sessionBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 29
        parentVariable: 340
      -
        class_name: TestVariable
        id: 357
        name: sessionBank2
        type: 0
        description: "this is a band-aid for the test to run. In a nutshell, the starter content needs JSON objects but our code needs a singe string. there is two blocks that need session bank however, one block is from starter code and the other is from us. TODO: parse the JSON object to get the table name THEN pass it into our block.\_"
        passableThroughUrl: '0'
        value: ''
        test: 29
        parentVariable: 341
      -
        class_name: TestVariable
        id: 358
        name: sessionResultsBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 29
        parentVariable: 342
      -
        class_name: TestVariable
        id: 359
        name: testName
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 29
        parentVariable: 343
      -
        class_name: TestVariable
        id: 360
        name: testNameforResults
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: ''
        test: 29
        parentVariable: 344
      -
        class_name: TestVariable
        id: 361
        name: userBank
        type: 0
        description: ''
        passableThroughUrl: '0'
        value: '[]'
        test: 29
        parentVariable: 345
    sourceWizard: 13
    sourceWizardTest: 68
    nodes: {  }
    nodesConnections: {  }
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: e96cbbf618828aa52fbaa8f7573b7dd7bd145635
  -
    class_name: Test
    id: 30
    name: 'Testing Big Block Test'
    accessibility: 0
    archived: '0'
    visibility: 0
    type: 2
    code: ''
    description: ''
    variables:
      -
        class_name: TestVariable
        id: 362
        name: out
        type: 2
        description: ''
        passableThroughUrl: '0'
        value: '0'
        test: 30
        parentVariable: null
    sourceWizard: null
    sourceWizardTest: null
    nodes:
      -
        class_name: TestNode
        id: 42
        title: ''
        type: 1
        posX: 15000
        posY: 15000
        flowTest: 30
        sourceTest: 30
        sourceTestName: 'Testing Big Block Test'
        sourceTestDescription: ''
        ports: {  }
      -
        class_name: TestNode
        id: 43
        title: ''
        type: 2
        posX: 15500
        posY: 15100
        flowTest: 30
        sourceTest: 30
        sourceTestName: 'Testing Big Block Test'
        sourceTestDescription: ''
        ports: {  }
      -
        class_name: TestNode
        id: 44
        title: ''
        type: 0
        posX: 15201
        posY: 15069
        flowTest: 30
        sourceTest: 29
        sourceTestName: 'Generic Test Block'
        sourceTestDescription: ''
        ports:
          -
            class_name: TestNodePort
            id: 579
            value: '3'
            node: 44
            variable: 346
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: ItemNumLimit
            pointer: '0'
            pointerVariable: ItemNumLimit
          -
            class_name: TestNodePort
            id: 580
            value: '3'
            node: 44
            variable: 347
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: NewItemNumLimit
            pointer: '0'
            pointerVariable: NewItemNumLimit
          -
            class_name: TestNodePort
            id: 581
            value: '[]'
            node: 44
            variable: 350
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: contentBalancingTable
            pointer: '0'
            pointerVariable: contentBalancingTable
          -
            class_name: TestNodePort
            id: 582
            value: '1'
            node: 44
            variable: 351
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: masteringThreshold
            pointer: '0'
            pointerVariable: masteringThreshold
          -
            class_name: TestNodePort
            id: 583
            value: '{"table":"EGR242_Module3_Assessment_Questions","columns":{"id":"id","question":"question","responseOptions":"responseOptions","trait":"trait","fixedIndex":"fixedIndex","p1":"p1","skippable":"skippable","instructions":"instructions"}}'
            node: 44
            variable: 353
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: questionBank
            pointer: '0'
            pointerVariable: questionBank
          -
            class_name: TestNodePort
            id: 584
            value: '{"table":"EGR242_Responses","columns":{"id":"id","item_id":"item_id","score":"score","session_id":"session_id","theta":"theta","sem":"sem","response":"response","trait":"trait","skipped":"skipped"}}'
            node: 44
            variable: 354
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: responseBank
            pointer: '0'
            pointerVariable: responseBank
          -
            class_name: TestNodePort
            id: 585
            value: '1'
            node: 44
            variable: 355
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: scoringSlope
            pointer: '0'
            pointerVariable: scoringSlope
          -
            class_name: TestNodePort
            id: 586
            value: '{"table":"EGR242_sessions","columns":{"id":"id","internal_id":"internal_id","user_id":"user_id","test_id":"test_id","finished":"finished"}}'
            node: 44
            variable: 356
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionBank
            pointer: '0'
            pointerVariable: sessionBank
          -
            class_name: TestNodePort
            id: 587
            value: EGR242_SessionResults
            node: 44
            variable: 358
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionResultsBank
            pointer: '0'
            pointerVariable: sessionResultsBank
          -
            class_name: TestNodePort
            id: 588
            value: Troubleshooting
            node: 44
            variable: 359
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: testName
            pointer: '0'
            pointerVariable: testName
          -
            class_name: TestNodePort
            id: 589
            value: 'Troubleshooting Results'
            node: 44
            variable: 360
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: testNameforResults
            pointer: '0'
            pointerVariable: testNameforResults
          -
            class_name: TestNodePort
            id: 590
            value: '{"table":"EGR242S23users","columns":{"id":"id","login":"login","password":"password","enabled":"enabled"}}'
            node: 44
            variable: 361
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: userBank
            pointer: '0'
            pointerVariable: userBank
          -
            class_name: TestNodePort
            id: 591
            value: null
            node: 44
            variable: 348
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: SD
            pointer: '0'
            pointerVariable: SD
          -
            class_name: TestNodePort
            id: 592
            value: null
            node: 44
            variable: 349
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 1
            exposed: '0'
            name: Score
            pointer: '0'
            pointerVariable: Score
          -
            class_name: TestNodePort
            id: 593
            value: '0'
            node: 44
            variable: 352
            string: '1'
            defaultValue: '1'
            dynamic: '0'
            type: 2
            exposed: '1'
            name: out
            pointer: '0'
            pointerVariable: out
          -
            class_name: TestNodePort
            id: 594
            value: EGR242_sessions
            node: 44
            variable: 357
            string: '1'
            defaultValue: '0'
            dynamic: '0'
            type: 0
            exposed: '0'
            name: sessionBank2
            pointer: '0'
            pointerVariable: sessionBank2
    nodesConnections:
      -
        class_name: TestNodeConnection
        id: 139
        flowTest: 30
        sourceNode: 42
        sourcePort: null
        destinationNode: 44
        destinationPort: null
        returnFunction: ''
        defaultReturnFunction: '1'
      -
        class_name: TestNodeConnection
        id: 140
        flowTest: 30
        sourceNode: 44
        sourcePort: 593
        destinationNode: 43
        destinationPort: null
        returnFunction: out
        defaultReturnFunction: '1'
    baseTemplate: null
    tags: ''
    groups: ''
    protected: '0'
    starterContent: false
    hash: 8825d3b44b9ddc51346c71ce2cecad5d996e874d
  -
    class_name: DataTable
    id: 11
    name: EGR242_Module3_Assessment_Questions
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: fixedIndex
        type: text
        nullable: true
        length: ''
      -
        name: trait
        type: text
        nullable: true
        length: ''
      -
        name: question
        type: text
        nullable: false
        length: ''
      -
        name: responseOptions
        type: text
        nullable: false
        length: ''
      -
        name: p1
        type: float
        nullable: true
        length: ''
      -
        name: p2
        type: float
        nullable: true
        length: ''
      -
        name: p3
        type: float
        nullable: true
        length: ''
      -
        name: p4
        type: float
        nullable: true
        length: ''
      -
        name: skippable
        type: boolean
        nullable: true
        length: ''
      -
        name: instructions
        type: text
        nullable: true
        length: ''
      -
        name: SubGroupId
        type: integer
        nullable: true
        length: ''
      -
        name: SubGroupSortOrder
        type: integer
        nullable: true
        length: ''
    groups: ''
    starterContent: false
    hash: c7c01c0881d0710aa26bcc7717526efa912afbda
  -
    class_name: DataTable
    id: 12
    name: EGR242_Responses
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: item_id
        type: bigint
        nullable: false
        length: ''
      -
        name: response
        type: string
        nullable: false
        length: 1024
      -
        name: score
        type: float
        nullable: true
        length: ''
      -
        name: timeTaken
        type: float
        nullable: false
        length: ''
      -
        name: session_id
        type: string
        nullable: false
        length: 1024
      -
        name: theta
        type: float
        nullable: false
        length: ''
      -
        name: sem
        type: float
        nullable: false
        length: ''
      -
        name: trait
        type: string
        nullable: true
        length: 1024
      -
        name: skipped
        type: boolean
        nullable: false
        length: ''
    groups: ''
    starterContent: false
    hash: 4311c920ef5fe4150df6558c3c888165f4ab01a2
  -
    class_name: DataTable
    id: 13
    name: EGR242_sessions
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: internal_id
        type: bigint
        nullable: false
        length: ''
      -
        name: test_id
        type: bigint
        nullable: false
        length: ''
      -
        name: user_id
        type: bigint
        nullable: false
        length: ''
      -
        name: startedTime
        type: datetime
        nullable: false
        length: ''
      -
        name: updateTime
        type: datetime
        nullable: false
        length: ''
      -
        name: finished
        type: boolean
        nullable: false
        length: ''
      -
        name: state
        type: text
        nullable: true
        length: ''
    groups: ''
    starterContent: false
    hash: 5ecf360f7376dc08939327398904ab56c3636d0f
  -
    class_name: DataTable
    id: 14
    name: EGR242_SessionResults
    description: ''
    accessibility: 2
    archived: '0'
    columns:
      -
        name: id
        type: bigint
        nullable: false
        length: ''
      -
        name: name
        type: string
        nullable: true
        length: 1024
      -
        name: value
        type: text
        nullable: false
        length: ''
      -
        name: session_id
        type: string
        nullable: true
        length: 1024
    groups: ''
    starterContent: false
    hash: 2bcb0f1af1d05fe5a0578c49517f7cb6767302e9
